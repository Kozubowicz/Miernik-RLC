
MagisterkaBezRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020f4  0800bf10  0800bf10  0001bf10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e004  0800e004  00020294  2**0
                  CONTENTS
  4 .ARM          00000000  0800e004  0800e004  00020294  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e004  0800e004  00020294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e004  0800e004  0001e004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e008  0800e008  0001e008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000294  20000000  0800e00c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000298  0800e2a0  00020298  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  0800e2a0  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f03  00000000  00000000  000202c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e86  00000000  00000000  000391c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  0003c050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d8  00000000  00000000  0003d488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000241a1  00000000  00000000  0003e760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a5f  00000000  00000000  00062901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc59b  00000000  00000000  00078360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001548fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ba4  00000000  00000000  00154950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000298 	.word	0x20000298
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bef4 	.word	0x0800bef4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000029c 	.word	0x2000029c
 80001cc:	0800bef4 	.word	0x0800bef4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af02      	add	r7, sp, #8
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	4608      	mov	r0, r1
 8000cfe:	4611      	mov	r1, r2
 8000d00:	461a      	mov	r2, r3
 8000d02:	4623      	mov	r3, r4
 8000d04:	80fb      	strh	r3, [r7, #6]
 8000d06:	4603      	mov	r3, r0
 8000d08:	80bb      	strh	r3, [r7, #4]
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	807b      	strh	r3, [r7, #2]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000d12:	88f8      	ldrh	r0, [r7, #6]
 8000d14:	88b9      	ldrh	r1, [r7, #4]
 8000d16:	887a      	ldrh	r2, [r7, #2]
 8000d18:	883c      	ldrh	r4, [r7, #0]
 8000d1a:	8b3b      	ldrh	r3, [r7, #24]
 8000d1c:	9300      	str	r3, [sp, #0]
 8000d1e:	4623      	mov	r3, r4
 8000d20:	f000 fa88 	bl	8001234 <ST7735_FillRectangle>
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd90      	pop	{r4, r7, pc}

08000d2c <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af02      	add	r7, sp, #8
 8000d32:	4603      	mov	r3, r0
 8000d34:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <fillScreen+0x2c>)
 8000d38:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d3c:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <fillScreen+0x30>)
 8000d3e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	460b      	mov	r3, r1
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f7ff ffd2 	bl	8000cf4 <fillRect>
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	200002d8 	.word	0x200002d8
 8000d5c:	200002dc 	.word	0x200002dc

08000d60 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6e:	f004 f8cd 	bl	8004f0c <HAL_GPIO_WritePin>
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d84:	f004 f8c2 	bl	8004f0c <HAL_GPIO_WritePin>
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <ST7735_Reset>:

void ST7735_Reset()
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d96:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9a:	f004 f8b7 	bl	8004f0c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000d9e:	2005      	movs	r0, #5
 8000da0:	f002 fb8e 	bl	80034c0 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000daa:	f04f 30ff 	mov.w	r0, #4294967295
 8000dae:	f004 f8ad 	bl	8004f0c <HAL_GPIO_WritePin>
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2110      	movs	r1, #16
 8000dc6:	4807      	ldr	r0, [pc, #28]	; (8000de4 <ST7735_WriteCommand+0x2c>)
 8000dc8:	f004 f8a0 	bl	8004f0c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000dcc:	1df9      	adds	r1, r7, #7
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	4804      	ldr	r0, [pc, #16]	; (8000de8 <ST7735_WriteCommand+0x30>)
 8000dd6:	f005 faf0 	bl	80063ba <HAL_SPI_Transmit>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	48000400 	.word	0x48000400
 8000de8:	20000318 	.word	0x20000318

08000dec <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	2110      	movs	r1, #16
 8000dfa:	4807      	ldr	r0, [pc, #28]	; (8000e18 <ST7735_WriteData+0x2c>)
 8000dfc:	f004 f886 	bl	8004f0c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	f04f 33ff 	mov.w	r3, #4294967295
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	4804      	ldr	r0, [pc, #16]	; (8000e1c <ST7735_WriteData+0x30>)
 8000e0c:	f005 fad5 	bl	80063ba <HAL_SPI_Transmit>
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	48000400 	.word	0x48000400
 8000e1c:	20000318 	.word	0x20000318

08000e20 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	1c5a      	adds	r2, r3, #1
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000e32:	e034      	b.n	8000e9e <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	1c5a      	adds	r2, r3, #1
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000e3e:	7afb      	ldrb	r3, [r7, #11]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ffb9 	bl	8000db8 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	1c5a      	adds	r2, r3, #1
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000e50:	7abb      	ldrb	r3, [r7, #10]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e58:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000e5a:	7abb      	ldrb	r3, [r7, #10]
 8000e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e60:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000e62:	7abb      	ldrb	r3, [r7, #10]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d008      	beq.n	8000e7a <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000e68:	7abb      	ldrb	r3, [r7, #10]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff ffbd 	bl	8000dec <ST7735_WriteData>
            addr += numArgs;
 8000e72:	7abb      	ldrb	r3, [r7, #10]
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000e7a:	89bb      	ldrh	r3, [r7, #12]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00e      	beq.n	8000e9e <DisplayInit+0x7e>
            ms = *addr++;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	1c5a      	adds	r2, r3, #1
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000e8a:	89bb      	ldrh	r3, [r7, #12]
 8000e8c:	2bff      	cmp	r3, #255	; 0xff
 8000e8e:	d102      	bne.n	8000e96 <DisplayInit+0x76>
 8000e90:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e94:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000e96:	89bb      	ldrh	r3, [r7, #12]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f002 fb11 	bl	80034c0 <HAL_Delay>
    while(numCommands--) {
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	1e5a      	subs	r2, r3, #1
 8000ea2:	73fa      	strb	r2, [r7, #15]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1c5      	bne.n	8000e34 <DisplayInit+0x14>
        }
    }
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4604      	mov	r4, r0
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4623      	mov	r3, r4
 8000ec4:	71fb      	strb	r3, [r7, #7]
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71bb      	strb	r3, [r7, #6]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	717b      	strb	r3, [r7, #5]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000ed2:	202a      	movs	r0, #42	; 0x2a
 8000ed4:	f7ff ff70 	bl	8000db8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000ed8:	2300      	movs	r3, #0
 8000eda:	733b      	strb	r3, [r7, #12]
 8000edc:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <ST7735_SetAddressWindow+0x88>)
 8000ede:	781a      	ldrb	r2, [r3, #0]
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	737b      	strb	r3, [r7, #13]
 8000ee8:	2300      	movs	r3, #0
 8000eea:	73bb      	strb	r3, [r7, #14]
 8000eec:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <ST7735_SetAddressWindow+0x88>)
 8000eee:	781a      	ldrb	r2, [r3, #0]
 8000ef0:	797b      	ldrb	r3, [r7, #5]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	2104      	movs	r1, #4
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff74 	bl	8000dec <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000f04:	202b      	movs	r0, #43	; 0x2b
 8000f06:	f7ff ff57 	bl	8000db8 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <ST7735_SetAddressWindow+0x8c>)
 8000f0c:	781a      	ldrb	r2, [r3, #0]
 8000f0e:	79bb      	ldrb	r3, [r7, #6]
 8000f10:	4413      	add	r3, r2
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <ST7735_SetAddressWindow+0x8c>)
 8000f18:	781a      	ldrb	r2, [r3, #0]
 8000f1a:	793b      	ldrb	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	2104      	movs	r1, #4
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff5f 	bl	8000dec <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000f2e:	202c      	movs	r0, #44	; 0x2c
 8000f30:	f7ff ff42 	bl	8000db8 <ST7735_WriteCommand>
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd90      	pop	{r4, r7, pc}
 8000f3c:	200002d0 	.word	0x200002d0
 8000f40:	200002d4 	.word	0x200002d4

08000f44 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8000f4e:	f7ff ff07 	bl	8000d60 <ST7735_Select>
    ST7735_Reset();
 8000f52:	f7ff ff1b 	bl	8000d8c <ST7735_Reset>
    DisplayInit(init_cmds1);
 8000f56:	480c      	ldr	r0, [pc, #48]	; (8000f88 <ST7735_Init+0x44>)
 8000f58:	f7ff ff62 	bl	8000e20 <DisplayInit>
    DisplayInit(init_cmds2);
 8000f5c:	480b      	ldr	r0, [pc, #44]	; (8000f8c <ST7735_Init+0x48>)
 8000f5e:	f7ff ff5f 	bl	8000e20 <DisplayInit>
    DisplayInit(init_cmds3);
 8000f62:	480b      	ldr	r0, [pc, #44]	; (8000f90 <ST7735_Init+0x4c>)
 8000f64:	f7ff ff5c 	bl	8000e20 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <ST7735_Init+0x50>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <ST7735_Init+0x54>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f810 	bl	8000f9c <ST7735_SetRotation>
    ST7735_Unselect();
 8000f7c:	f7ff fefb 	bl	8000d76 <ST7735_Unselect>

}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	0800bfdc 	.word	0x0800bfdc
 8000f8c:	0800c014 	.word	0x0800c014
 8000f90:	0800c024 	.word	0x0800c024
 8000f94:	200002d1 	.word	0x200002d1
 8000f98:	200002d5 	.word	0x200002d5

08000f9c <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4b33      	ldr	r3, [pc, #204]	; (8001080 <ST7735_SetRotation+0xe4>)
 8000fb4:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8000fb6:	4b32      	ldr	r3, [pc, #200]	; (8001080 <ST7735_SetRotation+0xe4>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d84e      	bhi.n	800105c <ST7735_SetRotation+0xc0>
 8000fbe:	a201      	add	r2, pc, #4	; (adr r2, 8000fc4 <ST7735_SetRotation+0x28>)
 8000fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc4:	08000fd5 	.word	0x08000fd5
 8000fc8:	08000ff7 	.word	0x08000ff7
 8000fcc:	08001019 	.word	0x08001019
 8000fd0:	0800103b 	.word	0x0800103b
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8000fd4:	23c0      	movs	r3, #192	; 0xc0
 8000fd6:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000fd8:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <ST7735_SetRotation+0xe8>)
 8000fda:	22a0      	movs	r2, #160	; 0xa0
 8000fdc:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000fde:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <ST7735_SetRotation+0xec>)
 8000fe0:	2280      	movs	r2, #128	; 0x80
 8000fe2:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8000fe4:	4b29      	ldr	r3, [pc, #164]	; (800108c <ST7735_SetRotation+0xf0>)
 8000fe6:	781a      	ldrb	r2, [r3, #0]
 8000fe8:	4b29      	ldr	r3, [pc, #164]	; (8001090 <ST7735_SetRotation+0xf4>)
 8000fea:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8000fec:	4b29      	ldr	r3, [pc, #164]	; (8001094 <ST7735_SetRotation+0xf8>)
 8000fee:	781a      	ldrb	r2, [r3, #0]
 8000ff0:	4b29      	ldr	r3, [pc, #164]	; (8001098 <ST7735_SetRotation+0xfc>)
 8000ff2:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000ff4:	e032      	b.n	800105c <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000ff6:	23a0      	movs	r3, #160	; 0xa0
 8000ff8:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000ffa:	4b23      	ldr	r3, [pc, #140]	; (8001088 <ST7735_SetRotation+0xec>)
 8000ffc:	22a0      	movs	r2, #160	; 0xa0
 8000ffe:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001000:	4b20      	ldr	r3, [pc, #128]	; (8001084 <ST7735_SetRotation+0xe8>)
 8001002:	2280      	movs	r2, #128	; 0x80
 8001004:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <ST7735_SetRotation+0xf0>)
 8001008:	781a      	ldrb	r2, [r3, #0]
 800100a:	4b23      	ldr	r3, [pc, #140]	; (8001098 <ST7735_SetRotation+0xfc>)
 800100c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <ST7735_SetRotation+0xf8>)
 8001010:	781a      	ldrb	r2, [r3, #0]
 8001012:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <ST7735_SetRotation+0xf4>)
 8001014:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001016:	e021      	b.n	800105c <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800101c:	4b19      	ldr	r3, [pc, #100]	; (8001084 <ST7735_SetRotation+0xe8>)
 800101e:	22a0      	movs	r2, #160	; 0xa0
 8001020:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001022:	4b19      	ldr	r3, [pc, #100]	; (8001088 <ST7735_SetRotation+0xec>)
 8001024:	2280      	movs	r2, #128	; 0x80
 8001026:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <ST7735_SetRotation+0xf0>)
 800102a:	781a      	ldrb	r2, [r3, #0]
 800102c:	4b18      	ldr	r3, [pc, #96]	; (8001090 <ST7735_SetRotation+0xf4>)
 800102e:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <ST7735_SetRotation+0xf8>)
 8001032:	781a      	ldrb	r2, [r3, #0]
 8001034:	4b18      	ldr	r3, [pc, #96]	; (8001098 <ST7735_SetRotation+0xfc>)
 8001036:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001038:	e010      	b.n	800105c <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800103a:	2360      	movs	r3, #96	; 0x60
 800103c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <ST7735_SetRotation+0xec>)
 8001040:	22a0      	movs	r2, #160	; 0xa0
 8001042:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <ST7735_SetRotation+0xe8>)
 8001046:	2280      	movs	r2, #128	; 0x80
 8001048:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <ST7735_SetRotation+0xf0>)
 800104c:	781a      	ldrb	r2, [r3, #0]
 800104e:	4b12      	ldr	r3, [pc, #72]	; (8001098 <ST7735_SetRotation+0xfc>)
 8001050:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <ST7735_SetRotation+0xf8>)
 8001054:	781a      	ldrb	r2, [r3, #0]
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <ST7735_SetRotation+0xf4>)
 8001058:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800105a:	bf00      	nop
  }
  ST7735_Select();
 800105c:	f7ff fe80 	bl	8000d60 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8001060:	2036      	movs	r0, #54	; 0x36
 8001062:	f7ff fea9 	bl	8000db8 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8001066:	f107 030f 	add.w	r3, r7, #15
 800106a:	2101      	movs	r1, #1
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff febd 	bl	8000dec <ST7735_WriteData>
  ST7735_Unselect();
 8001072:	f7ff fe80 	bl	8000d76 <ST7735_Unselect>
}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200002d6 	.word	0x200002d6
 8001084:	200002dc 	.word	0x200002dc
 8001088:	200002d8 	.word	0x200002d8
 800108c:	200002d1 	.word	0x200002d1
 8001090:	200002d0 	.word	0x200002d0
 8001094:	200002d5 	.word	0x200002d5
 8001098:	200002d4 	.word	0x200002d4

0800109c <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800109c:	b082      	sub	sp, #8
 800109e:	b590      	push	{r4, r7, lr}
 80010a0:	b089      	sub	sp, #36	; 0x24
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
 80010a6:	4603      	mov	r3, r0
 80010a8:	80fb      	strh	r3, [r7, #6]
 80010aa:	460b      	mov	r3, r1
 80010ac:	80bb      	strh	r3, [r7, #4]
 80010ae:	4613      	mov	r3, r2
 80010b0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	b2d8      	uxtb	r0, r3
 80010b6:	88bb      	ldrh	r3, [r7, #4]
 80010b8:	b2d9      	uxtb	r1, r3
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80010c2:	4413      	add	r3, r2
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	3b01      	subs	r3, #1
 80010c8:	b2dc      	uxtb	r4, r3
 80010ca:	88bb      	ldrh	r3, [r7, #4]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80010d2:	4413      	add	r3, r2
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	3b01      	subs	r3, #1
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4622      	mov	r2, r4
 80010dc:	f7ff feea 	bl	8000eb4 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
 80010e4:	e043      	b.n	800116e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80010e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010e8:	78fb      	ldrb	r3, [r7, #3]
 80010ea:	3b20      	subs	r3, #32
 80010ec:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80010f0:	fb01 f303 	mul.w	r3, r1, r3
 80010f4:	4619      	mov	r1, r3
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	440b      	add	r3, r1
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	4413      	add	r3, r2
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
 8001106:	e029      	b.n	800115c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d00e      	beq.n	8001136 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001118:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800111a:	0a1b      	lsrs	r3, r3, #8
 800111c:	b29b      	uxth	r3, r3
 800111e:	b2db      	uxtb	r3, r3
 8001120:	743b      	strb	r3, [r7, #16]
 8001122:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001124:	b2db      	uxtb	r3, r3
 8001126:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	2102      	movs	r1, #2
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fe5c 	bl	8000dec <ST7735_WriteData>
 8001134:	e00f      	b.n	8001156 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001136:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800113a:	0a1b      	lsrs	r3, r3, #8
 800113c:	b29b      	uxth	r3, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	733b      	strb	r3, [r7, #12]
 8001142:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001146:	b2db      	uxtb	r3, r3
 8001148:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	2102      	movs	r1, #2
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fe4b 	bl	8000dec <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	3301      	adds	r3, #1
 800115a:	61bb      	str	r3, [r7, #24]
 800115c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001160:	461a      	mov	r2, r3
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	4293      	cmp	r3, r2
 8001166:	d3cf      	bcc.n	8001108 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	3301      	adds	r3, #1
 800116c:	61fb      	str	r3, [r7, #28]
 800116e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001172:	461a      	mov	r2, r3
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	4293      	cmp	r3, r2
 8001178:	d3b5      	bcc.n	80010e6 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800117a:	bf00      	nop
 800117c:	bf00      	nop
 800117e:	3724      	adds	r7, #36	; 0x24
 8001180:	46bd      	mov	sp, r7
 8001182:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001186:	b002      	add	sp, #8
 8001188:	4770      	bx	lr
	...

0800118c <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800118c:	b082      	sub	sp, #8
 800118e:	b580      	push	{r7, lr}
 8001190:	b086      	sub	sp, #24
 8001192:	af04      	add	r7, sp, #16
 8001194:	603a      	str	r2, [r7, #0]
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	4603      	mov	r3, r0
 800119a:	80fb      	strh	r3, [r7, #6]
 800119c:	460b      	mov	r3, r1
 800119e:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80011a0:	f7ff fdde 	bl	8000d60 <ST7735_Select>

    while(*str) {
 80011a4:	e033      	b.n	800120e <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 80011a6:	88fb      	ldrh	r3, [r7, #6]
 80011a8:	7d3a      	ldrb	r2, [r7, #20]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a1f      	ldr	r2, [pc, #124]	; (800122c <ST7735_WriteString+0xa0>)
 80011ae:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011b2:	4293      	cmp	r3, r2
 80011b4:	db16      	blt.n	80011e4 <ST7735_WriteString+0x58>
            x = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80011ba:	7d7b      	ldrb	r3, [r7, #21]
 80011bc:	b29a      	uxth	r2, r3
 80011be:	88bb      	ldrh	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 80011c4:	88bb      	ldrh	r3, [r7, #4]
 80011c6:	7d7a      	ldrb	r2, [r7, #21]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a19      	ldr	r2, [pc, #100]	; (8001230 <ST7735_WriteString+0xa4>)
 80011cc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011d0:	4293      	cmp	r3, r2
 80011d2:	da21      	bge.n	8001218 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b20      	cmp	r3, #32
 80011da:	d103      	bne.n	80011e4 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	3301      	adds	r3, #1
 80011e0:	603b      	str	r3, [r7, #0]
                continue;
 80011e2:	e014      	b.n	800120e <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	781a      	ldrb	r2, [r3, #0]
 80011e8:	88b9      	ldrh	r1, [r7, #4]
 80011ea:	88f8      	ldrh	r0, [r7, #6]
 80011ec:	8c3b      	ldrh	r3, [r7, #32]
 80011ee:	9302      	str	r3, [sp, #8]
 80011f0:	8bbb      	ldrh	r3, [r7, #28]
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	f7ff ff4f 	bl	800109c <ST7735_WriteChar>
        x += font.width;
 80011fe:	7d3b      	ldrb	r3, [r7, #20]
 8001200:	b29a      	uxth	r2, r3
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	4413      	add	r3, r2
 8001206:	80fb      	strh	r3, [r7, #6]
        str++;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	3301      	adds	r3, #1
 800120c:	603b      	str	r3, [r7, #0]
    while(*str) {
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1c7      	bne.n	80011a6 <ST7735_WriteString+0x1a>
 8001216:	e000      	b.n	800121a <ST7735_WriteString+0x8e>
                break;
 8001218:	bf00      	nop
    }

    ST7735_Unselect();
 800121a:	f7ff fdac 	bl	8000d76 <ST7735_Unselect>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001228:	b002      	add	sp, #8
 800122a:	4770      	bx	lr
 800122c:	200002d8 	.word	0x200002d8
 8001230:	200002dc 	.word	0x200002dc

08001234 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	4604      	mov	r4, r0
 800123c:	4608      	mov	r0, r1
 800123e:	4611      	mov	r1, r2
 8001240:	461a      	mov	r2, r3
 8001242:	4623      	mov	r3, r4
 8001244:	80fb      	strh	r3, [r7, #6]
 8001246:	4603      	mov	r3, r0
 8001248:	80bb      	strh	r3, [r7, #4]
 800124a:	460b      	mov	r3, r1
 800124c:	807b      	strh	r3, [r7, #2]
 800124e:	4613      	mov	r3, r2
 8001250:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	4a37      	ldr	r2, [pc, #220]	; (8001334 <ST7735_FillRectangle+0x100>)
 8001256:	f9b2 2000 	ldrsh.w	r2, [r2]
 800125a:	4293      	cmp	r3, r2
 800125c:	da66      	bge.n	800132c <ST7735_FillRectangle+0xf8>
 800125e:	88bb      	ldrh	r3, [r7, #4]
 8001260:	4a35      	ldr	r2, [pc, #212]	; (8001338 <ST7735_FillRectangle+0x104>)
 8001262:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001266:	4293      	cmp	r3, r2
 8001268:	da60      	bge.n	800132c <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 800126a:	88fa      	ldrh	r2, [r7, #6]
 800126c:	887b      	ldrh	r3, [r7, #2]
 800126e:	4413      	add	r3, r2
 8001270:	4a30      	ldr	r2, [pc, #192]	; (8001334 <ST7735_FillRectangle+0x100>)
 8001272:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001276:	4293      	cmp	r3, r2
 8001278:	dd06      	ble.n	8001288 <ST7735_FillRectangle+0x54>
 800127a:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <ST7735_FillRectangle+0x100>)
 800127c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001280:	b29a      	uxth	r2, r3
 8001282:	88fb      	ldrh	r3, [r7, #6]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8001288:	88ba      	ldrh	r2, [r7, #4]
 800128a:	883b      	ldrh	r3, [r7, #0]
 800128c:	4413      	add	r3, r2
 800128e:	4a2a      	ldr	r2, [pc, #168]	; (8001338 <ST7735_FillRectangle+0x104>)
 8001290:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001294:	4293      	cmp	r3, r2
 8001296:	dd06      	ble.n	80012a6 <ST7735_FillRectangle+0x72>
 8001298:	4b27      	ldr	r3, [pc, #156]	; (8001338 <ST7735_FillRectangle+0x104>)
 800129a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800129e:	b29a      	uxth	r2, r3
 80012a0:	88bb      	ldrh	r3, [r7, #4]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80012a6:	f7ff fd5b 	bl	8000d60 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	b2d8      	uxtb	r0, r3
 80012ae:	88bb      	ldrh	r3, [r7, #4]
 80012b0:	b2d9      	uxtb	r1, r3
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	4413      	add	r3, r2
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	3b01      	subs	r3, #1
 80012c0:	b2dc      	uxtb	r4, r3
 80012c2:	88bb      	ldrh	r3, [r7, #4]
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	883b      	ldrh	r3, [r7, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	4413      	add	r3, r2
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	3b01      	subs	r3, #1
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	4622      	mov	r2, r4
 80012d4:	f7ff fdee 	bl	8000eb4 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80012d8:	8c3b      	ldrh	r3, [r7, #32]
 80012da:	0a1b      	lsrs	r3, r3, #8
 80012dc:	b29b      	uxth	r3, r3
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	733b      	strb	r3, [r7, #12]
 80012e2:	8c3b      	ldrh	r3, [r7, #32]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80012e8:	2201      	movs	r2, #1
 80012ea:	2110      	movs	r1, #16
 80012ec:	4813      	ldr	r0, [pc, #76]	; (800133c <ST7735_FillRectangle+0x108>)
 80012ee:	f003 fe0d 	bl	8004f0c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80012f2:	883b      	ldrh	r3, [r7, #0]
 80012f4:	80bb      	strh	r3, [r7, #4]
 80012f6:	e013      	b.n	8001320 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 80012f8:	887b      	ldrh	r3, [r7, #2]
 80012fa:	80fb      	strh	r3, [r7, #6]
 80012fc:	e00a      	b.n	8001314 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80012fe:	f107 010c 	add.w	r1, r7, #12
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	2202      	movs	r2, #2
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <ST7735_FillRectangle+0x10c>)
 800130a:	f005 f856 	bl	80063ba <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	3b01      	subs	r3, #1
 8001312:	80fb      	strh	r3, [r7, #6]
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f1      	bne.n	80012fe <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 800131a:	88bb      	ldrh	r3, [r7, #4]
 800131c:	3b01      	subs	r3, #1
 800131e:	80bb      	strh	r3, [r7, #4]
 8001320:	88bb      	ldrh	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1e8      	bne.n	80012f8 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 8001326:	f7ff fd26 	bl	8000d76 <ST7735_Unselect>
 800132a:	e000      	b.n	800132e <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 800132c:	bf00      	nop
}
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	bd90      	pop	{r4, r7, pc}
 8001334:	200002d8 	.word	0x200002d8
 8001338:	200002dc 	.word	0x200002dc
 800133c:	48000400 	.word	0x48000400
 8001340:	20000318 	.word	0x20000318
 8001344:	00000000 	.word	0x00000000

08001348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001348:	b5b0      	push	{r4, r5, r7, lr}
 800134a:	ed2d 8b02 	vpush	{d8}
 800134e:	b0b6      	sub	sp, #216	; 0xd8
 8001350:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001352:	f002 f87c 	bl	800344e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001356:	f001 fb89 	bl	8002a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800135a:	f001 fcfb 	bl	8002d54 <MX_GPIO_Init>
  MX_SPI3_Init();
 800135e:	f001 fc19 	bl	8002b94 <MX_SPI3_Init>
  MX_ADC1_Init();
 8001362:	f001 fbd5 	bl	8002b10 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001366:	f001 fc53 	bl	8002c10 <MX_TIM1_Init>
  MX_TIM2_Init();
 800136a:	f001 fca5 	bl	8002cb8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 800136e:	48bc      	ldr	r0, [pc, #752]	; (8001660 <main+0x318>)
 8001370:	f005 fb4e 	bl	8006a10 <HAL_TIM_Base_Start>

  ST7735_Init(0);
 8001374:	2000      	movs	r0, #0
 8001376:	f7ff fde5 	bl	8000f44 <ST7735_Init>
  fillScreen(BLACK);
 800137a:	2000      	movs	r0, #0
 800137c:	f7ff fcd6 	bl	8000d2c <fillScreen>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001380:	217f      	movs	r1, #127	; 0x7f
 8001382:	48b8      	ldr	r0, [pc, #736]	; (8001664 <main+0x31c>)
 8001384:	f003 fafe 	bl	8004984 <HAL_ADCEx_Calibration_Start>
  {
    /* USER CODE END WHILE */
	  uint8_t oldFlaga;


	  ADC_Select_ModePin();
 8001388:	f001 faf0 	bl	800296c <ADC_Select_ModePin>

	  HAL_ADC_Start(&hadc1);
 800138c:	48b5      	ldr	r0, [pc, #724]	; (8001664 <main+0x31c>)
 800138e:	f002 fc19 	bl	8003bc4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8001392:	210a      	movs	r1, #10
 8001394:	48b3      	ldr	r0, [pc, #716]	; (8001664 <main+0x31c>)
 8001396:	f002 fcab 	bl	8003cf0 <HAL_ADC_PollForConversion>
	  Vtryb = HAL_ADC_GetValue(&hadc1);
 800139a:	48b2      	ldr	r0, [pc, #712]	; (8001664 <main+0x31c>)
 800139c:	f002 fd37 	bl	8003e0e <HAL_ADC_GetValue>
 80013a0:	4603      	mov	r3, r0
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	4bb0      	ldr	r3, [pc, #704]	; (8001668 <main+0x320>)
 80013a6:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 80013a8:	48ae      	ldr	r0, [pc, #696]	; (8001664 <main+0x31c>)
 80013aa:	f002 fc6e 	bl	8003c8a <HAL_ADC_Stop>

	  tryb = (Vtryb*3.3)/4095;
 80013ae:	4bae      	ldr	r3, [pc, #696]	; (8001668 <main+0x320>)
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f8b6 	bl	8000524 <__aeabi_i2d>
 80013b8:	a39d      	add	r3, pc, #628	; (adr r3, 8001630 <main+0x2e8>)
 80013ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013be:	f7ff f91b 	bl	80005f8 <__aeabi_dmul>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4610      	mov	r0, r2
 80013c8:	4619      	mov	r1, r3
 80013ca:	a39b      	add	r3, pc, #620	; (adr r3, 8001638 <main+0x2f0>)
 80013cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d0:	f7ff fa3c 	bl	800084c <__aeabi_ddiv>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4610      	mov	r0, r2
 80013da:	4619      	mov	r1, r3
 80013dc:	f7ff fc04 	bl	8000be8 <__aeabi_d2f>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4aa2      	ldr	r2, [pc, #648]	; (800166c <main+0x324>)
 80013e4:	6013      	str	r3, [r2, #0]

	  if(tryb<0.1){
 80013e6:	4ba1      	ldr	r3, [pc, #644]	; (800166c <main+0x324>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f8ac 	bl	8000548 <__aeabi_f2d>
 80013f0:	a393      	add	r3, pc, #588	; (adr r3, 8001640 <main+0x2f8>)
 80013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f6:	f7ff fb71 	bl	8000adc <__aeabi_dcmplt>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <main+0xc0>
	  	  Flaga = 1;
 8001400:	4b9b      	ldr	r3, [pc, #620]	; (8001670 <main+0x328>)
 8001402:	2201      	movs	r2, #1
 8001404:	801a      	strh	r2, [r3, #0]
 8001406:	e02e      	b.n	8001466 <main+0x11e>
	   }
	  else if(tryb < 1.3){
 8001408:	4b98      	ldr	r3, [pc, #608]	; (800166c <main+0x324>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f89b 	bl	8000548 <__aeabi_f2d>
 8001412:	a38d      	add	r3, pc, #564	; (adr r3, 8001648 <main+0x300>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f7ff fb60 	bl	8000adc <__aeabi_dcmplt>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <main+0xe2>
		  Flaga = 2;
 8001422:	4b93      	ldr	r3, [pc, #588]	; (8001670 <main+0x328>)
 8001424:	2202      	movs	r2, #2
 8001426:	801a      	strh	r2, [r3, #0]
 8001428:	e01d      	b.n	8001466 <main+0x11e>
	  }
	  else if(tryb < 2.3){
 800142a:	4b90      	ldr	r3, [pc, #576]	; (800166c <main+0x324>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f88a 	bl	8000548 <__aeabi_f2d>
 8001434:	a386      	add	r3, pc, #536	; (adr r3, 8001650 <main+0x308>)
 8001436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143a:	f7ff fb4f 	bl	8000adc <__aeabi_dcmplt>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <main+0x104>
		  Flaga = 3;
 8001444:	4b8a      	ldr	r3, [pc, #552]	; (8001670 <main+0x328>)
 8001446:	2203      	movs	r2, #3
 8001448:	801a      	strh	r2, [r3, #0]
 800144a:	e00c      	b.n	8001466 <main+0x11e>
	  }
	  else if(tryb < 3.5){
 800144c:	4b87      	ldr	r3, [pc, #540]	; (800166c <main+0x324>)
 800144e:	edd3 7a00 	vldr	s15, [r3]
 8001452:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8001456:	eef4 7ac7 	vcmpe.f32	s15, s14
 800145a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145e:	d502      	bpl.n	8001466 <main+0x11e>
		  Flaga = 4;
 8001460:	4b83      	ldr	r3, [pc, #524]	; (8001670 <main+0x328>)
 8001462:	2204      	movs	r2, #4
 8001464:	801a      	strh	r2, [r3, #0]
	  }

	  if(Flaga != oldFlaga){
 8001466:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800146a:	b29a      	uxth	r2, r3
 800146c:	4b80      	ldr	r3, [pc, #512]	; (8001670 <main+0x328>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d008      	beq.n	8001486 <main+0x13e>
		oldFlaga = Flaga;
 8001474:	4b7e      	ldr	r3, [pc, #504]	; (8001670 <main+0x328>)
 8001476:	881b      	ldrh	r3, [r3, #0]
 8001478:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	  	fillScreen(BLACK);
 800147c:	2000      	movs	r0, #0
 800147e:	f7ff fc55 	bl	8000d2c <fillScreen>
	  	deactivate_perif();
 8001482:	f001 fadf 	bl	8002a44 <deactivate_perif>
	  }

	  if(Flaga == 1){
 8001486:	4b7a      	ldr	r3, [pc, #488]	; (8001670 <main+0x328>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d11c      	bne.n	80014c8 <main+0x180>

		  ST7735_WriteString(7, 35, "MIERNIK", Font_16x26, WHITE, BLACK);
 800148e:	4b79      	ldr	r3, [pc, #484]	; (8001674 <main+0x32c>)
 8001490:	2200      	movs	r2, #0
 8001492:	9202      	str	r2, [sp, #8]
 8001494:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001498:	9201      	str	r2, [sp, #4]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	9200      	str	r2, [sp, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a75      	ldr	r2, [pc, #468]	; (8001678 <main+0x330>)
 80014a2:	2123      	movs	r1, #35	; 0x23
 80014a4:	2007      	movs	r0, #7
 80014a6:	f7ff fe71 	bl	800118c <ST7735_WriteString>
		  ST7735_WriteString(35, 80, "RLC", Font_16x26, WHITE, BLACK);
 80014aa:	4b72      	ldr	r3, [pc, #456]	; (8001674 <main+0x32c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	9202      	str	r2, [sp, #8]
 80014b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014b4:	9201      	str	r2, [sp, #4]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	9200      	str	r2, [sp, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a6f      	ldr	r2, [pc, #444]	; (800167c <main+0x334>)
 80014be:	2150      	movs	r1, #80	; 0x50
 80014c0:	2023      	movs	r0, #35	; 0x23
 80014c2:	f7ff fe63 	bl	800118c <ST7735_WriteString>
 80014c6:	e75f      	b.n	8001388 <main+0x40>

	  }
	  else if(Flaga == 2){
 80014c8:	4b69      	ldr	r3, [pc, #420]	; (8001670 <main+0x328>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	f040 84da 	bne.w	8001e86 <main+0xb3e>
		  Vref();
 80014d2:	f001 f997 	bl	8002804 <Vref>
		  ST7735_WriteString(25, 10, "REZYSTANCJA", Font_7x10, WHITE, BLACK);
 80014d6:	4b6a      	ldr	r3, [pc, #424]	; (8001680 <main+0x338>)
 80014d8:	2200      	movs	r2, #0
 80014da:	9202      	str	r2, [sp, #8]
 80014dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014e0:	9201      	str	r2, [sp, #4]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	9200      	str	r2, [sp, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a66      	ldr	r2, [pc, #408]	; (8001684 <main+0x33c>)
 80014ea:	210a      	movs	r1, #10
 80014ec:	2019      	movs	r0, #25
 80014ee:	f7ff fe4d 	bl	800118c <ST7735_WriteString>

		  set_gpio(GPIOB, S2_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL );
 80014f2:	2300      	movs	r3, #0
 80014f4:	2201      	movs	r2, #1
 80014f6:	2102      	movs	r1, #2
 80014f8:	4863      	ldr	r0, [pc, #396]	; (8001688 <main+0x340>)
 80014fa:	f001 fce3 	bl	8002ec4 <set_gpio>
		  set_gpio(GPIOB, S1_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL );
 80014fe:	2300      	movs	r3, #0
 8001500:	2201      	movs	r2, #1
 8001502:	2140      	movs	r1, #64	; 0x40
 8001504:	4860      	ldr	r0, [pc, #384]	; (8001688 <main+0x340>)
 8001506:	f001 fcdd 	bl	8002ec4 <set_gpio>
		  set_gpio(GPIOB, S0_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL );
 800150a:	2300      	movs	r3, #0
 800150c:	2201      	movs	r2, #1
 800150e:	2180      	movs	r1, #128	; 0x80
 8001510:	485d      	ldr	r0, [pc, #372]	; (8001688 <main+0x340>)
 8001512:	f001 fcd7 	bl	8002ec4 <set_gpio>
		  set_gpio(GPIOA, Rread_Pin, GPIO_MODE_ANALOG_ADC_CONTROL, GPIO_NOPULL );
 8001516:	2300      	movs	r3, #0
 8001518:	220b      	movs	r2, #11
 800151a:	2102      	movs	r1, #2
 800151c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001520:	f001 fcd0 	bl	8002ec4 <set_gpio>
		  set_gpio(GPIOA, Rref_Pin, GPIO_MODE_ANALOG_ADC_CONTROL, GPIO_NOPULL );
 8001524:	2300      	movs	r3, #0
 8001526:	220b      	movs	r2, #11
 8001528:	2101      	movs	r1, #1
 800152a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152e:	f001 fcc9 	bl	8002ec4 <set_gpio>
		  HAL_Delay(100);
 8001532:	2064      	movs	r0, #100	; 0x64
 8001534:	f001 ffc4 	bl	80034c0 <HAL_Delay>

		  double Uwe = (ref * 3.3/4095.0) * ((9990.0+10060.0)/10060.0);
 8001538:	4b54      	ldr	r3, [pc, #336]	; (800168c <main+0x344>)
 800153a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800153e:	a33c      	add	r3, pc, #240	; (adr r3, 8001630 <main+0x2e8>)
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	f7ff f858 	bl	80005f8 <__aeabi_dmul>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	a339      	add	r3, pc, #228	; (adr r3, 8001638 <main+0x2f0>)
 8001552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001556:	f7ff f979 	bl	800084c <__aeabi_ddiv>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	a33d      	add	r3, pc, #244	; (adr r3, 8001658 <main+0x310>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	f7ff f846 	bl	80005f8 <__aeabi_dmul>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		  ADC_Select_Rread();
 8001574:	f001 f9d4 	bl	8002920 <ADC_Select_Rread>
		  for(int i = 1; i<8; i++){
 8001578:	2301      	movs	r3, #1
 800157a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800157e:	e049      	b.n	8001614 <main+0x2cc>

			  for(int j = 0; j < 3; j ++){
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001586:	e01a      	b.n	80015be <main+0x276>
		          HAL_GPIO_WritePin(GPIOB, controlPin[j], muxChannel[i][j]);
 8001588:	4a41      	ldr	r2, [pc, #260]	; (8001690 <main+0x348>)
 800158a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800158e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001592:	b299      	uxth	r1, r3
 8001594:	483f      	ldr	r0, [pc, #252]	; (8001694 <main+0x34c>)
 8001596:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800159a:	4613      	mov	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015a4:	4413      	add	r3, r2
 80015a6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	461a      	mov	r2, r3
 80015ae:	4836      	ldr	r0, [pc, #216]	; (8001688 <main+0x340>)
 80015b0:	f003 fcac 	bl	8004f0c <HAL_GPIO_WritePin>
			  for(int j = 0; j < 3; j ++){
 80015b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80015b8:	3301      	adds	r3, #1
 80015ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80015be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	dde0      	ble.n	8001588 <main+0x240>
		      }
			  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80015c6:	217f      	movs	r1, #127	; 0x7f
 80015c8:	4826      	ldr	r0, [pc, #152]	; (8001664 <main+0x31c>)
 80015ca:	f003 f9db 	bl	8004984 <HAL_ADCEx_Calibration_Start>
		      HAL_Delay(100);
 80015ce:	2064      	movs	r0, #100	; 0x64
 80015d0:	f001 ff76 	bl	80034c0 <HAL_Delay>
		      HAL_ADC_Start(&hadc1);
 80015d4:	4823      	ldr	r0, [pc, #140]	; (8001664 <main+0x31c>)
 80015d6:	f002 faf5 	bl	8003bc4 <HAL_ADC_Start>
		      HAL_ADC_PollForConversion(&hadc1, 10);
 80015da:	210a      	movs	r1, #10
 80015dc:	4821      	ldr	r0, [pc, #132]	; (8001664 <main+0x31c>)
 80015de:	f002 fb87 	bl	8003cf0 <HAL_ADC_PollForConversion>
		      rx[i-1] = HAL_ADC_GetValue(&hadc1);
 80015e2:	4820      	ldr	r0, [pc, #128]	; (8001664 <main+0x31c>)
 80015e4:	f002 fc13 	bl	8003e0e <HAL_ADC_GetValue>
 80015e8:	4602      	mov	r2, r0
 80015ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80015ee:	1e5c      	subs	r4, r3, #1
 80015f0:	4610      	mov	r0, r2
 80015f2:	f7fe ff87 	bl	8000504 <__aeabi_ui2d>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4827      	ldr	r0, [pc, #156]	; (8001698 <main+0x350>)
 80015fc:	00e1      	lsls	r1, r4, #3
 80015fe:	4401      	add	r1, r0
 8001600:	e9c1 2300 	strd	r2, r3, [r1]
		      HAL_ADC_Stop(&hadc1);
 8001604:	4817      	ldr	r0, [pc, #92]	; (8001664 <main+0x31c>)
 8001606:	f002 fb40 	bl	8003c8a <HAL_ADC_Stop>
		  for(int i = 1; i<8; i++){
 800160a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800160e:	3301      	adds	r3, #1
 8001610:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001614:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001618:	2b07      	cmp	r3, #7
 800161a:	ddb1      	ble.n	8001580 <main+0x238>

		  }

		  ind = 6;
 800161c:	4b1f      	ldr	r3, [pc, #124]	; (800169c <main+0x354>)
 800161e:	2206      	movs	r2, #6
 8001620:	601a      	str	r2, [r3, #0]
		  for(int i = 7; i >= 0; i--){
 8001622:	2307      	movs	r3, #7
 8001624:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001628:	e052      	b.n	80016d0 <main+0x388>
 800162a:	bf00      	nop
 800162c:	f3af 8000 	nop.w
 8001630:	66666666 	.word	0x66666666
 8001634:	400a6666 	.word	0x400a6666
 8001638:	00000000 	.word	0x00000000
 800163c:	40affe00 	.word	0x40affe00
 8001640:	9999999a 	.word	0x9999999a
 8001644:	3fb99999 	.word	0x3fb99999
 8001648:	cccccccd 	.word	0xcccccccd
 800164c:	3ff4cccc 	.word	0x3ff4cccc
 8001650:	66666666 	.word	0x66666666
 8001654:	40026666 	.word	0x40026666
 8001658:	bedad8d0 	.word	0xbedad8d0
 800165c:	3fffe37f 	.word	0x3fffe37f
 8001660:	20000444 	.word	0x20000444
 8001664:	2000037c 	.word	0x2000037c
 8001668:	200002b4 	.word	0x200002b4
 800166c:	20000434 	.word	0x20000434
 8001670:	20000490 	.word	0x20000490
 8001674:	20000008 	.word	0x20000008
 8001678:	0800bf10 	.word	0x0800bf10
 800167c:	0800bf18 	.word	0x0800bf18
 8001680:	20000000 	.word	0x20000000
 8001684:	0800bf1c 	.word	0x0800bf1c
 8001688:	48000400 	.word	0x48000400
 800168c:	200002b8 	.word	0x200002b8
 8001690:	20000044 	.word	0x20000044
 8001694:	20000050 	.word	0x20000050
 8001698:	200002e0 	.word	0x200002e0
 800169c:	200002c0 	.word	0x200002c0
			  if(rx[i]>2048){
 80016a0:	4a23      	ldr	r2, [pc, #140]	; (8001730 <main+0x3e8>)
 80016a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	4413      	add	r3, r2
 80016aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	4b20      	ldr	r3, [pc, #128]	; (8001734 <main+0x3ec>)
 80016b4:	f7ff fa30 	bl	8000b18 <__aeabi_dcmpgt>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <main+0x37e>
				  ind=i;
 80016be:	4a1e      	ldr	r2, [pc, #120]	; (8001738 <main+0x3f0>)
 80016c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016c4:	6013      	str	r3, [r2, #0]
		  for(int i = 7; i >= 0; i--){
 80016c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016ca:	3b01      	subs	r3, #1
 80016cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80016d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	dae3      	bge.n	80016a0 <main+0x358>
			  }
		  }
		  if(ind == 0){
 80016d8:	4b17      	ldr	r3, [pc, #92]	; (8001738 <main+0x3f0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10e      	bne.n	80016fe <main+0x3b6>
			  if(rx[0] < 3600){
 80016e0:	4b13      	ldr	r3, [pc, #76]	; (8001730 <main+0x3e8>)
 80016e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016e6:	a310      	add	r3, pc, #64	; (adr r3, 8001728 <main+0x3e0>)
 80016e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ec:	f7ff f9f6 	bl	8000adc <__aeabi_dcmplt>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d036      	beq.n	8001764 <main+0x41c>
			  	  ind = 1;
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <main+0x3f0>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	e032      	b.n	8001764 <main+0x41c>
		  	  }
		  }
		  else if(ind == 1){
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <main+0x3f0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d11c      	bne.n	8001740 <main+0x3f8>
			  if(rx[1] < 3200){
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <main+0x3e8>)
 8001708:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	4b0a      	ldr	r3, [pc, #40]	; (800173c <main+0x3f4>)
 8001712:	f7ff f9e3 	bl	8000adc <__aeabi_dcmplt>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d023      	beq.n	8001764 <main+0x41c>
			  	  ind = 2;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <main+0x3f0>)
 800171e:	2202      	movs	r2, #2
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	e01f      	b.n	8001764 <main+0x41c>
 8001724:	f3af 8000 	nop.w
 8001728:	00000000 	.word	0x00000000
 800172c:	40ac2000 	.word	0x40ac2000
 8001730:	200002e0 	.word	0x200002e0
 8001734:	40a00000 	.word	0x40a00000
 8001738:	200002c0 	.word	0x200002c0
 800173c:	40a90000 	.word	0x40a90000
		  	  }
		  }
		  else if(ind == 2){
 8001740:	4bbd      	ldr	r3, [pc, #756]	; (8001a38 <main+0x6f0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d10d      	bne.n	8001764 <main+0x41c>
			  if(rx[2] < 2600){
 8001748:	4bbc      	ldr	r3, [pc, #752]	; (8001a3c <main+0x6f4>)
 800174a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800174e:	a3b6      	add	r3, pc, #728	; (adr r3, 8001a28 <main+0x6e0>)
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	f7ff f9c2 	bl	8000adc <__aeabi_dcmplt>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d002      	beq.n	8001764 <main+0x41c>
			  	  ind = 3;
 800175e:	4bb6      	ldr	r3, [pc, #728]	; (8001a38 <main+0x6f0>)
 8001760:	2203      	movs	r2, #3
 8001762:	601a      	str	r2, [r3, #0]
		  	  }
		  }

		  Val = ((Uwe*r7[ind])/(rx[ind]* (3.3 / 4095.0)))-r7[ind];
 8001764:	4bb4      	ldr	r3, [pc, #720]	; (8001a38 <main+0x6f0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4ab5      	ldr	r2, [pc, #724]	; (8001a40 <main+0x6f8>)
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fee9 	bl	8000548 <__aeabi_f2d>
 8001776:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800177a:	f7fe ff3d 	bl	80005f8 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4614      	mov	r4, r2
 8001784:	461d      	mov	r5, r3
 8001786:	4bac      	ldr	r3, [pc, #688]	; (8001a38 <main+0x6f0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4aac      	ldr	r2, [pc, #688]	; (8001a3c <main+0x6f4>)
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	4413      	add	r3, r2
 8001790:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001794:	a3a6      	add	r3, pc, #664	; (adr r3, 8001a30 <main+0x6e8>)
 8001796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179a:	f7fe ff2d 	bl	80005f8 <__aeabi_dmul>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4620      	mov	r0, r4
 80017a4:	4629      	mov	r1, r5
 80017a6:	f7ff f851 	bl	800084c <__aeabi_ddiv>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4614      	mov	r4, r2
 80017b0:	461d      	mov	r5, r3
 80017b2:	4ba1      	ldr	r3, [pc, #644]	; (8001a38 <main+0x6f0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4aa2      	ldr	r2, [pc, #648]	; (8001a40 <main+0x6f8>)
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fec2 	bl	8000548 <__aeabi_f2d>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4620      	mov	r0, r4
 80017ca:	4629      	mov	r1, r5
 80017cc:	f7fe fd5c 	bl	8000288 <__aeabi_dsub>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	499b      	ldr	r1, [pc, #620]	; (8001a44 <main+0x6fc>)
 80017d6:	e9c1 2300 	strd	r2, r3, [r1]
		  double Val0 = ((Uwe*r7[0])/(rx[0]* (3.3 / 4095.0)))-r7[0];
 80017da:	4b99      	ldr	r3, [pc, #612]	; (8001a40 <main+0x6f8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe feb2 	bl	8000548 <__aeabi_f2d>
 80017e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80017e8:	f7fe ff06 	bl	80005f8 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4614      	mov	r4, r2
 80017f2:	461d      	mov	r5, r3
 80017f4:	4b91      	ldr	r3, [pc, #580]	; (8001a3c <main+0x6f4>)
 80017f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017fa:	a38d      	add	r3, pc, #564	; (adr r3, 8001a30 <main+0x6e8>)
 80017fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001800:	f7fe fefa 	bl	80005f8 <__aeabi_dmul>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4620      	mov	r0, r4
 800180a:	4629      	mov	r1, r5
 800180c:	f7ff f81e 	bl	800084c <__aeabi_ddiv>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4614      	mov	r4, r2
 8001816:	461d      	mov	r5, r3
 8001818:	4b89      	ldr	r3, [pc, #548]	; (8001a40 <main+0x6f8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fe93 	bl	8000548 <__aeabi_f2d>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4620      	mov	r0, r4
 8001828:	4629      	mov	r1, r5
 800182a:	f7fe fd2d 	bl	8000288 <__aeabi_dsub>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		  double Val1 = ((Uwe*r7[1])/(rx[1]* (3.3 / 4095.0)))-r7[1];
 8001836:	4b82      	ldr	r3, [pc, #520]	; (8001a40 <main+0x6f8>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fe84 	bl	8000548 <__aeabi_f2d>
 8001840:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001844:	f7fe fed8 	bl	80005f8 <__aeabi_dmul>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4614      	mov	r4, r2
 800184e:	461d      	mov	r5, r3
 8001850:	4b7a      	ldr	r3, [pc, #488]	; (8001a3c <main+0x6f4>)
 8001852:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001856:	a376      	add	r3, pc, #472	; (adr r3, 8001a30 <main+0x6e8>)
 8001858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185c:	f7fe fecc 	bl	80005f8 <__aeabi_dmul>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4620      	mov	r0, r4
 8001866:	4629      	mov	r1, r5
 8001868:	f7fe fff0 	bl	800084c <__aeabi_ddiv>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4614      	mov	r4, r2
 8001872:	461d      	mov	r5, r3
 8001874:	4b72      	ldr	r3, [pc, #456]	; (8001a40 <main+0x6f8>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe65 	bl	8000548 <__aeabi_f2d>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4620      	mov	r0, r4
 8001884:	4629      	mov	r1, r5
 8001886:	f7fe fcff 	bl	8000288 <__aeabi_dsub>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		  double Val2 = ((Uwe*r7[2])/(rx[2]* (3.3 / 4095.0)))-r7[2];
 8001892:	4b6b      	ldr	r3, [pc, #428]	; (8001a40 <main+0x6f8>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fe56 	bl	8000548 <__aeabi_f2d>
 800189c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80018a0:	f7fe feaa 	bl	80005f8 <__aeabi_dmul>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4614      	mov	r4, r2
 80018aa:	461d      	mov	r5, r3
 80018ac:	4b63      	ldr	r3, [pc, #396]	; (8001a3c <main+0x6f4>)
 80018ae:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80018b2:	a35f      	add	r3, pc, #380	; (adr r3, 8001a30 <main+0x6e8>)
 80018b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b8:	f7fe fe9e 	bl	80005f8 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4620      	mov	r0, r4
 80018c2:	4629      	mov	r1, r5
 80018c4:	f7fe ffc2 	bl	800084c <__aeabi_ddiv>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4614      	mov	r4, r2
 80018ce:	461d      	mov	r5, r3
 80018d0:	4b5b      	ldr	r3, [pc, #364]	; (8001a40 <main+0x6f8>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fe37 	bl	8000548 <__aeabi_f2d>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4620      	mov	r0, r4
 80018e0:	4629      	mov	r1, r5
 80018e2:	f7fe fcd1 	bl	8000288 <__aeabi_dsub>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		  double Val3 = ((Uwe*r7[3])/(rx[3]* (3.3 / 4095.0)))-r7[3];
 80018ee:	4b54      	ldr	r3, [pc, #336]	; (8001a40 <main+0x6f8>)
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fe28 	bl	8000548 <__aeabi_f2d>
 80018f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80018fc:	f7fe fe7c 	bl	80005f8 <__aeabi_dmul>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4614      	mov	r4, r2
 8001906:	461d      	mov	r5, r3
 8001908:	4b4c      	ldr	r3, [pc, #304]	; (8001a3c <main+0x6f4>)
 800190a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800190e:	a348      	add	r3, pc, #288	; (adr r3, 8001a30 <main+0x6e8>)
 8001910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001914:	f7fe fe70 	bl	80005f8 <__aeabi_dmul>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4620      	mov	r0, r4
 800191e:	4629      	mov	r1, r5
 8001920:	f7fe ff94 	bl	800084c <__aeabi_ddiv>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4614      	mov	r4, r2
 800192a:	461d      	mov	r5, r3
 800192c:	4b44      	ldr	r3, [pc, #272]	; (8001a40 <main+0x6f8>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fe09 	bl	8000548 <__aeabi_f2d>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4620      	mov	r0, r4
 800193c:	4629      	mov	r1, r5
 800193e:	f7fe fca3 	bl	8000288 <__aeabi_dsub>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		  double Val4 = ((Uwe*r7[4])/(rx[4]* (3.3 / 4095.0)))-r7[4];
 800194a:	4b3d      	ldr	r3, [pc, #244]	; (8001a40 <main+0x6f8>)
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fdfa 	bl	8000548 <__aeabi_f2d>
 8001954:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001958:	f7fe fe4e 	bl	80005f8 <__aeabi_dmul>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4614      	mov	r4, r2
 8001962:	461d      	mov	r5, r3
 8001964:	4b35      	ldr	r3, [pc, #212]	; (8001a3c <main+0x6f4>)
 8001966:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800196a:	a331      	add	r3, pc, #196	; (adr r3, 8001a30 <main+0x6e8>)
 800196c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001970:	f7fe fe42 	bl	80005f8 <__aeabi_dmul>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4620      	mov	r0, r4
 800197a:	4629      	mov	r1, r5
 800197c:	f7fe ff66 	bl	800084c <__aeabi_ddiv>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4614      	mov	r4, r2
 8001986:	461d      	mov	r5, r3
 8001988:	4b2d      	ldr	r3, [pc, #180]	; (8001a40 <main+0x6f8>)
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fddb 	bl	8000548 <__aeabi_f2d>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4620      	mov	r0, r4
 8001998:	4629      	mov	r1, r5
 800199a:	f7fe fc75 	bl	8000288 <__aeabi_dsub>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		  double Val5 = ((Uwe*r7[5])/(rx[5]* (3.3 / 4095.0)))-r7[5];
 80019a6:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <main+0x6f8>)
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fdcc 	bl	8000548 <__aeabi_f2d>
 80019b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80019b4:	f7fe fe20 	bl	80005f8 <__aeabi_dmul>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4614      	mov	r4, r2
 80019be:	461d      	mov	r5, r3
 80019c0:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <main+0x6f4>)
 80019c2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80019c6:	a31a      	add	r3, pc, #104	; (adr r3, 8001a30 <main+0x6e8>)
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	f7fe fe14 	bl	80005f8 <__aeabi_dmul>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4620      	mov	r0, r4
 80019d6:	4629      	mov	r1, r5
 80019d8:	f7fe ff38 	bl	800084c <__aeabi_ddiv>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4614      	mov	r4, r2
 80019e2:	461d      	mov	r5, r3
 80019e4:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <main+0x6f8>)
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fdad 	bl	8000548 <__aeabi_f2d>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4620      	mov	r0, r4
 80019f4:	4629      	mov	r1, r5
 80019f6:	f7fe fc47 	bl	8000288 <__aeabi_dsub>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		  double Val6 = ((Uwe*r7[6])/(rx[6]* (3.3 / 4095.0)))-r7[6];
 8001a02:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <main+0x6f8>)
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fd9e 	bl	8000548 <__aeabi_f2d>
 8001a0c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001a10:	f7fe fdf2 	bl	80005f8 <__aeabi_dmul>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4614      	mov	r4, r2
 8001a1a:	461d      	mov	r5, r3
 8001a1c:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <main+0x6f4>)
 8001a1e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001a22:	e011      	b.n	8001a48 <main+0x700>
 8001a24:	f3af 8000 	nop.w
 8001a28:	00000000 	.word	0x00000000
 8001a2c:	40a45000 	.word	0x40a45000
 8001a30:	e734d9b4 	.word	0xe734d9b4
 8001a34:	3f4a680c 	.word	0x3f4a680c
 8001a38:	200002c0 	.word	0x200002c0
 8001a3c:	200002e0 	.word	0x200002e0
 8001a40:	20000028 	.word	0x20000028
 8001a44:	200003e0 	.word	0x200003e0
 8001a48:	a3b5      	add	r3, pc, #724	; (adr r3, 8001d20 <main+0x9d8>)
 8001a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4e:	f7fe fdd3 	bl	80005f8 <__aeabi_dmul>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4620      	mov	r0, r4
 8001a58:	4629      	mov	r1, r5
 8001a5a:	f7fe fef7 	bl	800084c <__aeabi_ddiv>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4614      	mov	r4, r2
 8001a64:	461d      	mov	r5, r3
 8001a66:	4ba2      	ldr	r3, [pc, #648]	; (8001cf0 <main+0x9a8>)
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7fe fd6c 	bl	8000548 <__aeabi_f2d>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4620      	mov	r0, r4
 8001a76:	4629      	mov	r1, r5
 8001a78:	f7fe fc06 	bl	8000288 <__aeabi_dsub>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	e9c7 2308 	strd	r2, r3, [r7, #32]

		  if(Val >2000000 || Val < 1){
 8001a84:	4b9b      	ldr	r3, [pc, #620]	; (8001cf4 <main+0x9ac>)
 8001a86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a8a:	a393      	add	r3, pc, #588	; (adr r3, 8001cd8 <main+0x990>)
 8001a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a90:	f7ff f842 	bl	8000b18 <__aeabi_dcmpgt>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10a      	bne.n	8001ab0 <main+0x768>
 8001a9a:	4b96      	ldr	r3, [pc, #600]	; (8001cf4 <main+0x9ac>)
 8001a9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	4b94      	ldr	r3, [pc, #592]	; (8001cf8 <main+0x9b0>)
 8001aa6:	f7ff f819 	bl	8000adc <__aeabi_dcmplt>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d01d      	beq.n	8001aec <main+0x7a4>
			  ST7735_WriteString(10, 50, " -----      ", Font_16x26, WHITE, BLACK);
 8001ab0:	4b92      	ldr	r3, [pc, #584]	; (8001cfc <main+0x9b4>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	9202      	str	r2, [sp, #8]
 8001ab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aba:	9201      	str	r2, [sp, #4]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	9200      	str	r2, [sp, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a8f      	ldr	r2, [pc, #572]	; (8001d00 <main+0x9b8>)
 8001ac4:	2132      	movs	r1, #50	; 0x32
 8001ac6:	200a      	movs	r0, #10
 8001ac8:	f7ff fb60 	bl	800118c <ST7735_WriteString>
			  ST7735_WriteString(35, 105, "Ohm  ", Font_16x26, WHITE, BLACK);
 8001acc:	4b8b      	ldr	r3, [pc, #556]	; (8001cfc <main+0x9b4>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	9202      	str	r2, [sp, #8]
 8001ad2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ad6:	9201      	str	r2, [sp, #4]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	9200      	str	r2, [sp, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a89      	ldr	r2, [pc, #548]	; (8001d04 <main+0x9bc>)
 8001ae0:	2169      	movs	r1, #105	; 0x69
 8001ae2:	2023      	movs	r0, #35	; 0x23
 8001ae4:	f7ff fb52 	bl	800118c <ST7735_WriteString>
 8001ae8:	f000 be5e 	b.w	80027a8 <main+0x1460>
		  }

		  else if (Val < 1000){
 8001aec:	4b81      	ldr	r3, [pc, #516]	; (8001cf4 <main+0x9ac>)
 8001aee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	4b84      	ldr	r3, [pc, #528]	; (8001d08 <main+0x9c0>)
 8001af8:	f7fe fff0 	bl	8000adc <__aeabi_dcmplt>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d051      	beq.n	8001ba6 <main+0x85e>
			  int v1,v2;
			  v1 = (int)Val;
 8001b02:	4b7c      	ldr	r3, [pc, #496]	; (8001cf4 <main+0x9ac>)
 8001b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f7ff f824 	bl	8000b58 <__aeabi_d2iz>
 8001b10:	4603      	mov	r3, r0
 8001b12:	607b      	str	r3, [r7, #4]
			  v2 = (Val - (int)Val)*10;
 8001b14:	4b77      	ldr	r3, [pc, #476]	; (8001cf4 <main+0x9ac>)
 8001b16:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b1a:	4b76      	ldr	r3, [pc, #472]	; (8001cf4 <main+0x9ac>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f7ff f818 	bl	8000b58 <__aeabi_d2iz>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fcfa 	bl	8000524 <__aeabi_i2d>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4620      	mov	r0, r4
 8001b36:	4629      	mov	r1, r5
 8001b38:	f7fe fba6 	bl	8000288 <__aeabi_dsub>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	4b70      	ldr	r3, [pc, #448]	; (8001d0c <main+0x9c4>)
 8001b4a:	f7fe fd55 	bl	80005f8 <__aeabi_dmul>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4610      	mov	r0, r2
 8001b54:	4619      	mov	r1, r3
 8001b56:	f7fe ffff 	bl	8000b58 <__aeabi_d2iz>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	603b      	str	r3, [r7, #0]

			  sprintf(result, "%d.%d     ", v1, v2);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	496b      	ldr	r1, [pc, #428]	; (8001d10 <main+0x9c8>)
 8001b64:	486b      	ldr	r0, [pc, #428]	; (8001d14 <main+0x9cc>)
 8001b66:	f006 fa37 	bl	8007fd8 <siprintf>
			  ST7735_WriteString(25, 50, result, Font_16x26, WHITE, BLACK);
 8001b6a:	4b64      	ldr	r3, [pc, #400]	; (8001cfc <main+0x9b4>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	9202      	str	r2, [sp, #8]
 8001b70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b74:	9201      	str	r2, [sp, #4]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	9200      	str	r2, [sp, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a65      	ldr	r2, [pc, #404]	; (8001d14 <main+0x9cc>)
 8001b7e:	2132      	movs	r1, #50	; 0x32
 8001b80:	2019      	movs	r0, #25
 8001b82:	f7ff fb03 	bl	800118c <ST7735_WriteString>
			  ST7735_WriteString(35, 105, "Ohm  ", Font_16x26, WHITE, BLACK);
 8001b86:	4b5d      	ldr	r3, [pc, #372]	; (8001cfc <main+0x9b4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	9202      	str	r2, [sp, #8]
 8001b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b90:	9201      	str	r2, [sp, #4]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	9200      	str	r2, [sp, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a5a      	ldr	r2, [pc, #360]	; (8001d04 <main+0x9bc>)
 8001b9a:	2169      	movs	r1, #105	; 0x69
 8001b9c:	2023      	movs	r0, #35	; 0x23
 8001b9e:	f7ff faf5 	bl	800118c <ST7735_WriteString>
 8001ba2:	f7ff bbf1 	b.w	8001388 <main+0x40>
		  }
		  else if (Val < 100000){
 8001ba6:	4b53      	ldr	r3, [pc, #332]	; (8001cf4 <main+0x9ac>)
 8001ba8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bac:	a34c      	add	r3, pc, #304	; (adr r3, 8001ce0 <main+0x998>)
 8001bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb2:	f7fe ff93 	bl	8000adc <__aeabi_dcmplt>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d02a      	beq.n	8001c12 <main+0x8ca>

			  sprintf(result, "%d    ", (int)Val);
 8001bbc:	4b4d      	ldr	r3, [pc, #308]	; (8001cf4 <main+0x9ac>)
 8001bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f7fe ffc7 	bl	8000b58 <__aeabi_d2iz>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4952      	ldr	r1, [pc, #328]	; (8001d18 <main+0x9d0>)
 8001bd0:	4850      	ldr	r0, [pc, #320]	; (8001d14 <main+0x9cc>)
 8001bd2:	f006 fa01 	bl	8007fd8 <siprintf>
			  ST7735_WriteString(25, 50, result, Font_16x26, WHITE, BLACK);
 8001bd6:	4b49      	ldr	r3, [pc, #292]	; (8001cfc <main+0x9b4>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	9202      	str	r2, [sp, #8]
 8001bdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001be0:	9201      	str	r2, [sp, #4]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	9200      	str	r2, [sp, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a4a      	ldr	r2, [pc, #296]	; (8001d14 <main+0x9cc>)
 8001bea:	2132      	movs	r1, #50	; 0x32
 8001bec:	2019      	movs	r0, #25
 8001bee:	f7ff facd 	bl	800118c <ST7735_WriteString>
			  ST7735_WriteString(35, 105, "Ohm  ", Font_16x26, WHITE, BLACK);
 8001bf2:	4b42      	ldr	r3, [pc, #264]	; (8001cfc <main+0x9b4>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	9202      	str	r2, [sp, #8]
 8001bf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bfc:	9201      	str	r2, [sp, #4]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	9200      	str	r2, [sp, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a3f      	ldr	r2, [pc, #252]	; (8001d04 <main+0x9bc>)
 8001c06:	2169      	movs	r1, #105	; 0x69
 8001c08:	2023      	movs	r0, #35	; 0x23
 8001c0a:	f7ff fabf 	bl	800118c <ST7735_WriteString>
 8001c0e:	f7ff bbbb 	b.w	8001388 <main+0x40>
		  }

		  else if (Val<1000000){
 8001c12:	4b38      	ldr	r3, [pc, #224]	; (8001cf4 <main+0x9ac>)
 8001c14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c18:	a333      	add	r3, pc, #204	; (adr r3, 8001ce8 <main+0x9a0>)
 8001c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1e:	f7fe ff5d 	bl	8000adc <__aeabi_dcmplt>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d07f      	beq.n	8001d28 <main+0x9e0>
			  Val /=1000;
 8001c28:	4b32      	ldr	r3, [pc, #200]	; (8001cf4 <main+0x9ac>)
 8001c2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	4b35      	ldr	r3, [pc, #212]	; (8001d08 <main+0x9c0>)
 8001c34:	f7fe fe0a 	bl	800084c <__aeabi_ddiv>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	492d      	ldr	r1, [pc, #180]	; (8001cf4 <main+0x9ac>)
 8001c3e:	e9c1 2300 	strd	r2, r3, [r1]
			  int v1,v2;
			  v1 = (int)Val;
 8001c42:	4b2c      	ldr	r3, [pc, #176]	; (8001cf4 <main+0x9ac>)
 8001c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7fe ff84 	bl	8000b58 <__aeabi_d2iz>
 8001c50:	4603      	mov	r3, r0
 8001c52:	60fb      	str	r3, [r7, #12]
			  v2 = (Val - v1)*10;
 8001c54:	4b27      	ldr	r3, [pc, #156]	; (8001cf4 <main+0x9ac>)
 8001c56:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f7fe fc62 	bl	8000524 <__aeabi_i2d>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4620      	mov	r0, r4
 8001c66:	4629      	mov	r1, r5
 8001c68:	f7fe fb0e 	bl	8000288 <__aeabi_dsub>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <main+0x9c4>)
 8001c7a:	f7fe fcbd 	bl	80005f8 <__aeabi_dmul>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4610      	mov	r0, r2
 8001c84:	4619      	mov	r1, r3
 8001c86:	f7fe ff67 	bl	8000b58 <__aeabi_d2iz>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	60bb      	str	r3, [r7, #8]

			  sprintf(result, "%d.%d     ", v1, v2);
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	491f      	ldr	r1, [pc, #124]	; (8001d10 <main+0x9c8>)
 8001c94:	481f      	ldr	r0, [pc, #124]	; (8001d14 <main+0x9cc>)
 8001c96:	f006 f99f 	bl	8007fd8 <siprintf>
			  ST7735_WriteString(25, 50, result, Font_16x26, WHITE, BLACK);
 8001c9a:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <main+0x9b4>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	9202      	str	r2, [sp, #8]
 8001ca0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ca4:	9201      	str	r2, [sp, #4]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	9200      	str	r2, [sp, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a19      	ldr	r2, [pc, #100]	; (8001d14 <main+0x9cc>)
 8001cae:	2132      	movs	r1, #50	; 0x32
 8001cb0:	2019      	movs	r0, #25
 8001cb2:	f7ff fa6b 	bl	800118c <ST7735_WriteString>
			  ST7735_WriteString(35, 105, "KOhm  ", Font_16x26, WHITE, BLACK);
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <main+0x9b4>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	9202      	str	r2, [sp, #8]
 8001cbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cc0:	9201      	str	r2, [sp, #4]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	9200      	str	r2, [sp, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a14      	ldr	r2, [pc, #80]	; (8001d1c <main+0x9d4>)
 8001cca:	2169      	movs	r1, #105	; 0x69
 8001ccc:	2023      	movs	r0, #35	; 0x23
 8001cce:	f7ff fa5d 	bl	800118c <ST7735_WriteString>
 8001cd2:	f7ff bb59 	b.w	8001388 <main+0x40>
 8001cd6:	bf00      	nop
 8001cd8:	00000000 	.word	0x00000000
 8001cdc:	413e8480 	.word	0x413e8480
 8001ce0:	00000000 	.word	0x00000000
 8001ce4:	40f86a00 	.word	0x40f86a00
 8001ce8:	00000000 	.word	0x00000000
 8001cec:	412e8480 	.word	0x412e8480
 8001cf0:	20000028 	.word	0x20000028
 8001cf4:	200003e0 	.word	0x200003e0
 8001cf8:	3ff00000 	.word	0x3ff00000
 8001cfc:	20000008 	.word	0x20000008
 8001d00:	0800bf28 	.word	0x0800bf28
 8001d04:	0800bf38 	.word	0x0800bf38
 8001d08:	408f4000 	.word	0x408f4000
 8001d0c:	40240000 	.word	0x40240000
 8001d10:	0800bf40 	.word	0x0800bf40
 8001d14:	20000438 	.word	0x20000438
 8001d18:	0800bf4c 	.word	0x0800bf4c
 8001d1c:	0800bf54 	.word	0x0800bf54
 8001d20:	e734d9b4 	.word	0xe734d9b4
 8001d24:	3f4a680c 	.word	0x3f4a680c
		  }
		  else {

			  Val /=1000000;
 8001d28:	4b99      	ldr	r3, [pc, #612]	; (8001f90 <main+0xc48>)
 8001d2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d2e:	a394      	add	r3, pc, #592	; (adr r3, 8001f80 <main+0xc38>)
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	f7fe fd8a 	bl	800084c <__aeabi_ddiv>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4994      	ldr	r1, [pc, #592]	; (8001f90 <main+0xc48>)
 8001d3e:	e9c1 2300 	strd	r2, r3, [r1]
			  int v1,v2,v3,v4;
			  v1 = (int)Val;
 8001d42:	4b93      	ldr	r3, [pc, #588]	; (8001f90 <main+0xc48>)
 8001d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f7fe ff04 	bl	8000b58 <__aeabi_d2iz>
 8001d50:	4603      	mov	r3, r0
 8001d52:	61fb      	str	r3, [r7, #28]
			  v2 = (Val - v1)*10;
 8001d54:	4b8e      	ldr	r3, [pc, #568]	; (8001f90 <main+0xc48>)
 8001d56:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001d5a:	69f8      	ldr	r0, [r7, #28]
 8001d5c:	f7fe fbe2 	bl	8000524 <__aeabi_i2d>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4620      	mov	r0, r4
 8001d66:	4629      	mov	r1, r5
 8001d68:	f7fe fa8e 	bl	8000288 <__aeabi_dsub>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	4b86      	ldr	r3, [pc, #536]	; (8001f94 <main+0xc4c>)
 8001d7a:	f7fe fc3d 	bl	80005f8 <__aeabi_dmul>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4610      	mov	r0, r2
 8001d84:	4619      	mov	r1, r3
 8001d86:	f7fe fee7 	bl	8000b58 <__aeabi_d2iz>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	61bb      	str	r3, [r7, #24]
			  v3 = (Val - v1)*100-v2;
 8001d8e:	4b80      	ldr	r3, [pc, #512]	; (8001f90 <main+0xc48>)
 8001d90:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001d94:	69f8      	ldr	r0, [r7, #28]
 8001d96:	f7fe fbc5 	bl	8000524 <__aeabi_i2d>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4620      	mov	r0, r4
 8001da0:	4629      	mov	r1, r5
 8001da2:	f7fe fa71 	bl	8000288 <__aeabi_dsub>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4610      	mov	r0, r2
 8001dac:	4619      	mov	r1, r3
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	4b79      	ldr	r3, [pc, #484]	; (8001f98 <main+0xc50>)
 8001db4:	f7fe fc20 	bl	80005f8 <__aeabi_dmul>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4614      	mov	r4, r2
 8001dbe:	461d      	mov	r5, r3
 8001dc0:	69b8      	ldr	r0, [r7, #24]
 8001dc2:	f7fe fbaf 	bl	8000524 <__aeabi_i2d>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4620      	mov	r0, r4
 8001dcc:	4629      	mov	r1, r5
 8001dce:	f7fe fa5b 	bl	8000288 <__aeabi_dsub>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f7fe febd 	bl	8000b58 <__aeabi_d2iz>
 8001dde:	4603      	mov	r3, r0
 8001de0:	617b      	str	r3, [r7, #20]
			  v4 = (Val - v1)*1000-v3;
 8001de2:	4b6b      	ldr	r3, [pc, #428]	; (8001f90 <main+0xc48>)
 8001de4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001de8:	69f8      	ldr	r0, [r7, #28]
 8001dea:	f7fe fb9b 	bl	8000524 <__aeabi_i2d>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4620      	mov	r0, r4
 8001df4:	4629      	mov	r1, r5
 8001df6:	f7fe fa47 	bl	8000288 <__aeabi_dsub>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4610      	mov	r0, r2
 8001e00:	4619      	mov	r1, r3
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	4b65      	ldr	r3, [pc, #404]	; (8001f9c <main+0xc54>)
 8001e08:	f7fe fbf6 	bl	80005f8 <__aeabi_dmul>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4614      	mov	r4, r2
 8001e12:	461d      	mov	r5, r3
 8001e14:	6978      	ldr	r0, [r7, #20]
 8001e16:	f7fe fb85 	bl	8000524 <__aeabi_i2d>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4620      	mov	r0, r4
 8001e20:	4629      	mov	r1, r5
 8001e22:	f7fe fa31 	bl	8000288 <__aeabi_dsub>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f7fe fe93 	bl	8000b58 <__aeabi_d2iz>
 8001e32:	4603      	mov	r3, r0
 8001e34:	613b      	str	r3, [r7, #16]
			  sprintf(result, "%d.%d%d%d     ", v1, v2,v3,v4);
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	69fa      	ldr	r2, [r7, #28]
 8001e42:	4957      	ldr	r1, [pc, #348]	; (8001fa0 <main+0xc58>)
 8001e44:	4857      	ldr	r0, [pc, #348]	; (8001fa4 <main+0xc5c>)
 8001e46:	f006 f8c7 	bl	8007fd8 <siprintf>
			  ST7735_WriteString(25, 50, result, Font_16x26, WHITE, BLACK);
 8001e4a:	4b57      	ldr	r3, [pc, #348]	; (8001fa8 <main+0xc60>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	9202      	str	r2, [sp, #8]
 8001e50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e54:	9201      	str	r2, [sp, #4]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	9200      	str	r2, [sp, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a51      	ldr	r2, [pc, #324]	; (8001fa4 <main+0xc5c>)
 8001e5e:	2132      	movs	r1, #50	; 0x32
 8001e60:	2019      	movs	r0, #25
 8001e62:	f7ff f993 	bl	800118c <ST7735_WriteString>
			  ST7735_WriteString(35, 105, "MOhm  ", Font_16x26, WHITE, BLACK);
 8001e66:	4b50      	ldr	r3, [pc, #320]	; (8001fa8 <main+0xc60>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	9202      	str	r2, [sp, #8]
 8001e6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e70:	9201      	str	r2, [sp, #4]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	9200      	str	r2, [sp, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a4c      	ldr	r2, [pc, #304]	; (8001fac <main+0xc64>)
 8001e7a:	2169      	movs	r1, #105	; 0x69
 8001e7c:	2023      	movs	r0, #35	; 0x23
 8001e7e:	f7ff f985 	bl	800118c <ST7735_WriteString>
 8001e82:	f7ff ba81 	b.w	8001388 <main+0x40>

		  }


	  }
	  else if(Flaga == 3){
 8001e86:	4b4a      	ldr	r3, [pc, #296]	; (8001fb0 <main+0xc68>)
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	f040 8388 	bne.w	80025a0 <main+0x1258>
		  Vref();
 8001e90:	f000 fcb8 	bl	8002804 <Vref>
		  double c63=ref*2*0.632;
 8001e94:	4b47      	ldr	r3, [pc, #284]	; (8001fb4 <main+0xc6c>)
 8001e96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	f7fe f9f5 	bl	800028c <__adddf3>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	a337      	add	r3, pc, #220	; (adr r3, 8001f88 <main+0xc40>)
 8001eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb0:	f7fe fba2 	bl	80005f8 <__aeabi_dmul>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		  ST7735_WriteString(30, 10, "POJEMNOSC", Font_7x10, WHITE, BLACK);
 8001ebc:	4b3e      	ldr	r3, [pc, #248]	; (8001fb8 <main+0xc70>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	9202      	str	r2, [sp, #8]
 8001ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ec6:	9201      	str	r2, [sp, #4]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	9200      	str	r2, [sp, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a3b      	ldr	r2, [pc, #236]	; (8001fbc <main+0xc74>)
 8001ed0:	210a      	movs	r1, #10
 8001ed2:	201e      	movs	r0, #30
 8001ed4:	f7ff f95a 	bl	800118c <ST7735_WriteString>

		  set_gpio(GPIOA, Cout_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL );
 8001ed8:	2300      	movs	r3, #0
 8001eda:	2201      	movs	r2, #1
 8001edc:	2108      	movs	r1, #8
 8001ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee2:	f000 ffef 	bl	8002ec4 <set_gpio>
		  set_gpio(GPIOA, Ccharge_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL );
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	2201      	movs	r2, #1
 8001eea:	2140      	movs	r1, #64	; 0x40
 8001eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef0:	f000 ffe8 	bl	8002ec4 <set_gpio>
		  set_gpio(GPIOA, Cdischarge_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL );
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	2110      	movs	r1, #16
 8001efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001efe:	f000 ffe1 	bl	8002ec4 <set_gpio>
		  set_gpio(GPIOA, Cread_Pin, GPIO_MODE_ANALOG_ADC_CONTROL, GPIO_NOPULL );
 8001f02:	2300      	movs	r3, #0
 8001f04:	220b      	movs	r2, #11
 8001f06:	2120      	movs	r1, #32
 8001f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f0c:	f000 ffda 	bl	8002ec4 <set_gpio>

		  HAL_GPIO_WritePin(GPIOA, Cdischarge_Pin, 0);
 8001f10:	2200      	movs	r2, #0
 8001f12:	2110      	movs	r1, #16
 8001f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f18:	f002 fff8 	bl	8004f0c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, Cout_Pin, 0);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2108      	movs	r1, #8
 8001f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f24:	f002 fff2 	bl	8004f0c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, Ccharge_Pin, 0);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2140      	movs	r1, #64	; 0x40
 8001f2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f30:	f002 ffec 	bl	8004f0c <HAL_GPIO_WritePin>

		  ADC_Select_Cread();
 8001f34:	f000 fd60 	bl	80029f8 <ADC_Select_Cread>

		  uint16_t tmp = 4000;
 8001f38:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001f3c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
		  HAL_ADC_Start(&hadc1);
 8001f40:	481f      	ldr	r0, [pc, #124]	; (8001fc0 <main+0xc78>)
 8001f42:	f001 fe3f 	bl	8003bc4 <HAL_ADC_Start>
		  while(tmp > 20){		//rozładowanie kondensatora
 8001f46:	e009      	b.n	8001f5c <main+0xc14>
			  HAL_ADC_PollForConversion(&hadc1, 10);
 8001f48:	210a      	movs	r1, #10
 8001f4a:	481d      	ldr	r0, [pc, #116]	; (8001fc0 <main+0xc78>)
 8001f4c:	f001 fed0 	bl	8003cf0 <HAL_ADC_PollForConversion>
			  tmp = HAL_ADC_GetValue(&hadc1);
 8001f50:	481b      	ldr	r0, [pc, #108]	; (8001fc0 <main+0xc78>)
 8001f52:	f001 ff5c 	bl	8003e0e <HAL_ADC_GetValue>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
		  while(tmp > 20){		//rozładowanie kondensatora
 8001f5c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8001f60:	2b14      	cmp	r3, #20
 8001f62:	d8f1      	bhi.n	8001f48 <main+0xc00>
		  }

		  HAL_GPIO_WritePin(GPIOA, Ccharge_Pin, 1);
 8001f64:	2201      	movs	r2, #1
 8001f66:	2140      	movs	r1, #64	; 0x40
 8001f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f6c:	f002 ffce 	bl	8004f0c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COUNTER(&htim2,0);	//zerowanie timera
 8001f70:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <main+0xc7c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2200      	movs	r2, #0
 8001f76:	625a      	str	r2, [r3, #36]	; 0x24

		  while(tmp < c63){
 8001f78:	e030      	b.n	8001fdc <main+0xc94>
 8001f7a:	bf00      	nop
 8001f7c:	f3af 8000 	nop.w
 8001f80:	00000000 	.word	0x00000000
 8001f84:	412e8480 	.word	0x412e8480
 8001f88:	10624dd3 	.word	0x10624dd3
 8001f8c:	3fe43958 	.word	0x3fe43958
 8001f90:	200003e0 	.word	0x200003e0
 8001f94:	40240000 	.word	0x40240000
 8001f98:	40590000 	.word	0x40590000
 8001f9c:	408f4000 	.word	0x408f4000
 8001fa0:	0800bf5c 	.word	0x0800bf5c
 8001fa4:	20000438 	.word	0x20000438
 8001fa8:	20000008 	.word	0x20000008
 8001fac:	0800bf6c 	.word	0x0800bf6c
 8001fb0:	20000490 	.word	0x20000490
 8001fb4:	200002b8 	.word	0x200002b8
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	0800bf74 	.word	0x0800bf74
 8001fc0:	2000037c 	.word	0x2000037c
 8001fc4:	20000444 	.word	0x20000444
			  HAL_ADC_PollForConversion(&hadc1, 10);
 8001fc8:	210a      	movs	r1, #10
 8001fca:	48bd      	ldr	r0, [pc, #756]	; (80022c0 <main+0xf78>)
 8001fcc:	f001 fe90 	bl	8003cf0 <HAL_ADC_PollForConversion>
			  tmp = HAL_ADC_GetValue(&hadc1);
 8001fd0:	48bb      	ldr	r0, [pc, #748]	; (80022c0 <main+0xf78>)
 8001fd2:	f001 ff1c 	bl	8003e0e <HAL_ADC_GetValue>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
		  while(tmp < c63){
 8001fdc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fa9f 	bl	8000524 <__aeabi_i2d>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001fee:	f7fe fd93 	bl	8000b18 <__aeabi_dcmpgt>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1e7      	bne.n	8001fc8 <main+0xc80>
		  }

		  unsigned long elapsedTime = __HAL_TIM_GET_COUNTER(&htim2);
 8001ff8:	4bb2      	ldr	r3, [pc, #712]	; (80022c4 <main+0xf7c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		  HAL_ADC_Stop(&hadc1);
 8002002:	48af      	ldr	r0, [pc, #700]	; (80022c0 <main+0xf78>)
 8002004:	f001 fe41 	bl	8003c8a <HAL_ADC_Stop>

		  Val = ((float)elapsedTime / (float)CR);
 8002008:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800200c:	ee07 3a90 	vmov	s15, r3
 8002010:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8002014:	4bac      	ldr	r3, [pc, #688]	; (80022c8 <main+0xf80>)
 8002016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201a:	4610      	mov	r0, r2
 800201c:	4619      	mov	r1, r3
 800201e:	f7fe fde3 	bl	8000be8 <__aeabi_d2f>
 8002022:	ee07 0a10 	vmov	s14, r0
 8002026:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800202a:	ee17 0a90 	vmov	r0, s15
 800202e:	f7fe fa8b 	bl	8000548 <__aeabi_f2d>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	49a5      	ldr	r1, [pc, #660]	; (80022cc <main+0xf84>)
 8002038:	e9c1 2300 	strd	r2, r3, [r1]

		  if(Val<1){	//jeśli wartość jest poniżej 1uF
 800203c:	4ba3      	ldr	r3, [pc, #652]	; (80022cc <main+0xf84>)
 800203e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	4ba2      	ldr	r3, [pc, #648]	; (80022d0 <main+0xf88>)
 8002048:	f7fe fd48 	bl	8000adc <__aeabi_dcmplt>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 822f 	beq.w	80024b2 <main+0x116a>

			  Val *= 1000;	//zamiana na nF
 8002054:	4b9d      	ldr	r3, [pc, #628]	; (80022cc <main+0xf84>)
 8002056:	e9d3 0100 	ldrd	r0, r1, [r3]
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	4b9d      	ldr	r3, [pc, #628]	; (80022d4 <main+0xf8c>)
 8002060:	f7fe faca 	bl	80005f8 <__aeabi_dmul>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4998      	ldr	r1, [pc, #608]	; (80022cc <main+0xf84>)
 800206a:	e9c1 2300 	strd	r2, r3, [r1]

			  if(Val <90){  //male wartości poniżęj 90nF
 800206e:	4b97      	ldr	r3, [pc, #604]	; (80022cc <main+0xf84>)
 8002070:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	4b97      	ldr	r3, [pc, #604]	; (80022d8 <main+0xf90>)
 800207a:	f7fe fd2f 	bl	8000adc <__aeabi_dcmplt>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 8197 	beq.w	80023b4 <main+0x106c>

			  	set_gpio(GPIOA, Ccharge_Pin, GPIO_MODE_INPUT, GPIO_NOPULL );
 8002086:	2300      	movs	r3, #0
 8002088:	2200      	movs	r2, #0
 800208a:	2140      	movs	r1, #64	; 0x40
 800208c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002090:	f000 ff18 	bl	8002ec4 <set_gpio>
			  	set_gpio(GPIOA, Cdischarge_Pin, GPIO_MODE_INPUT, GPIO_NOPULL );
 8002094:	2300      	movs	r3, #0
 8002096:	2200      	movs	r2, #0
 8002098:	2110      	movs	r1, #16
 800209a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800209e:	f000 ff11 	bl	8002ec4 <set_gpio>

			  	set_gpio(GPIOA, Cread_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL );
 80020a2:	2300      	movs	r3, #0
 80020a4:	2201      	movs	r2, #1
 80020a6:	2120      	movs	r1, #32
 80020a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ac:	f000 ff0a 	bl	8002ec4 <set_gpio>
			  	HAL_Delay(1);
 80020b0:	2001      	movs	r0, #1
 80020b2:	f001 fa05 	bl	80034c0 <HAL_Delay>
			  	set_gpio(GPIOA, Cout_Pin, GPIO_MODE_INPUT, GPIO_PULLUP );
 80020b6:	2301      	movs	r3, #1
 80020b8:	2200      	movs	r2, #0
 80020ba:	2108      	movs	r1, #8
 80020bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c0:	f000 ff00 	bl	8002ec4 <set_gpio>
			  	unsigned long t;
			  	int digVal;
			  	__HAL_TIM_SET_COUNTER(&htim2,0);
 80020c4:	4b7f      	ldr	r3, [pc, #508]	; (80022c4 <main+0xf7c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2200      	movs	r2, #0
 80020ca:	625a      	str	r2, [r3, #36]	; 0x24
			  	do{
			  		digVal = HAL_GPIO_ReadPin(GPIOA, Cout_Pin);
 80020cc:	2108      	movs	r1, #8
 80020ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d2:	f002 ff03 	bl	8004edc <HAL_GPIO_ReadPin>
 80020d6:	4603      	mov	r3, r0
 80020d8:	67fb      	str	r3, [r7, #124]	; 0x7c
			  		t = __HAL_TIM_GET_COUNTER(&htim2);
 80020da:	4b7a      	ldr	r3, [pc, #488]	; (80022c4 <main+0xf7c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	67bb      	str	r3, [r7, #120]	; 0x78
			  	}
			  	while ((digVal < 1) && (t < 400000L));
 80020e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	dc03      	bgt.n	80020f0 <main+0xda8>
 80020e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020ea:	4a7c      	ldr	r2, [pc, #496]	; (80022dc <main+0xf94>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d9ed      	bls.n	80020cc <main+0xd84>
			  	set_gpio(GPIOA, Cout_Pin, GPIO_MODE_ANALOG_ADC_CONTROL, GPIO_NOPULL );
 80020f0:	2300      	movs	r3, #0
 80020f2:	220b      	movs	r2, #11
 80020f4:	2108      	movs	r1, #8
 80020f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020fa:	f000 fee3 	bl	8002ec4 <set_gpio>

			  	ADC_Select_Cout();
 80020fe:	f000 fc55 	bl	80029ac <ADC_Select_Cout>
			  	HAL_ADC_Start(&hadc1);
 8002102:	486f      	ldr	r0, [pc, #444]	; (80022c0 <main+0xf78>)
 8002104:	f001 fd5e 	bl	8003bc4 <HAL_ADC_Start>
			  	HAL_ADC_PollForConversion(&hadc1, 10);
 8002108:	210a      	movs	r1, #10
 800210a:	486d      	ldr	r0, [pc, #436]	; (80022c0 <main+0xf78>)
 800210c:	f001 fdf0 	bl	8003cf0 <HAL_ADC_PollForConversion>
			  	Val = HAL_ADC_GetValue(&hadc1);
 8002110:	486b      	ldr	r0, [pc, #428]	; (80022c0 <main+0xf78>)
 8002112:	f001 fe7c 	bl	8003e0e <HAL_ADC_GetValue>
 8002116:	4603      	mov	r3, r0
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe f9f3 	bl	8000504 <__aeabi_ui2d>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	496a      	ldr	r1, [pc, #424]	; (80022cc <main+0xf84>)
 8002124:	e9c1 2300 	strd	r2, r3, [r1]
			  	HAL_ADC_Stop(&hadc1);
 8002128:	4865      	ldr	r0, [pc, #404]	; (80022c0 <main+0xf78>)
 800212a:	f001 fdae 	bl	8003c8a <HAL_ADC_Stop>

		  		HAL_GPIO_WritePin(GPIOA, Cread_Pin, 1);
 800212e:	2201      	movs	r2, #1
 8002130:	2120      	movs	r1, #32
 8002132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002136:	f002 fee9 	bl	8004f0c <HAL_GPIO_WritePin>
		  		int dischargeTime = (int)(t / 1000L) * 5;
 800213a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800213c:	4a68      	ldr	r2, [pc, #416]	; (80022e0 <main+0xf98>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	099b      	lsrs	r3, r3, #6
 8002144:	461a      	mov	r2, r3
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	677b      	str	r3, [r7, #116]	; 0x74
		  		HAL_Delay(dischargeTime);
 800214e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002150:	4618      	mov	r0, r3
 8002152:	f001 f9b5 	bl	80034c0 <HAL_Delay>
		  		set_gpio(GPIOA, Cout_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL );
 8002156:	2300      	movs	r3, #0
 8002158:	2201      	movs	r2, #1
 800215a:	2108      	movs	r1, #8
 800215c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002160:	f000 feb0 	bl	8002ec4 <set_gpio>
		  		HAL_GPIO_WritePin(GPIOA, Cread_Pin, 0);
 8002164:	2200      	movs	r2, #0
 8002166:	2120      	movs	r1, #32
 8002168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800216c:	f002 fece 	bl	8004f0c <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOA, Cout_Pin, 0);
 8002170:	2200      	movs	r2, #0
 8002172:	2108      	movs	r1, #8
 8002174:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002178:	f002 fec8 	bl	8004f0c <HAL_GPIO_WritePin>
		  		float cap = (-(float)t / 39.8) / (log(1.0 - (float)Val / (float)4095));
 800217c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800217e:	ee07 3a90 	vmov	s15, r3
 8002182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002186:	eef1 7a67 	vneg.f32	s15, s15
 800218a:	ee17 3a90 	vmov	r3, s15
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe f9da 	bl	8000548 <__aeabi_f2d>
 8002194:	a348      	add	r3, pc, #288	; (adr r3, 80022b8 <main+0xf70>)
 8002196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219a:	f7fe fb57 	bl	800084c <__aeabi_ddiv>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4614      	mov	r4, r2
 80021a4:	461d      	mov	r5, r3
 80021a6:	4b49      	ldr	r3, [pc, #292]	; (80022cc <main+0xf84>)
 80021a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ac:	4610      	mov	r0, r2
 80021ae:	4619      	mov	r1, r3
 80021b0:	f7fe fd1a 	bl	8000be8 <__aeabi_d2f>
 80021b4:	ee06 0a90 	vmov	s13, r0
 80021b8:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80022e4 <main+0xf9c>
 80021bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021c0:	ee17 0a10 	vmov	r0, s14
 80021c4:	f7fe f9c0 	bl	8000548 <__aeabi_f2d>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	f04f 0000 	mov.w	r0, #0
 80021d0:	493f      	ldr	r1, [pc, #252]	; (80022d0 <main+0xf88>)
 80021d2:	f7fe f859 	bl	8000288 <__aeabi_dsub>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4610      	mov	r0, r2
 80021dc:	4619      	mov	r1, r3
 80021de:	f009 fc99 	bl	800bb14 <log>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4620      	mov	r0, r4
 80021e8:	4629      	mov	r1, r5
 80021ea:	f7fe fb2f 	bl	800084c <__aeabi_ddiv>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4610      	mov	r0, r2
 80021f4:	4619      	mov	r1, r3
 80021f6:	f7fe fcf7 	bl	8000be8 <__aeabi_d2f>
 80021fa:	4603      	mov	r3, r0
 80021fc:	673b      	str	r3, [r7, #112]	; 0x70

		  		if(cap>=1){
 80021fe:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002202:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800220a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220e:	db75      	blt.n	80022fc <main+0xfb4>
		  			int v1,v2,v3;
		  			v1 = (int)cap;
 8002210:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002214:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002218:	ee17 3a90 	vmov	r3, s15
 800221c:	66fb      	str	r3, [r7, #108]	; 0x6c
		  			v2 = (cap - (int)cap)*10;
 800221e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002222:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800222a:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800222e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002232:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002236:	ee67 7a87 	vmul.f32	s15, s15, s14
 800223a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800223e:	ee17 3a90 	vmov	r3, s15
 8002242:	66bb      	str	r3, [r7, #104]	; 0x68
		  			v3 = (cap - (int)cap)*100;
 8002244:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002248:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800224c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002250:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002254:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002258:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80022e8 <main+0xfa0>
 800225c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002260:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002264:	ee17 3a90 	vmov	r3, s15
 8002268:	667b      	str	r3, [r7, #100]	; 0x64


		  			sprintf(result, "%d.%d%d     ", v1, v2,v3);
 800226a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002270:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002272:	491e      	ldr	r1, [pc, #120]	; (80022ec <main+0xfa4>)
 8002274:	481e      	ldr	r0, [pc, #120]	; (80022f0 <main+0xfa8>)
 8002276:	f005 feaf 	bl	8007fd8 <siprintf>
		  			ST7735_WriteString(20, 50, result, Font_16x26, WHITE, BLACK);
 800227a:	4b1e      	ldr	r3, [pc, #120]	; (80022f4 <main+0xfac>)
 800227c:	2200      	movs	r2, #0
 800227e:	9202      	str	r2, [sp, #8]
 8002280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002284:	9201      	str	r2, [sp, #4]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	9200      	str	r2, [sp, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a18      	ldr	r2, [pc, #96]	; (80022f0 <main+0xfa8>)
 800228e:	2132      	movs	r1, #50	; 0x32
 8002290:	2014      	movs	r0, #20
 8002292:	f7fe ff7b 	bl	800118c <ST7735_WriteString>
		  			ST7735_WriteString(14, 105, "  nF  ", Font_16x26, WHITE, BLACK);
 8002296:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <main+0xfac>)
 8002298:	2200      	movs	r2, #0
 800229a:	9202      	str	r2, [sp, #8]
 800229c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022a0:	9201      	str	r2, [sp, #4]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	9200      	str	r2, [sp, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a13      	ldr	r2, [pc, #76]	; (80022f8 <main+0xfb0>)
 80022aa:	2169      	movs	r1, #105	; 0x69
 80022ac:	200e      	movs	r0, #14
 80022ae:	f7fe ff6d 	bl	800118c <ST7735_WriteString>
 80022b2:	f7ff b869 	b.w	8001388 <main+0x40>
 80022b6:	bf00      	nop
 80022b8:	66666666 	.word	0x66666666
 80022bc:	4043e666 	.word	0x4043e666
 80022c0:	2000037c 	.word	0x2000037c
 80022c4:	20000444 	.word	0x20000444
 80022c8:	20000010 	.word	0x20000010
 80022cc:	200003e0 	.word	0x200003e0
 80022d0:	3ff00000 	.word	0x3ff00000
 80022d4:	408f4000 	.word	0x408f4000
 80022d8:	40568000 	.word	0x40568000
 80022dc:	00061a7f 	.word	0x00061a7f
 80022e0:	10624dd3 	.word	0x10624dd3
 80022e4:	457ff000 	.word	0x457ff000
 80022e8:	42c80000 	.word	0x42c80000
 80022ec:	0800bf80 	.word	0x0800bf80
 80022f0:	20000438 	.word	0x20000438
 80022f4:	20000008 	.word	0x20000008
 80022f8:	0800bf90 	.word	0x0800bf90

		        }
		  		else if(cap>0.15){
 80022fc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80022fe:	f7fe f923 	bl	8000548 <__aeabi_f2d>
 8002302:	a3a5      	add	r3, pc, #660	; (adr r3, 8002598 <main+0x1250>)
 8002304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002308:	f7fe fc06 	bl	8000b18 <__aeabi_dcmpgt>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d032      	beq.n	8002378 <main+0x1030>

		  			cap *=1000;
 8002312:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002316:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8002560 <main+0x1218>
 800231a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800231e:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		  			sprintf(result, " %d     ", (int)cap);
 8002322:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002326:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800232a:	ee17 2a90 	vmov	r2, s15
 800232e:	498d      	ldr	r1, [pc, #564]	; (8002564 <main+0x121c>)
 8002330:	488d      	ldr	r0, [pc, #564]	; (8002568 <main+0x1220>)
 8002332:	f005 fe51 	bl	8007fd8 <siprintf>
		  			ST7735_WriteString(20, 50, result, Font_16x26, WHITE, BLACK);
 8002336:	4b8d      	ldr	r3, [pc, #564]	; (800256c <main+0x1224>)
 8002338:	2200      	movs	r2, #0
 800233a:	9202      	str	r2, [sp, #8]
 800233c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002340:	9201      	str	r2, [sp, #4]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	9200      	str	r2, [sp, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a87      	ldr	r2, [pc, #540]	; (8002568 <main+0x1220>)
 800234a:	2132      	movs	r1, #50	; 0x32
 800234c:	2014      	movs	r0, #20
 800234e:	f7fe ff1d 	bl	800118c <ST7735_WriteString>
		  			ST7735_WriteString(14, 105, "  pF  ", Font_16x26, WHITE, BLACK);
 8002352:	4b86      	ldr	r3, [pc, #536]	; (800256c <main+0x1224>)
 8002354:	2200      	movs	r2, #0
 8002356:	9202      	str	r2, [sp, #8]
 8002358:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800235c:	9201      	str	r2, [sp, #4]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	9200      	str	r2, [sp, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a82      	ldr	r2, [pc, #520]	; (8002570 <main+0x1228>)
 8002366:	2169      	movs	r1, #105	; 0x69
 8002368:	200e      	movs	r0, #14
 800236a:	f7fe ff0f 	bl	800118c <ST7735_WriteString>
		  			HAL_Delay(200);
 800236e:	20c8      	movs	r0, #200	; 0xc8
 8002370:	f001 f8a6 	bl	80034c0 <HAL_Delay>
 8002374:	f7ff b808 	b.w	8001388 <main+0x40>

		  		}
		        else{

		  			ST7735_WriteString(10, 50, " -----      ", Font_16x26, WHITE, BLACK);
 8002378:	4b7c      	ldr	r3, [pc, #496]	; (800256c <main+0x1224>)
 800237a:	2200      	movs	r2, #0
 800237c:	9202      	str	r2, [sp, #8]
 800237e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002382:	9201      	str	r2, [sp, #4]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	9200      	str	r2, [sp, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a7a      	ldr	r2, [pc, #488]	; (8002574 <main+0x122c>)
 800238c:	2132      	movs	r1, #50	; 0x32
 800238e:	200a      	movs	r0, #10
 8002390:	f7fe fefc 	bl	800118c <ST7735_WriteString>
		  	  	  	ST7735_WriteString(19, 105, "  F  ", Font_16x26, WHITE, BLACK);
 8002394:	4b75      	ldr	r3, [pc, #468]	; (800256c <main+0x1224>)
 8002396:	2200      	movs	r2, #0
 8002398:	9202      	str	r2, [sp, #8]
 800239a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800239e:	9201      	str	r2, [sp, #4]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	9200      	str	r2, [sp, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a74      	ldr	r2, [pc, #464]	; (8002578 <main+0x1230>)
 80023a8:	2169      	movs	r1, #105	; 0x69
 80023aa:	2013      	movs	r0, #19
 80023ac:	f7fe feee 	bl	800118c <ST7735_WriteString>
 80023b0:	f7fe bfea 	b.w	8001388 <main+0x40>
		        }
			  }//koniec małe watości

			  else{
				  int v1,v2,v3;
				  v1 = (int)Val;
 80023b4:	4b71      	ldr	r3, [pc, #452]	; (800257c <main+0x1234>)
 80023b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ba:	4610      	mov	r0, r2
 80023bc:	4619      	mov	r1, r3
 80023be:	f7fe fbcb 	bl	8000b58 <__aeabi_d2iz>
 80023c2:	4603      	mov	r3, r0
 80023c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				  v2 = (Val - (int)Val)*10;
 80023c8:	4b6c      	ldr	r3, [pc, #432]	; (800257c <main+0x1234>)
 80023ca:	e9d3 4500 	ldrd	r4, r5, [r3]
 80023ce:	4b6b      	ldr	r3, [pc, #428]	; (800257c <main+0x1234>)
 80023d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d4:	4610      	mov	r0, r2
 80023d6:	4619      	mov	r1, r3
 80023d8:	f7fe fbbe 	bl	8000b58 <__aeabi_d2iz>
 80023dc:	4603      	mov	r3, r0
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe f8a0 	bl	8000524 <__aeabi_i2d>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	4620      	mov	r0, r4
 80023ea:	4629      	mov	r1, r5
 80023ec:	f7fd ff4c 	bl	8000288 <__aeabi_dsub>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4610      	mov	r0, r2
 80023f6:	4619      	mov	r1, r3
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	4b60      	ldr	r3, [pc, #384]	; (8002580 <main+0x1238>)
 80023fe:	f7fe f8fb 	bl	80005f8 <__aeabi_dmul>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4610      	mov	r0, r2
 8002408:	4619      	mov	r1, r3
 800240a:	f7fe fba5 	bl	8000b58 <__aeabi_d2iz>
 800240e:	4603      	mov	r3, r0
 8002410:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				  v3 = (Val - (int)Val)*100;
 8002414:	4b59      	ldr	r3, [pc, #356]	; (800257c <main+0x1234>)
 8002416:	e9d3 4500 	ldrd	r4, r5, [r3]
 800241a:	4b58      	ldr	r3, [pc, #352]	; (800257c <main+0x1234>)
 800241c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002420:	4610      	mov	r0, r2
 8002422:	4619      	mov	r1, r3
 8002424:	f7fe fb98 	bl	8000b58 <__aeabi_d2iz>
 8002428:	4603      	mov	r3, r0
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe f87a 	bl	8000524 <__aeabi_i2d>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4620      	mov	r0, r4
 8002436:	4629      	mov	r1, r5
 8002438:	f7fd ff26 	bl	8000288 <__aeabi_dsub>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	4b4e      	ldr	r3, [pc, #312]	; (8002584 <main+0x123c>)
 800244a:	f7fe f8d5 	bl	80005f8 <__aeabi_dmul>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4610      	mov	r0, r2
 8002454:	4619      	mov	r1, r3
 8002456:	f7fe fb7f 	bl	8000b58 <__aeabi_d2iz>
 800245a:	4603      	mov	r3, r0
 800245c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80


				  sprintf(result, "%d.%d%d     ", v1, v2,v3);
 8002460:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800246a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800246e:	4946      	ldr	r1, [pc, #280]	; (8002588 <main+0x1240>)
 8002470:	483d      	ldr	r0, [pc, #244]	; (8002568 <main+0x1220>)
 8002472:	f005 fdb1 	bl	8007fd8 <siprintf>
			  	  ST7735_WriteString(10, 50, result, Font_16x26, WHITE, BLACK);
 8002476:	4b3d      	ldr	r3, [pc, #244]	; (800256c <main+0x1224>)
 8002478:	2200      	movs	r2, #0
 800247a:	9202      	str	r2, [sp, #8]
 800247c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002480:	9201      	str	r2, [sp, #4]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	9200      	str	r2, [sp, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a37      	ldr	r2, [pc, #220]	; (8002568 <main+0x1220>)
 800248a:	2132      	movs	r1, #50	; 0x32
 800248c:	200a      	movs	r0, #10
 800248e:	f7fe fe7d 	bl	800118c <ST7735_WriteString>
			  	  ST7735_WriteString(14, 105, "  nF  ", Font_16x26, WHITE, BLACK);
 8002492:	4b36      	ldr	r3, [pc, #216]	; (800256c <main+0x1224>)
 8002494:	2200      	movs	r2, #0
 8002496:	9202      	str	r2, [sp, #8]
 8002498:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800249c:	9201      	str	r2, [sp, #4]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	9200      	str	r2, [sp, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a39      	ldr	r2, [pc, #228]	; (800258c <main+0x1244>)
 80024a6:	2169      	movs	r1, #105	; 0x69
 80024a8:	200e      	movs	r0, #14
 80024aa:	f7fe fe6f 	bl	800118c <ST7735_WriteString>
 80024ae:	f7fe bf6b 	b.w	8001388 <main+0x40>
			  }
		  }
		  else{
			  int v1,v2;
			  v1 = (int)Val;
 80024b2:	4b32      	ldr	r3, [pc, #200]	; (800257c <main+0x1234>)
 80024b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	f7fe fb4c 	bl	8000b58 <__aeabi_d2iz>
 80024c0:	4603      	mov	r3, r0
 80024c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			  v2 = (Val - (int)Val)*10;
 80024c6:	4b2d      	ldr	r3, [pc, #180]	; (800257c <main+0x1234>)
 80024c8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80024cc:	4b2b      	ldr	r3, [pc, #172]	; (800257c <main+0x1234>)
 80024ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d2:	4610      	mov	r0, r2
 80024d4:	4619      	mov	r1, r3
 80024d6:	f7fe fb3f 	bl	8000b58 <__aeabi_d2iz>
 80024da:	4603      	mov	r3, r0
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe f821 	bl	8000524 <__aeabi_i2d>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4620      	mov	r0, r4
 80024e8:	4629      	mov	r1, r5
 80024ea:	f7fd fecd 	bl	8000288 <__aeabi_dsub>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4610      	mov	r0, r2
 80024f4:	4619      	mov	r1, r3
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	4b21      	ldr	r3, [pc, #132]	; (8002580 <main+0x1238>)
 80024fc:	f7fe f87c 	bl	80005f8 <__aeabi_dmul>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4610      	mov	r0, r2
 8002506:	4619      	mov	r1, r3
 8002508:	f7fe fb26 	bl	8000b58 <__aeabi_d2iz>
 800250c:	4603      	mov	r3, r0
 800250e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c


			  sprintf(result, "%d.%d     ", v1, v2);
 8002512:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002516:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800251a:	491d      	ldr	r1, [pc, #116]	; (8002590 <main+0x1248>)
 800251c:	4812      	ldr	r0, [pc, #72]	; (8002568 <main+0x1220>)
 800251e:	f005 fd5b 	bl	8007fd8 <siprintf>
			  ST7735_WriteString(10, 50, result, Font_16x26, WHITE, BLACK);
 8002522:	4b12      	ldr	r3, [pc, #72]	; (800256c <main+0x1224>)
 8002524:	2200      	movs	r2, #0
 8002526:	9202      	str	r2, [sp, #8]
 8002528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800252c:	9201      	str	r2, [sp, #4]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	9200      	str	r2, [sp, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a0c      	ldr	r2, [pc, #48]	; (8002568 <main+0x1220>)
 8002536:	2132      	movs	r1, #50	; 0x32
 8002538:	200a      	movs	r0, #10
 800253a:	f7fe fe27 	bl	800118c <ST7735_WriteString>
			  ST7735_WriteString(14, 105, "  uF  ", Font_16x26, WHITE, BLACK);
 800253e:	4b0b      	ldr	r3, [pc, #44]	; (800256c <main+0x1224>)
 8002540:	2200      	movs	r2, #0
 8002542:	9202      	str	r2, [sp, #8]
 8002544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002548:	9201      	str	r2, [sp, #4]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	9200      	str	r2, [sp, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a10      	ldr	r2, [pc, #64]	; (8002594 <main+0x124c>)
 8002552:	2169      	movs	r1, #105	; 0x69
 8002554:	200e      	movs	r0, #14
 8002556:	f7fe fe19 	bl	800118c <ST7735_WriteString>
 800255a:	f7fe bf15 	b.w	8001388 <main+0x40>
 800255e:	bf00      	nop
 8002560:	447a0000 	.word	0x447a0000
 8002564:	0800bf98 	.word	0x0800bf98
 8002568:	20000438 	.word	0x20000438
 800256c:	20000008 	.word	0x20000008
 8002570:	0800bfa4 	.word	0x0800bfa4
 8002574:	0800bf28 	.word	0x0800bf28
 8002578:	0800bfac 	.word	0x0800bfac
 800257c:	200003e0 	.word	0x200003e0
 8002580:	40240000 	.word	0x40240000
 8002584:	40590000 	.word	0x40590000
 8002588:	0800bf80 	.word	0x0800bf80
 800258c:	0800bf90 	.word	0x0800bf90
 8002590:	0800bf40 	.word	0x0800bf40
 8002594:	0800bfb4 	.word	0x0800bfb4
 8002598:	33333333 	.word	0x33333333
 800259c:	3fc33333 	.word	0x3fc33333
		  }

	  }

	  else if(Flaga == 4){
 80025a0:	4b89      	ldr	r3, [pc, #548]	; (80027c8 <main+0x1480>)
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	f47e aeef 	bne.w	8001388 <main+0x40>

		  ST7735_WriteString(20, 10, "INDUKCYJNOSC", Font_7x10, WHITE, BLACK);
 80025aa:	4b88      	ldr	r3, [pc, #544]	; (80027cc <main+0x1484>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	9202      	str	r2, [sp, #8]
 80025b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025b4:	9201      	str	r2, [sp, #4]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	9200      	str	r2, [sp, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a84      	ldr	r2, [pc, #528]	; (80027d0 <main+0x1488>)
 80025be:	210a      	movs	r1, #10
 80025c0:	2014      	movs	r0, #20
 80025c2:	f7fe fde3 	bl	800118c <ST7735_WriteString>

		  set_gpio(GPIOA, PulseIN_Pin, GPIO_MODE_INPUT, GPIO_NOPULL );
 80025c6:	2300      	movs	r3, #0
 80025c8:	2200      	movs	r2, #0
 80025ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025d2:	f000 fc77 	bl	8002ec4 <set_gpio>
		  set_gpio(GPIOB, PulseOUT_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL );
 80025d6:	2300      	movs	r3, #0
 80025d8:	2201      	movs	r2, #1
 80025da:	2101      	movs	r1, #1
 80025dc:	487d      	ldr	r0, [pc, #500]	; (80027d4 <main+0x148c>)
 80025de:	f000 fc71 	bl	8002ec4 <set_gpio>

	  	  HAL_GPIO_WritePin(GPIOB, PulseOUT_Pin, 1);
 80025e2:	2201      	movs	r2, #1
 80025e4:	2101      	movs	r1, #1
 80025e6:	487b      	ldr	r0, [pc, #492]	; (80027d4 <main+0x148c>)
 80025e8:	f002 fc90 	bl	8004f0c <HAL_GPIO_WritePin>
	  	  HAL_Delay(5);
 80025ec:	2005      	movs	r0, #5
 80025ee:	f000 ff67 	bl	80034c0 <HAL_Delay>
	  	  HAL_GPIO_WritePin(GPIOB, PulseOUT_Pin, 0);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2101      	movs	r1, #1
 80025f6:	4877      	ldr	r0, [pc, #476]	; (80027d4 <main+0x148c>)
 80025f8:	f002 fc88 	bl	8004f0c <HAL_GPIO_WritePin>
	  	  delay_us(50);
 80025fc:	2032      	movs	r0, #50	; 0x32
 80025fe:	f000 fbff 	bl	8002e00 <delay_us>
	  	  double puls = pulse_in(GPIOA, PulseIN_Pin , 5000);
 8002602:	f241 3288 	movw	r2, #5000	; 0x1388
 8002606:	f44f 7180 	mov.w	r1, #256	; 0x100
 800260a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800260e:	f000 fc11 	bl	8002e34 <pulse_in>
 8002612:	4603      	mov	r3, r0
 8002614:	4618      	mov	r0, r3
 8002616:	f7fd ff75 	bl	8000504 <__aeabi_ui2d>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	  	  double freq;

	  	  if(puls > 0.1){
 8002622:	a363      	add	r3, pc, #396	; (adr r3, 80027b0 <main+0x1468>)
 8002624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002628:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800262c:	f7fe fa74 	bl	8000b18 <__aeabi_dcmpgt>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d054      	beq.n	80026e0 <main+0x1398>

	  		  freq = 1.E6/(2*puls);  //zamiana na częstotliwość
 8002636:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	f7fd fe25 	bl	800028c <__adddf3>
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	a15c      	add	r1, pc, #368	; (adr r1, 80027b8 <main+0x1470>)
 8002648:	e9d1 0100 	ldrd	r0, r1, [r1]
 800264c:	f7fe f8fe 	bl	800084c <__aeabi_ddiv>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	  		  Val = 1/(4*c*freq*freq*PI*PI);
 8002658:	4b5f      	ldr	r3, [pc, #380]	; (80027d8 <main+0x1490>)
 800265a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	4b5e      	ldr	r3, [pc, #376]	; (80027dc <main+0x1494>)
 8002664:	f7fd ffc8 	bl	80005f8 <__aeabi_dmul>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4610      	mov	r0, r2
 800266e:	4619      	mov	r1, r3
 8002670:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002674:	f7fd ffc0 	bl	80005f8 <__aeabi_dmul>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4610      	mov	r0, r2
 800267e:	4619      	mov	r1, r3
 8002680:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002684:	f7fd ffb8 	bl	80005f8 <__aeabi_dmul>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4610      	mov	r0, r2
 800268e:	4619      	mov	r1, r3
 8002690:	4b53      	ldr	r3, [pc, #332]	; (80027e0 <main+0x1498>)
 8002692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002696:	f7fd ffaf 	bl	80005f8 <__aeabi_dmul>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	4610      	mov	r0, r2
 80026a0:	4619      	mov	r1, r3
 80026a2:	4b4f      	ldr	r3, [pc, #316]	; (80027e0 <main+0x1498>)
 80026a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a8:	f7fd ffa6 	bl	80005f8 <__aeabi_dmul>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	f04f 0000 	mov.w	r0, #0
 80026b4:	494b      	ldr	r1, [pc, #300]	; (80027e4 <main+0x149c>)
 80026b6:	f7fe f8c9 	bl	800084c <__aeabi_ddiv>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	494a      	ldr	r1, [pc, #296]	; (80027e8 <main+0x14a0>)
 80026c0:	e9c1 2300 	strd	r2, r3, [r1]
	  		  Val *= 1.0E6;
 80026c4:	4b48      	ldr	r3, [pc, #288]	; (80027e8 <main+0x14a0>)
 80026c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026ca:	a33b      	add	r3, pc, #236	; (adr r3, 80027b8 <main+0x1470>)
 80026cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d0:	f7fd ff92 	bl	80005f8 <__aeabi_dmul>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4943      	ldr	r1, [pc, #268]	; (80027e8 <main+0x14a0>)
 80026da:	e9c1 2300 	strd	r2, r3, [r1]
 80026de:	e006      	b.n	80026ee <main+0x13a6>

	  	  }
	  	  else{
	  		  Val = 0;
 80026e0:	4941      	ldr	r1, [pc, #260]	; (80027e8 <main+0x14a0>)
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	e9c1 2300 	strd	r2, r3, [r1]
	  	  }

	  	  if(Val>0.1){
 80026ee:	4b3e      	ldr	r3, [pc, #248]	; (80027e8 <main+0x14a0>)
 80026f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026f4:	a32e      	add	r3, pc, #184	; (adr r3, 80027b0 <main+0x1468>)
 80026f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fa:	f7fe fa0d 	bl	8000b18 <__aeabi_dcmpgt>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d035      	beq.n	8002770 <main+0x1428>

	  		  if(Val<10000){
 8002704:	4b38      	ldr	r3, [pc, #224]	; (80027e8 <main+0x14a0>)
 8002706:	e9d3 0100 	ldrd	r0, r1, [r3]
 800270a:	a32d      	add	r3, pc, #180	; (adr r3, 80027c0 <main+0x1478>)
 800270c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002710:	f7fe f9e4 	bl	8000adc <__aeabi_dcmplt>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d046      	beq.n	80027a8 <main+0x1460>

	  			  sprintf(result, " %d     ", (int)Val);
 800271a:	4b33      	ldr	r3, [pc, #204]	; (80027e8 <main+0x14a0>)
 800271c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002720:	4610      	mov	r0, r2
 8002722:	4619      	mov	r1, r3
 8002724:	f7fe fa18 	bl	8000b58 <__aeabi_d2iz>
 8002728:	4603      	mov	r3, r0
 800272a:	461a      	mov	r2, r3
 800272c:	492f      	ldr	r1, [pc, #188]	; (80027ec <main+0x14a4>)
 800272e:	4830      	ldr	r0, [pc, #192]	; (80027f0 <main+0x14a8>)
 8002730:	f005 fc52 	bl	8007fd8 <siprintf>
	  			  ST7735_WriteString(20, 50, result, Font_16x26, WHITE, BLACK);
 8002734:	4b2f      	ldr	r3, [pc, #188]	; (80027f4 <main+0x14ac>)
 8002736:	2200      	movs	r2, #0
 8002738:	9202      	str	r2, [sp, #8]
 800273a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800273e:	9201      	str	r2, [sp, #4]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	9200      	str	r2, [sp, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a2a      	ldr	r2, [pc, #168]	; (80027f0 <main+0x14a8>)
 8002748:	2132      	movs	r1, #50	; 0x32
 800274a:	2014      	movs	r0, #20
 800274c:	f7fe fd1e 	bl	800118c <ST7735_WriteString>
	  	  	  	  ST7735_WriteString(14, 105, "  uH  ", Font_16x26, WHITE, BLACK);
 8002750:	4b28      	ldr	r3, [pc, #160]	; (80027f4 <main+0x14ac>)
 8002752:	2200      	movs	r2, #0
 8002754:	9202      	str	r2, [sp, #8]
 8002756:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800275a:	9201      	str	r2, [sp, #4]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	9200      	str	r2, [sp, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a25      	ldr	r2, [pc, #148]	; (80027f8 <main+0x14b0>)
 8002764:	2169      	movs	r1, #105	; 0x69
 8002766:	200e      	movs	r0, #14
 8002768:	f7fe fd10 	bl	800118c <ST7735_WriteString>
 800276c:	f7fe be0c 	b.w	8001388 <main+0x40>
	  		  }

	  	  }
	  	  else{

	  		  ST7735_WriteString(10, 50, " -----      ", Font_16x26, WHITE, BLACK);
 8002770:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <main+0x14ac>)
 8002772:	2200      	movs	r2, #0
 8002774:	9202      	str	r2, [sp, #8]
 8002776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800277a:	9201      	str	r2, [sp, #4]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	9200      	str	r2, [sp, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a1e      	ldr	r2, [pc, #120]	; (80027fc <main+0x14b4>)
 8002784:	2132      	movs	r1, #50	; 0x32
 8002786:	200a      	movs	r0, #10
 8002788:	f7fe fd00 	bl	800118c <ST7735_WriteString>
	  	  	  ST7735_WriteString(19, 105, "  H  ", Font_16x26, WHITE, BLACK);
 800278c:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <main+0x14ac>)
 800278e:	2200      	movs	r2, #0
 8002790:	9202      	str	r2, [sp, #8]
 8002792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002796:	9201      	str	r2, [sp, #4]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	9200      	str	r2, [sp, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a18      	ldr	r2, [pc, #96]	; (8002800 <main+0x14b8>)
 80027a0:	2169      	movs	r1, #105	; 0x69
 80027a2:	2013      	movs	r0, #19
 80027a4:	f7fe fcf2 	bl	800118c <ST7735_WriteString>
  {
 80027a8:	f7fe bdee 	b.w	8001388 <main+0x40>
 80027ac:	f3af 8000 	nop.w
 80027b0:	9999999a 	.word	0x9999999a
 80027b4:	3fb99999 	.word	0x3fb99999
 80027b8:	00000000 	.word	0x00000000
 80027bc:	412e8480 	.word	0x412e8480
 80027c0:	00000000 	.word	0x00000000
 80027c4:	40c38800 	.word	0x40c38800
 80027c8:	20000490 	.word	0x20000490
 80027cc:	20000000 	.word	0x20000000
 80027d0:	0800bfbc 	.word	0x0800bfbc
 80027d4:	48000400 	.word	0x48000400
 80027d8:	20000020 	.word	0x20000020
 80027dc:	40100000 	.word	0x40100000
 80027e0:	20000018 	.word	0x20000018
 80027e4:	3ff00000 	.word	0x3ff00000
 80027e8:	200003e0 	.word	0x200003e0
 80027ec:	0800bf98 	.word	0x0800bf98
 80027f0:	20000438 	.word	0x20000438
 80027f4:	20000008 	.word	0x20000008
 80027f8:	0800bfcc 	.word	0x0800bfcc
 80027fc:	0800bf28 	.word	0x0800bf28
 8002800:	0800bfd4 	.word	0x0800bfd4

08002804 <Vref>:

  }
  /* USER CODE END 3 */
}
void Vref	(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
	deactivate_perif();
 800280a:	f000 f91b 	bl	8002a44 <deactivate_perif>
	set_gpio(GPIOB, S2_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL );
 800280e:	2300      	movs	r3, #0
 8002810:	2201      	movs	r2, #1
 8002812:	2102      	movs	r1, #2
 8002814:	482a      	ldr	r0, [pc, #168]	; (80028c0 <Vref+0xbc>)
 8002816:	f000 fb55 	bl	8002ec4 <set_gpio>
	set_gpio(GPIOB, S1_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL );
 800281a:	2300      	movs	r3, #0
 800281c:	2201      	movs	r2, #1
 800281e:	2140      	movs	r1, #64	; 0x40
 8002820:	4827      	ldr	r0, [pc, #156]	; (80028c0 <Vref+0xbc>)
 8002822:	f000 fb4f 	bl	8002ec4 <set_gpio>
	set_gpio(GPIOB, S0_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL );
 8002826:	2300      	movs	r3, #0
 8002828:	2201      	movs	r2, #1
 800282a:	2180      	movs	r1, #128	; 0x80
 800282c:	4824      	ldr	r0, [pc, #144]	; (80028c0 <Vref+0xbc>)
 800282e:	f000 fb49 	bl	8002ec4 <set_gpio>
	set_gpio(GPIOA, Rref_Pin, GPIO_MODE_ANALOG_ADC_CONTROL, GPIO_NOPULL );
 8002832:	2300      	movs	r3, #0
 8002834:	220b      	movs	r2, #11
 8002836:	2101      	movs	r1, #1
 8002838:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800283c:	f000 fb42 	bl	8002ec4 <set_gpio>

	HAL_Delay(50);
 8002840:	2032      	movs	r0, #50	; 0x32
 8002842:	f000 fe3d 	bl	80034c0 <HAL_Delay>

	for(int j = 0; j < 3; j ++){
 8002846:	2300      	movs	r3, #0
 8002848:	607b      	str	r3, [r7, #4]
 800284a:	e010      	b.n	800286e <Vref+0x6a>

		HAL_GPIO_WritePin(GPIOB, controlPin[j], muxChannel[0][j]);
 800284c:	4a1d      	ldr	r2, [pc, #116]	; (80028c4 <Vref+0xc0>)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002854:	b299      	uxth	r1, r3
 8002856:	4a1c      	ldr	r2, [pc, #112]	; (80028c8 <Vref+0xc4>)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	461a      	mov	r2, r3
 8002862:	4817      	ldr	r0, [pc, #92]	; (80028c0 <Vref+0xbc>)
 8002864:	f002 fb52 	bl	8004f0c <HAL_GPIO_WritePin>
	for(int j = 0; j < 3; j ++){
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3301      	adds	r3, #1
 800286c:	607b      	str	r3, [r7, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b02      	cmp	r3, #2
 8002872:	ddeb      	ble.n	800284c <Vref+0x48>
	}

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002874:	217f      	movs	r1, #127	; 0x7f
 8002876:	4815      	ldr	r0, [pc, #84]	; (80028cc <Vref+0xc8>)
 8002878:	f002 f884 	bl	8004984 <HAL_ADCEx_Calibration_Start>
	HAL_Delay(50);
 800287c:	2032      	movs	r0, #50	; 0x32
 800287e:	f000 fe1f 	bl	80034c0 <HAL_Delay>
	ADC_Select_Rref ();
 8002882:	f000 f827 	bl	80028d4 <ADC_Select_Rref>

	HAL_ADC_Start(&hadc1);
 8002886:	4811      	ldr	r0, [pc, #68]	; (80028cc <Vref+0xc8>)
 8002888:	f001 f99c 	bl	8003bc4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 800288c:	2164      	movs	r1, #100	; 0x64
 800288e:	480f      	ldr	r0, [pc, #60]	; (80028cc <Vref+0xc8>)
 8002890:	f001 fa2e 	bl	8003cf0 <HAL_ADC_PollForConversion>
	ref = HAL_ADC_GetValue(&hadc1);
 8002894:	480d      	ldr	r0, [pc, #52]	; (80028cc <Vref+0xc8>)
 8002896:	f001 faba 	bl	8003e0e <HAL_ADC_GetValue>
 800289a:	4603      	mov	r3, r0
 800289c:	4618      	mov	r0, r3
 800289e:	f7fd fe31 	bl	8000504 <__aeabi_ui2d>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	490a      	ldr	r1, [pc, #40]	; (80028d0 <Vref+0xcc>)
 80028a8:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_ADC_Stop(&hadc1);
 80028ac:	4807      	ldr	r0, [pc, #28]	; (80028cc <Vref+0xc8>)
 80028ae:	f001 f9ec 	bl	8003c8a <HAL_ADC_Stop>
	deactivate_perif();
 80028b2:	f000 f8c7 	bl	8002a44 <deactivate_perif>
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	48000400 	.word	0x48000400
 80028c4:	20000044 	.word	0x20000044
 80028c8:	20000050 	.word	0x20000050
 80028cc:	2000037c 	.word	0x2000037c
 80028d0:	200002b8 	.word	0x200002b8

080028d4 <ADC_Select_Rref>:

void ADC_Select_Rref (void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80028da:	463b      	mov	r3, r7
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	60da      	str	r2, [r3, #12]
 80028e6:	611a      	str	r2, [r3, #16]
 80028e8:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_5;
 80028ea:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <ADC_Select_Rref+0x44>)
 80028ec:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80028ee:	2301      	movs	r3, #1
 80028f0:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80028f2:	2306      	movs	r3, #6
 80028f4:	60bb      	str	r3, [r7, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80028f6:	237f      	movs	r3, #127	; 0x7f
 80028f8:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028fa:	463b      	mov	r3, r7
 80028fc:	4619      	mov	r1, r3
 80028fe:	4807      	ldr	r0, [pc, #28]	; (800291c <ADC_Select_Rref+0x48>)
 8002900:	f001 fa92 	bl	8003e28 <HAL_ADC_ConfigChannel>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <ADC_Select_Rref+0x3a>
	  {
	    Error_Handler();
 800290a:	f000 fb0f 	bl	8002f2c <Error_Handler>
	  }
}
 800290e:	bf00      	nop
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	14f00020 	.word	0x14f00020
 800291c:	2000037c 	.word	0x2000037c

08002920 <ADC_Select_Rread>:


void ADC_Select_Rread (void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8002926:	463b      	mov	r3, r7
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
 8002934:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	sConfig.Channel = ADC_CHANNEL_6;
 8002936:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <ADC_Select_Rread+0x44>)
 8002938:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800293a:	2301      	movs	r3, #1
 800293c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800293e:	2306      	movs	r3, #6
 8002940:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002942:	237f      	movs	r3, #127	; 0x7f
 8002944:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002946:	463b      	mov	r3, r7
 8002948:	4619      	mov	r1, r3
 800294a:	4807      	ldr	r0, [pc, #28]	; (8002968 <ADC_Select_Rread+0x48>)
 800294c:	f001 fa6c 	bl	8003e28 <HAL_ADC_ConfigChannel>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <ADC_Select_Rread+0x3a>
	  {
	    Error_Handler();
 8002956:	f000 fae9 	bl	8002f2c <Error_Handler>
	  }
}
 800295a:	bf00      	nop
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	19200040 	.word	0x19200040
 8002968:	2000037c 	.word	0x2000037c

0800296c <ADC_Select_ModePin>:

void ADC_Select_ModePin (void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8002972:	463b      	mov	r3, r7
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	611a      	str	r2, [r3, #16]
 8002980:	615a      	str	r2, [r3, #20]

	sConfig.Channel = ADC_CHANNEL_7;
 8002982:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <ADC_Select_ModePin+0x38>)
 8002984:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8002986:	2301      	movs	r3, #1
 8002988:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 800298a:	2303      	movs	r3, #3
 800298c:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800298e:	237f      	movs	r3, #127	; 0x7f
 8002990:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002992:	463b      	mov	r3, r7
 8002994:	4619      	mov	r1, r3
 8002996:	4804      	ldr	r0, [pc, #16]	; (80029a8 <ADC_Select_ModePin+0x3c>)
 8002998:	f001 fa46 	bl	8003e28 <HAL_ADC_ConfigChannel>
	  {
	    //Error_Handler();
	  }
}
 800299c:	bf00      	nop
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	1d500080 	.word	0x1d500080
 80029a8:	2000037c 	.word	0x2000037c

080029ac <ADC_Select_Cout>:

void ADC_Select_Cout (void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80029b2:	463b      	mov	r3, r7
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]
 80029c0:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_8;
 80029c2:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <ADC_Select_Cout+0x44>)
 80029c4:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80029c6:	2301      	movs	r3, #1
 80029c8:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80029ca:	2303      	movs	r3, #3
 80029cc:	60bb      	str	r3, [r7, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80029ce:	237f      	movs	r3, #127	; 0x7f
 80029d0:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029d2:	463b      	mov	r3, r7
 80029d4:	4619      	mov	r1, r3
 80029d6:	4807      	ldr	r0, [pc, #28]	; (80029f4 <ADC_Select_Cout+0x48>)
 80029d8:	f001 fa26 	bl	8003e28 <HAL_ADC_ConfigChannel>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <ADC_Select_Cout+0x3a>
	  {
	    Error_Handler();
 80029e2:	f000 faa3 	bl	8002f2c <Error_Handler>
	  }
}
 80029e6:	bf00      	nop
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	21800100 	.word	0x21800100
 80029f4:	2000037c 	.word	0x2000037c

080029f8 <ADC_Select_Cread>:
void ADC_Select_Cread (void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80029fe:	463b      	mov	r3, r7
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	611a      	str	r2, [r3, #16]
 8002a0c:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_10;
 8002a0e:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <ADC_Select_Cread+0x44>)
 8002a10:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8002a12:	2301      	movs	r3, #1
 8002a14:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002a16:	2300      	movs	r3, #0
 8002a18:	60bb      	str	r3, [r7, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002a1a:	237f      	movs	r3, #127	; 0x7f
 8002a1c:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a1e:	463b      	mov	r3, r7
 8002a20:	4619      	mov	r1, r3
 8002a22:	4807      	ldr	r0, [pc, #28]	; (8002a40 <ADC_Select_Cread+0x48>)
 8002a24:	f001 fa00 	bl	8003e28 <HAL_ADC_ConfigChannel>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <ADC_Select_Cread+0x3a>
	  {
	    Error_Handler();
 8002a2e:	f000 fa7d 	bl	8002f2c <Error_Handler>
	  }
}
 8002a32:	bf00      	nop
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	2a000400 	.word	0x2a000400
 8002a40:	2000037c 	.word	0x2000037c

08002a44 <deactivate_perif>:
void deactivate_perif(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
	set_gpio(GPIOA, Cout_Pin|Cdischarge_Pin|Ccharge_Pin|Cread_Pin|PulseIN_Pin, GPIO_MODE_INPUT, GPIO_NOPULL );
 8002a48:	2300      	movs	r3, #0
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8002a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a54:	f000 fa36 	bl	8002ec4 <set_gpio>
	set_gpio(GPIOB, S2_Pin|S1_Pin|S0_Pin|PulseOUT_Pin, GPIO_MODE_INPUT, GPIO_NOPULL );
 8002a58:	2300      	movs	r3, #0
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	21c3      	movs	r1, #195	; 0xc3
 8002a5e:	4802      	ldr	r0, [pc, #8]	; (8002a68 <deactivate_perif+0x24>)
 8002a60:	f000 fa30 	bl	8002ec4 <set_gpio>
}
 8002a64:	bf00      	nop
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	48000400 	.word	0x48000400

08002a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b096      	sub	sp, #88	; 0x58
 8002a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a72:	f107 0314 	add.w	r3, r7, #20
 8002a76:	2244      	movs	r2, #68	; 0x44
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f004 fc24 	bl	80072c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a80:	463b      	mov	r3, r7
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	605a      	str	r2, [r3, #4]
 8002a88:	609a      	str	r2, [r3, #8]
 8002a8a:	60da      	str	r2, [r3, #12]
 8002a8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002a8e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002a92:	f002 fa61 	bl	8004f58 <HAL_PWREx_ControlVoltageScaling>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002a9c:	f000 fa46 	bl	8002f2c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002aa0:	2310      	movs	r3, #16
 8002aa2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002aac:	2360      	movs	r3, #96	; 0x60
 8002aae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8002abc:	2324      	movs	r3, #36	; 0x24
 8002abe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002ac0:	2307      	movs	r3, #7
 8002ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002acc:	f107 0314 	add.w	r3, r7, #20
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f002 fa97 	bl	8005004 <HAL_RCC_OscConfig>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002adc:	f000 fa26 	bl	8002f2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ae0:	230f      	movs	r3, #15
 8002ae2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002af0:	2300      	movs	r3, #0
 8002af2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002af4:	463b      	mov	r3, r7
 8002af6:	2104      	movs	r1, #4
 8002af8:	4618      	mov	r0, r3
 8002afa:	f002 fe95 	bl	8005828 <HAL_RCC_ClockConfig>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002b04:	f000 fa12 	bl	8002f2c <Error_Handler>
  }
}
 8002b08:	bf00      	nop
 8002b0a:	3758      	adds	r7, #88	; 0x58
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002b14:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <MX_ADC1_Init+0x7c>)
 8002b16:	4a1e      	ldr	r2, [pc, #120]	; (8002b90 <MX_ADC1_Init+0x80>)
 8002b18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 8002b1a:	4b1c      	ldr	r3, [pc, #112]	; (8002b8c <MX_ADC1_Init+0x7c>)
 8002b1c:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
 8002b20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b22:	4b1a      	ldr	r3, [pc, #104]	; (8002b8c <MX_ADC1_Init+0x7c>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b28:	4b18      	ldr	r3, [pc, #96]	; (8002b8c <MX_ADC1_Init+0x7c>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002b2e:	4b17      	ldr	r3, [pc, #92]	; (8002b8c <MX_ADC1_Init+0x7c>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002b34:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <MX_ADC1_Init+0x7c>)
 8002b36:	2208      	movs	r2, #8
 8002b38:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002b3a:	4b14      	ldr	r3, [pc, #80]	; (8002b8c <MX_ADC1_Init+0x7c>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002b40:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <MX_ADC1_Init+0x7c>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002b46:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <MX_ADC1_Init+0x7c>)
 8002b48:	2201      	movs	r2, #1
 8002b4a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b4c:	4b0f      	ldr	r3, [pc, #60]	; (8002b8c <MX_ADC1_Init+0x7c>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b54:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <MX_ADC1_Init+0x7c>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b5a:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <MX_ADC1_Init+0x7c>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002b60:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <MX_ADC1_Init+0x7c>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002b68:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <MX_ADC1_Init+0x7c>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002b6e:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <MX_ADC1_Init+0x7c>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b76:	4805      	ldr	r0, [pc, #20]	; (8002b8c <MX_ADC1_Init+0x7c>)
 8002b78:	f000 fedc 	bl	8003934 <HAL_ADC_Init>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8002b82:	f000 f9d3 	bl	8002f2c <Error_Handler>
  }

}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	2000037c 	.word	0x2000037c
 8002b90:	50040000 	.word	0x50040000

08002b94 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002b98:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <MX_SPI3_Init+0x74>)
 8002b9a:	4a1c      	ldr	r2, [pc, #112]	; (8002c0c <MX_SPI3_Init+0x78>)
 8002b9c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002b9e:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <MX_SPI3_Init+0x74>)
 8002ba0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ba4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8002ba6:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <MX_SPI3_Init+0x74>)
 8002ba8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002bac:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bae:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <MX_SPI3_Init+0x74>)
 8002bb0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002bb4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bb6:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <MX_SPI3_Init+0x74>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bbc:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <MX_SPI3_Init+0x74>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <MX_SPI3_Init+0x74>)
 8002bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bc8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002bca:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <MX_SPI3_Init+0x74>)
 8002bcc:	2218      	movs	r2, #24
 8002bce:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bd0:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <MX_SPI3_Init+0x74>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bd6:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <MX_SPI3_Init+0x74>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <MX_SPI3_Init+0x74>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002be2:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <MX_SPI3_Init+0x74>)
 8002be4:	2207      	movs	r2, #7
 8002be6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002be8:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <MX_SPI3_Init+0x74>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002bee:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <MX_SPI3_Init+0x74>)
 8002bf0:	2208      	movs	r2, #8
 8002bf2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002bf4:	4804      	ldr	r0, [pc, #16]	; (8002c08 <MX_SPI3_Init+0x74>)
 8002bf6:	f003 fb3d 	bl	8006274 <HAL_SPI_Init>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8002c00:	f000 f994 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002c04:	bf00      	nop
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20000318 	.word	0x20000318
 8002c0c:	40003c00 	.word	0x40003c00

08002c10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c16:	f107 0310 	add.w	r3, r7, #16
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	605a      	str	r2, [r3, #4]
 8002c20:	609a      	str	r2, [r3, #8]
 8002c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c24:	1d3b      	adds	r3, r7, #4
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c2e:	4b20      	ldr	r3, [pc, #128]	; (8002cb0 <MX_TIM1_Init+0xa0>)
 8002c30:	4a20      	ldr	r2, [pc, #128]	; (8002cb4 <MX_TIM1_Init+0xa4>)
 8002c32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8002c34:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <MX_TIM1_Init+0xa0>)
 8002c36:	2247      	movs	r2, #71	; 0x47
 8002c38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c3a:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <MX_TIM1_Init+0xa0>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8002c40:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <MX_TIM1_Init+0xa0>)
 8002c42:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002c46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <MX_TIM1_Init+0xa0>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c4e:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <MX_TIM1_Init+0xa0>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c54:	4b16      	ldr	r3, [pc, #88]	; (8002cb0 <MX_TIM1_Init+0xa0>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002c5a:	4815      	ldr	r0, [pc, #84]	; (8002cb0 <MX_TIM1_Init+0xa0>)
 8002c5c:	f003 fe80 	bl	8006960 <HAL_TIM_Base_Init>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002c66:	f000 f961 	bl	8002f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002c70:	f107 0310 	add.w	r3, r7, #16
 8002c74:	4619      	mov	r1, r3
 8002c76:	480e      	ldr	r0, [pc, #56]	; (8002cb0 <MX_TIM1_Init+0xa0>)
 8002c78:	f004 f889 	bl	8006d8e <HAL_TIM_ConfigClockSource>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002c82:	f000 f953 	bl	8002f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c86:	2300      	movs	r3, #0
 8002c88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c92:	1d3b      	adds	r3, r7, #4
 8002c94:	4619      	mov	r1, r3
 8002c96:	4806      	ldr	r0, [pc, #24]	; (8002cb0 <MX_TIM1_Init+0xa0>)
 8002c98:	f004 fa68 	bl	800716c <HAL_TIMEx_MasterConfigSynchronization>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002ca2:	f000 f943 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002ca6:	bf00      	nop
 8002ca8:	3720      	adds	r7, #32
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	200003e8 	.word	0x200003e8
 8002cb4:	40012c00 	.word	0x40012c00

08002cb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b088      	sub	sp, #32
 8002cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cbe:	f107 0310 	add.w	r3, r7, #16
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	605a      	str	r2, [r3, #4]
 8002cc8:	609a      	str	r2, [r3, #8]
 8002cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ccc:	1d3b      	adds	r3, r7, #4
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	605a      	str	r2, [r3, #4]
 8002cd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cd6:	4b1e      	ldr	r3, [pc, #120]	; (8002d50 <MX_TIM2_Init+0x98>)
 8002cd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cdc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8002cde:	4b1c      	ldr	r3, [pc, #112]	; (8002d50 <MX_TIM2_Init+0x98>)
 8002ce0:	2248      	movs	r2, #72	; 0x48
 8002ce2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce4:	4b1a      	ldr	r3, [pc, #104]	; (8002d50 <MX_TIM2_Init+0x98>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002cea:	4b19      	ldr	r3, [pc, #100]	; (8002d50 <MX_TIM2_Init+0x98>)
 8002cec:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cf2:	4b17      	ldr	r3, [pc, #92]	; (8002d50 <MX_TIM2_Init+0x98>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cf8:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <MX_TIM2_Init+0x98>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002cfe:	4814      	ldr	r0, [pc, #80]	; (8002d50 <MX_TIM2_Init+0x98>)
 8002d00:	f003 fe2e 	bl	8006960 <HAL_TIM_Base_Init>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002d0a:	f000 f90f 	bl	8002f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d14:	f107 0310 	add.w	r3, r7, #16
 8002d18:	4619      	mov	r1, r3
 8002d1a:	480d      	ldr	r0, [pc, #52]	; (8002d50 <MX_TIM2_Init+0x98>)
 8002d1c:	f004 f837 	bl	8006d8e <HAL_TIM_ConfigClockSource>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002d26:	f000 f901 	bl	8002f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d32:	1d3b      	adds	r3, r7, #4
 8002d34:	4619      	mov	r1, r3
 8002d36:	4806      	ldr	r0, [pc, #24]	; (8002d50 <MX_TIM2_Init+0x98>)
 8002d38:	f004 fa18 	bl	800716c <HAL_TIMEx_MasterConfigSynchronization>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002d42:	f000 f8f3 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d46:	bf00      	nop
 8002d48:	3720      	adds	r7, #32
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000444 	.word	0x20000444

08002d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d5a:	f107 030c 	add.w	r3, r7, #12
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	605a      	str	r2, [r3, #4]
 8002d64:	609a      	str	r2, [r3, #8]
 8002d66:	60da      	str	r2, [r3, #12]
 8002d68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6a:	4b23      	ldr	r3, [pc, #140]	; (8002df8 <MX_GPIO_Init+0xa4>)
 8002d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6e:	4a22      	ldr	r2, [pc, #136]	; (8002df8 <MX_GPIO_Init+0xa4>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d76:	4b20      	ldr	r3, [pc, #128]	; (8002df8 <MX_GPIO_Init+0xa4>)
 8002d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d82:	4b1d      	ldr	r3, [pc, #116]	; (8002df8 <MX_GPIO_Init+0xa4>)
 8002d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d86:	4a1c      	ldr	r2, [pc, #112]	; (8002df8 <MX_GPIO_Init+0xa4>)
 8002d88:	f043 0302 	orr.w	r3, r3, #2
 8002d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d8e:	4b1a      	ldr	r3, [pc, #104]	; (8002df8 <MX_GPIO_Init+0xa4>)
 8002d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	607b      	str	r3, [r7, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin, GPIO_PIN_RESET);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002da4:	f002 f8b2 	bl	8004f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DC_Pin, GPIO_PIN_RESET);
 8002da8:	2200      	movs	r2, #0
 8002daa:	2110      	movs	r1, #16
 8002dac:	4813      	ldr	r0, [pc, #76]	; (8002dfc <MX_GPIO_Init+0xa8>)
 8002dae:	f002 f8ad 	bl	8004f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Cout_Pin Ccharge_Pin CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8002db2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002db6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002db8:	2301      	movs	r3, #1
 8002dba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc4:	f107 030c 	add.w	r3, r7, #12
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dce:	f001 ff1b 	bl	8004c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PulseOUT_Pin S2_Pin DC_Pin */
  GPIO_InitStruct.Pin = DC_Pin;
 8002dd2:	2310      	movs	r3, #16
 8002dd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de2:	f107 030c 	add.w	r3, r7, #12
 8002de6:	4619      	mov	r1, r3
 8002de8:	4804      	ldr	r0, [pc, #16]	; (8002dfc <MX_GPIO_Init+0xa8>)
 8002dea:	f001 ff0d 	bl	8004c08 <HAL_GPIO_Init>
}
 8002dee:	bf00      	nop
 8002df0:	3720      	adds	r7, #32
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	48000400 	.word	0x48000400

08002e00 <delay_us>:
   Error_Handler();
  }
}

void delay_us ( uint16_t us)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  				// set the counter value a 0
 8002e0a:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <delay_us+0x30>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  	// wait for the counter to reach the us input in the parameter
 8002e12:	bf00      	nop
 8002e14:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <delay_us+0x30>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e1a:	88fb      	ldrh	r3, [r7, #6]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d3f9      	bcc.n	8002e14 <delay_us+0x14>
}
 8002e20:	bf00      	nop
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	20000444 	.word	0x20000444

08002e34 <pulse_in>:


uint16_t pulse_in (GPIO_TypeDef *port, uint16_t pin, uint16_t timeout)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	807b      	strh	r3, [r7, #2]
 8002e40:	4613      	mov	r3, r2
 8002e42:	803b      	strh	r3, [r7, #0]
	uint16_t tmp;
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8002e44:	4b1e      	ldr	r3, [pc, #120]	; (8002ec0 <pulse_in+0x8c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(port, pin) == 1){
 8002e4c:	e007      	b.n	8002e5e <pulse_in+0x2a>
		if(__HAL_TIM_GET_COUNTER(&htim2) > timeout) return 0;
 8002e4e:	4b1c      	ldr	r3, [pc, #112]	; (8002ec0 <pulse_in+0x8c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e54:	883b      	ldrh	r3, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d901      	bls.n	8002e5e <pulse_in+0x2a>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e02b      	b.n	8002eb6 <pulse_in+0x82>
	while(HAL_GPIO_ReadPin(port, pin) == 1){
 8002e5e:	887b      	ldrh	r3, [r7, #2]
 8002e60:	4619      	mov	r1, r3
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f002 f83a 	bl	8004edc <HAL_GPIO_ReadPin>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d0ef      	beq.n	8002e4e <pulse_in+0x1a>
	}


	while(HAL_GPIO_ReadPin(port, pin) == 0);
 8002e6e:	bf00      	nop
 8002e70:	887b      	ldrh	r3, [r7, #2]
 8002e72:	4619      	mov	r1, r3
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f002 f831 	bl	8004edc <HAL_GPIO_ReadPin>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0f7      	beq.n	8002e70 <pulse_in+0x3c>
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8002e80:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <pulse_in+0x8c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2200      	movs	r2, #0
 8002e86:	625a      	str	r2, [r3, #36]	; 0x24


	while (__HAL_TIM_GET_COUNTER(&htim2) < timeout){
 8002e88:	e00e      	b.n	8002ea8 <pulse_in+0x74>
		if(HAL_GPIO_ReadPin(port, pin) == 0){
 8002e8a:	887b      	ldrh	r3, [r7, #2]
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f002 f824 	bl	8004edc <HAL_GPIO_ReadPin>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d104      	bne.n	8002ea4 <pulse_in+0x70>
			tmp = __HAL_TIM_GET_COUNTER(&htim2);
 8002e9a:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <pulse_in+0x8c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	81fb      	strh	r3, [r7, #14]
			break;
 8002ea2:	e007      	b.n	8002eb4 <pulse_in+0x80>
		}
		tmp = 0;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	81fb      	strh	r3, [r7, #14]
	while (__HAL_TIM_GET_COUNTER(&htim2) < timeout){
 8002ea8:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <pulse_in+0x8c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eae:	883b      	ldrh	r3, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d3ea      	bcc.n	8002e8a <pulse_in+0x56>
	}
	return tmp;
 8002eb4:	89fb      	ldrh	r3, [r7, #14]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000444 	.word	0x20000444

08002ec4 <set_gpio>:
void set_gpio(GPIO_TypeDef *port, uint16_t pin, uint32_t Mode, uint32_t Pull ){
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	; 0x28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	607a      	str	r2, [r7, #4]
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	817b      	strh	r3, [r7, #10]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed4:	f107 0314 	add.w	r3, r7, #20
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = pin;
 8002ee4:	897b      	ldrh	r3, [r7, #10]
 8002ee6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = Mode;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = Pull;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 8002ef4:	f107 0314 	add.w	r3, r7, #20
 8002ef8:	4619      	mov	r1, r3
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f001 fe84 	bl	8004c08 <HAL_GPIO_Init>

}
 8002f00:	bf00      	nop
 8002f02:	3728      	adds	r7, #40	; 0x28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a04      	ldr	r2, [pc, #16]	; (8002f28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d101      	bne.n	8002f1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002f1a:	f000 fab1 	bl	8003480 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40001000 	.word	0x40001000

08002f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f30:	b672      	cpsid	i
}
 8002f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f34:	e7fe      	b.n	8002f34 <Error_Handler+0x8>
	...

08002f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3e:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <HAL_MspInit+0x44>)
 8002f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f42:	4a0e      	ldr	r2, [pc, #56]	; (8002f7c <HAL_MspInit+0x44>)
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	6613      	str	r3, [r2, #96]	; 0x60
 8002f4a:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <HAL_MspInit+0x44>)
 8002f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	607b      	str	r3, [r7, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f56:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <HAL_MspInit+0x44>)
 8002f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5a:	4a08      	ldr	r2, [pc, #32]	; (8002f7c <HAL_MspInit+0x44>)
 8002f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f60:	6593      	str	r3, [r2, #88]	; 0x58
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <HAL_MspInit+0x44>)
 8002f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000

08002f80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b09e      	sub	sp, #120	; 0x78
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f88:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	609a      	str	r2, [r3, #8]
 8002f94:	60da      	str	r2, [r3, #12]
 8002f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f98:	f107 0310 	add.w	r3, r7, #16
 8002f9c:	2254      	movs	r2, #84	; 0x54
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f004 f991 	bl	80072c8 <memset>
  if(hadc->Instance==ADC1)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a25      	ldr	r2, [pc, #148]	; (8003040 <HAL_ADC_MspInit+0xc0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d143      	bne.n	8003038 <HAL_ADC_MspInit+0xb8>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002fb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fb4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002fb6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002fba:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002fc4:	2310      	movs	r3, #16
 8002fc6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002fc8:	2307      	movs	r3, #7
 8002fca:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002fd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fda:	f107 0310 	add.w	r3, r7, #16
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f002 fe62 	bl	8005ca8 <HAL_RCCEx_PeriphCLKConfig>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8002fea:	f7ff ff9f 	bl	8002f2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002fee:	4b15      	ldr	r3, [pc, #84]	; (8003044 <HAL_ADC_MspInit+0xc4>)
 8002ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff2:	4a14      	ldr	r2, [pc, #80]	; (8003044 <HAL_ADC_MspInit+0xc4>)
 8002ff4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ffa:	4b12      	ldr	r3, [pc, #72]	; (8003044 <HAL_ADC_MspInit+0xc4>)
 8002ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003006:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <HAL_ADC_MspInit+0xc4>)
 8003008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300a:	4a0e      	ldr	r2, [pc, #56]	; (8003044 <HAL_ADC_MspInit+0xc4>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003012:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <HAL_ADC_MspInit+0xc4>)
 8003014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	60bb      	str	r3, [r7, #8]
 800301c:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = Rref_Pin|Rread_Pin|ModePin_Pin|Cread_Pin;
 800301e:	2327      	movs	r3, #39	; 0x27
 8003020:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003022:	230b      	movs	r3, #11
 8003024:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003026:	2300      	movs	r3, #0
 8003028:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800302e:	4619      	mov	r1, r3
 8003030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003034:	f001 fde8 	bl	8004c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003038:	bf00      	nop
 800303a:	3778      	adds	r7, #120	; 0x78
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	50040000 	.word	0x50040000
 8003044:	40021000 	.word	0x40021000

08003048 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08a      	sub	sp, #40	; 0x28
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003050:	f107 0314 	add.w	r3, r7, #20
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	60da      	str	r2, [r3, #12]
 800305e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a17      	ldr	r2, [pc, #92]	; (80030c4 <HAL_SPI_MspInit+0x7c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d127      	bne.n	80030ba <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800306a:	4b17      	ldr	r3, [pc, #92]	; (80030c8 <HAL_SPI_MspInit+0x80>)
 800306c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306e:	4a16      	ldr	r2, [pc, #88]	; (80030c8 <HAL_SPI_MspInit+0x80>)
 8003070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003074:	6593      	str	r3, [r2, #88]	; 0x58
 8003076:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <HAL_SPI_MspInit+0x80>)
 8003078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003082:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <HAL_SPI_MspInit+0x80>)
 8003084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003086:	4a10      	ldr	r2, [pc, #64]	; (80030c8 <HAL_SPI_MspInit+0x80>)
 8003088:	f043 0302 	orr.w	r3, r3, #2
 800308c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800308e:	4b0e      	ldr	r3, [pc, #56]	; (80030c8 <HAL_SPI_MspInit+0x80>)
 8003090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800309a:	2328      	movs	r3, #40	; 0x28
 800309c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309e:	2302      	movs	r3, #2
 80030a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a6:	2303      	movs	r3, #3
 80030a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80030aa:	2306      	movs	r3, #6
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ae:	f107 0314 	add.w	r3, r7, #20
 80030b2:	4619      	mov	r1, r3
 80030b4:	4805      	ldr	r0, [pc, #20]	; (80030cc <HAL_SPI_MspInit+0x84>)
 80030b6:	f001 fda7 	bl	8004c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80030ba:	bf00      	nop
 80030bc:	3728      	adds	r7, #40	; 0x28
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40003c00 	.word	0x40003c00
 80030c8:	40021000 	.word	0x40021000
 80030cc:	48000400 	.word	0x48000400

080030d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a13      	ldr	r2, [pc, #76]	; (800312c <HAL_TIM_Base_MspInit+0x5c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d10c      	bne.n	80030fc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030e2:	4b13      	ldr	r3, [pc, #76]	; (8003130 <HAL_TIM_Base_MspInit+0x60>)
 80030e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e6:	4a12      	ldr	r2, [pc, #72]	; (8003130 <HAL_TIM_Base_MspInit+0x60>)
 80030e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030ec:	6613      	str	r3, [r2, #96]	; 0x60
 80030ee:	4b10      	ldr	r3, [pc, #64]	; (8003130 <HAL_TIM_Base_MspInit+0x60>)
 80030f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80030fa:	e010      	b.n	800311e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003104:	d10b      	bne.n	800311e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003106:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <HAL_TIM_Base_MspInit+0x60>)
 8003108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310a:	4a09      	ldr	r2, [pc, #36]	; (8003130 <HAL_TIM_Base_MspInit+0x60>)
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	6593      	str	r3, [r2, #88]	; 0x58
 8003112:	4b07      	ldr	r3, [pc, #28]	; (8003130 <HAL_TIM_Base_MspInit+0x60>)
 8003114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	60bb      	str	r3, [r7, #8]
 800311c:	68bb      	ldr	r3, [r7, #8]
}
 800311e:	bf00      	nop
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40012c00 	.word	0x40012c00
 8003130:	40021000 	.word	0x40021000

08003134 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08c      	sub	sp, #48	; 0x30
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003144:	2200      	movs	r2, #0
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	2036      	movs	r0, #54	; 0x36
 800314a:	f001 fd33 	bl	8004bb4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800314e:	2036      	movs	r0, #54	; 0x36
 8003150:	f001 fd4c 	bl	8004bec <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003154:	4b1e      	ldr	r3, [pc, #120]	; (80031d0 <HAL_InitTick+0x9c>)
 8003156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003158:	4a1d      	ldr	r2, [pc, #116]	; (80031d0 <HAL_InitTick+0x9c>)
 800315a:	f043 0310 	orr.w	r3, r3, #16
 800315e:	6593      	str	r3, [r2, #88]	; 0x58
 8003160:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <HAL_InitTick+0x9c>)
 8003162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800316c:	f107 0210 	add.w	r2, r7, #16
 8003170:	f107 0314 	add.w	r3, r7, #20
 8003174:	4611      	mov	r1, r2
 8003176:	4618      	mov	r0, r3
 8003178:	f002 fd04 	bl	8005b84 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800317c:	f002 fcec 	bl	8005b58 <HAL_RCC_GetPCLK1Freq>
 8003180:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003184:	4a13      	ldr	r2, [pc, #76]	; (80031d4 <HAL_InitTick+0xa0>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	0c9b      	lsrs	r3, r3, #18
 800318c:	3b01      	subs	r3, #1
 800318e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003190:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <HAL_InitTick+0xa4>)
 8003192:	4a12      	ldr	r2, [pc, #72]	; (80031dc <HAL_InitTick+0xa8>)
 8003194:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003196:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <HAL_InitTick+0xa4>)
 8003198:	f240 32e7 	movw	r2, #999	; 0x3e7
 800319c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800319e:	4a0e      	ldr	r2, [pc, #56]	; (80031d8 <HAL_InitTick+0xa4>)
 80031a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80031a4:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <HAL_InitTick+0xa4>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031aa:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <HAL_InitTick+0xa4>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80031b0:	4809      	ldr	r0, [pc, #36]	; (80031d8 <HAL_InitTick+0xa4>)
 80031b2:	f003 fbd5 	bl	8006960 <HAL_TIM_Base_Init>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d104      	bne.n	80031c6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80031bc:	4806      	ldr	r0, [pc, #24]	; (80031d8 <HAL_InitTick+0xa4>)
 80031be:	f003 fc73 	bl	8006aa8 <HAL_TIM_Base_Start_IT>
 80031c2:	4603      	mov	r3, r0
 80031c4:	e000      	b.n	80031c8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3730      	adds	r7, #48	; 0x30
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40021000 	.word	0x40021000
 80031d4:	431bde83 	.word	0x431bde83
 80031d8:	20000494 	.word	0x20000494
 80031dc:	40001000 	.word	0x40001000

080031e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031e4:	e7fe      	b.n	80031e4 <NMI_Handler+0x4>

080031e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031e6:	b480      	push	{r7}
 80031e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031ea:	e7fe      	b.n	80031ea <HardFault_Handler+0x4>

080031ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031f0:	e7fe      	b.n	80031f0 <MemManage_Handler+0x4>

080031f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031f2:	b480      	push	{r7}
 80031f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031f6:	e7fe      	b.n	80031f6 <BusFault_Handler+0x4>

080031f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031fc:	e7fe      	b.n	80031fc <UsageFault_Handler+0x4>

080031fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031fe:	b480      	push	{r7}
 8003200:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003202:	bf00      	nop
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003210:	bf00      	nop
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800321a:	b480      	push	{r7}
 800321c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800321e:	bf00      	nop
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800322c:	bf00      	nop
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
	...

08003238 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800323c:	4802      	ldr	r0, [pc, #8]	; (8003248 <TIM6_DAC_IRQHandler+0x10>)
 800323e:	f003 fc87 	bl	8006b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003242:	bf00      	nop
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	20000494 	.word	0x20000494

0800324c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
	return 1;
 8003250:	2301      	movs	r3, #1
}
 8003252:	4618      	mov	r0, r3
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <_kill>:

int _kill(int pid, int sig)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003266:	f004 f805 	bl	8007274 <__errno>
 800326a:	4603      	mov	r3, r0
 800326c:	2216      	movs	r2, #22
 800326e:	601a      	str	r2, [r3, #0]
	return -1;
 8003270:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003274:	4618      	mov	r0, r3
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <_exit>:

void _exit (int status)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003284:	f04f 31ff 	mov.w	r1, #4294967295
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7ff ffe7 	bl	800325c <_kill>
	while (1) {}		/* Make sure we hang here */
 800328e:	e7fe      	b.n	800328e <_exit+0x12>

08003290 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	e00a      	b.n	80032b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80032a2:	f3af 8000 	nop.w
 80032a6:	4601      	mov	r1, r0
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	1c5a      	adds	r2, r3, #1
 80032ac:	60ba      	str	r2, [r7, #8]
 80032ae:	b2ca      	uxtb	r2, r1
 80032b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	3301      	adds	r3, #1
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	429a      	cmp	r2, r3
 80032be:	dbf0      	blt.n	80032a2 <_read+0x12>
	}

return len;
 80032c0:	687b      	ldr	r3, [r7, #4]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b086      	sub	sp, #24
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	e009      	b.n	80032f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	1c5a      	adds	r2, r3, #1
 80032e0:	60ba      	str	r2, [r7, #8]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	3301      	adds	r3, #1
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	dbf1      	blt.n	80032dc <_write+0x12>
	}
	return len;
 80032f8:	687b      	ldr	r3, [r7, #4]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <_close>:

int _close(int file)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
	return -1;
 800330a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800332a:	605a      	str	r2, [r3, #4]
	return 0;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <_isatty>:

int _isatty(int file)
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
	return 1;
 8003342:	2301      	movs	r3, #1
}
 8003344:	4618      	mov	r0, r3
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
	return 0;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
	...

0800336c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003374:	4a14      	ldr	r2, [pc, #80]	; (80033c8 <_sbrk+0x5c>)
 8003376:	4b15      	ldr	r3, [pc, #84]	; (80033cc <_sbrk+0x60>)
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003380:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <_sbrk+0x64>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d102      	bne.n	800338e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003388:	4b11      	ldr	r3, [pc, #68]	; (80033d0 <_sbrk+0x64>)
 800338a:	4a12      	ldr	r2, [pc, #72]	; (80033d4 <_sbrk+0x68>)
 800338c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800338e:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <_sbrk+0x64>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4413      	add	r3, r2
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	429a      	cmp	r2, r3
 800339a:	d207      	bcs.n	80033ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800339c:	f003 ff6a 	bl	8007274 <__errno>
 80033a0:	4603      	mov	r3, r0
 80033a2:	220c      	movs	r2, #12
 80033a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033a6:	f04f 33ff 	mov.w	r3, #4294967295
 80033aa:	e009      	b.n	80033c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033ac:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <_sbrk+0x64>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033b2:	4b07      	ldr	r3, [pc, #28]	; (80033d0 <_sbrk+0x64>)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4413      	add	r3, r2
 80033ba:	4a05      	ldr	r2, [pc, #20]	; (80033d0 <_sbrk+0x64>)
 80033bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033be:	68fb      	ldr	r3, [r7, #12]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	20010000 	.word	0x20010000
 80033cc:	00000400 	.word	0x00000400
 80033d0:	200002c4 	.word	0x200002c4
 80033d4:	200004f8 	.word	0x200004f8

080033d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80033dc:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <SystemInit+0x20>)
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e2:	4a05      	ldr	r2, [pc, #20]	; (80033f8 <SystemInit+0x20>)
 80033e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80033ec:	bf00      	nop
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	e000ed00 	.word	0xe000ed00

080033fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80033fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003434 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003400:	f7ff ffea 	bl	80033d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003404:	480c      	ldr	r0, [pc, #48]	; (8003438 <LoopForever+0x6>)
  ldr r1, =_edata
 8003406:	490d      	ldr	r1, [pc, #52]	; (800343c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003408:	4a0d      	ldr	r2, [pc, #52]	; (8003440 <LoopForever+0xe>)
  movs r3, #0
 800340a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800340c:	e002      	b.n	8003414 <LoopCopyDataInit>

0800340e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800340e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003412:	3304      	adds	r3, #4

08003414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003418:	d3f9      	bcc.n	800340e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800341a:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <LoopForever+0x12>)
  ldr r4, =_ebss
 800341c:	4c0a      	ldr	r4, [pc, #40]	; (8003448 <LoopForever+0x16>)
  movs r3, #0
 800341e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003420:	e001      	b.n	8003426 <LoopFillZerobss>

08003422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003424:	3204      	adds	r2, #4

08003426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003428:	d3fb      	bcc.n	8003422 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800342a:	f003 ff29 	bl	8007280 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800342e:	f7fd ff8b 	bl	8001348 <main>

08003432 <LoopForever>:

LoopForever:
    b LoopForever
 8003432:	e7fe      	b.n	8003432 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003434:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800343c:	20000294 	.word	0x20000294
  ldr r2, =_sidata
 8003440:	0800e00c 	.word	0x0800e00c
  ldr r2, =_sbss
 8003444:	20000298 	.word	0x20000298
  ldr r4, =_ebss
 8003448:	200004f4 	.word	0x200004f4

0800344c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800344c:	e7fe      	b.n	800344c <ADC1_IRQHandler>

0800344e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003458:	2003      	movs	r0, #3
 800345a:	f001 fba0 	bl	8004b9e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800345e:	200f      	movs	r0, #15
 8003460:	f7ff fe68 	bl	8003134 <HAL_InitTick>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	71fb      	strb	r3, [r7, #7]
 800346e:	e001      	b.n	8003474 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003470:	f7ff fd62 	bl	8002f38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003474:	79fb      	ldrb	r3, [r7, #7]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <HAL_IncTick+0x20>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_IncTick+0x24>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4413      	add	r3, r2
 8003490:	4a04      	ldr	r2, [pc, #16]	; (80034a4 <HAL_IncTick+0x24>)
 8003492:	6013      	str	r3, [r2, #0]
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	200000b8 	.word	0x200000b8
 80034a4:	200004e0 	.word	0x200004e0

080034a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return uwTick;
 80034ac:	4b03      	ldr	r3, [pc, #12]	; (80034bc <HAL_GetTick+0x14>)
 80034ae:	681b      	ldr	r3, [r3, #0]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	200004e0 	.word	0x200004e0

080034c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034c8:	f7ff ffee 	bl	80034a8 <HAL_GetTick>
 80034cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d8:	d005      	beq.n	80034e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80034da:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <HAL_Delay+0x44>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4413      	add	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034e6:	bf00      	nop
 80034e8:	f7ff ffde 	bl	80034a8 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d8f7      	bhi.n	80034e8 <HAL_Delay+0x28>
  {
  }
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	200000b8 	.word	0x200000b8

08003508 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	609a      	str	r2, [r3, #8]
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	609a      	str	r2, [r3, #8]
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003564:	4618      	mov	r0, r3
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
 800357c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	3360      	adds	r3, #96	; 0x60
 8003582:	461a      	mov	r2, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <LL_ADC_SetOffset+0x44>)
 8003592:	4013      	ands	r3, r2
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	4313      	orrs	r3, r2
 80035a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80035a8:	bf00      	nop
 80035aa:	371c      	adds	r7, #28
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	03fff000 	.word	0x03fff000

080035b8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3360      	adds	r3, #96	; 0x60
 80035c6:	461a      	mov	r2, r3
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	3360      	adds	r3, #96	; 0x60
 80035f4:	461a      	mov	r2, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	431a      	orrs	r2, r3
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800360e:	bf00      	nop
 8003610:	371c      	adds	r7, #28
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	3330      	adds	r3, #48	; 0x30
 8003650:	461a      	mov	r2, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	0a1b      	lsrs	r3, r3, #8
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	f003 030c 	and.w	r3, r3, #12
 800365c:	4413      	add	r3, r2
 800365e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f003 031f 	and.w	r3, r3, #31
 800366a:	211f      	movs	r1, #31
 800366c:	fa01 f303 	lsl.w	r3, r1, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	401a      	ands	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	0e9b      	lsrs	r3, r3, #26
 8003678:	f003 011f 	and.w	r1, r3, #31
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f003 031f 	and.w	r3, r3, #31
 8003682:	fa01 f303 	lsl.w	r3, r1, r3
 8003686:	431a      	orrs	r2, r3
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800368c:	bf00      	nop
 800368e:	371c      	adds	r7, #28
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	3314      	adds	r3, #20
 80036a8:	461a      	mov	r2, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	0e5b      	lsrs	r3, r3, #25
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	4413      	add	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	0d1b      	lsrs	r3, r3, #20
 80036c0:	f003 031f 	and.w	r3, r3, #31
 80036c4:	2107      	movs	r1, #7
 80036c6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ca:	43db      	mvns	r3, r3
 80036cc:	401a      	ands	r2, r3
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	0d1b      	lsrs	r3, r3, #20
 80036d2:	f003 031f 	and.w	r3, r3, #31
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	fa01 f303 	lsl.w	r3, r1, r3
 80036dc:	431a      	orrs	r2, r3
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80036e2:	bf00      	nop
 80036e4:	371c      	adds	r7, #28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
	...

080036f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003708:	43db      	mvns	r3, r3
 800370a:	401a      	ands	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f003 0318 	and.w	r3, r3, #24
 8003712:	4908      	ldr	r1, [pc, #32]	; (8003734 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003714:	40d9      	lsrs	r1, r3
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	400b      	ands	r3, r1
 800371a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800371e:	431a      	orrs	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003726:	bf00      	nop
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	0007ffff 	.word	0x0007ffff

08003738 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003748:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6093      	str	r3, [r2, #8]
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800376c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003770:	d101      	bne.n	8003776 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003794:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003798:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037c0:	d101      	bne.n	80037c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037e8:	f043 0201 	orr.w	r2, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800380c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003810:	f043 0202 	orr.w	r2, r3, #2
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <LL_ADC_IsEnabled+0x18>
 8003838:	2301      	movs	r3, #1
 800383a:	e000      	b.n	800383e <LL_ADC_IsEnabled+0x1a>
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b02      	cmp	r3, #2
 800385c:	d101      	bne.n	8003862 <LL_ADC_IsDisableOngoing+0x18>
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <LL_ADC_IsDisableOngoing+0x1a>
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003880:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003884:	f043 0204 	orr.w	r2, r3, #4
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038ac:	f043 0210 	orr.w	r2, r3, #16
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d101      	bne.n	80038d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80038d4:	2301      	movs	r3, #1
 80038d6:	e000      	b.n	80038da <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038fa:	f043 0220 	orr.w	r2, r3, #32
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b08      	cmp	r3, #8
 8003920:	d101      	bne.n	8003926 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003940:	2300      	movs	r3, #0
 8003942:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e12c      	b.n	8003ba8 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003958:	2b00      	cmp	r3, #0
 800395a:	d109      	bne.n	8003970 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff fb0f 	bl	8002f80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff fef1 	bl	800375c <LL_ADC_IsDeepPowerDownEnabled>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d004      	beq.n	800398a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff fed7 	bl	8003738 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff ff0c 	bl	80037ac <LL_ADC_IsInternalRegulatorEnabled>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d115      	bne.n	80039c6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff fef0 	bl	8003784 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039a4:	4b82      	ldr	r3, [pc, #520]	; (8003bb0 <HAL_ADC_Init+0x27c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	099b      	lsrs	r3, r3, #6
 80039aa:	4a82      	ldr	r2, [pc, #520]	; (8003bb4 <HAL_ADC_Init+0x280>)
 80039ac:	fba2 2303 	umull	r2, r3, r2, r3
 80039b0:	099b      	lsrs	r3, r3, #6
 80039b2:	3301      	adds	r3, #1
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80039b8:	e002      	b.n	80039c0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	3b01      	subs	r3, #1
 80039be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f9      	bne.n	80039ba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff feee 	bl	80037ac <LL_ADC_IsInternalRegulatorEnabled>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10d      	bne.n	80039f2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039da:	f043 0210 	orr.w	r2, r3, #16
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e6:	f043 0201 	orr.w	r2, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff ff62 	bl	80038c0 <LL_ADC_REG_IsConversionOngoing>
 80039fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a02:	f003 0310 	and.w	r3, r3, #16
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f040 80c5 	bne.w	8003b96 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f040 80c1 	bne.w	8003b96 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a18:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003a1c:	f043 0202 	orr.w	r2, r3, #2
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff fefb 	bl	8003824 <LL_ADC_IsEnabled>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10b      	bne.n	8003a4c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a34:	4860      	ldr	r0, [pc, #384]	; (8003bb8 <HAL_ADC_Init+0x284>)
 8003a36:	f7ff fef5 	bl	8003824 <LL_ADC_IsEnabled>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d105      	bne.n	8003a4c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	4619      	mov	r1, r3
 8003a46:	485d      	ldr	r0, [pc, #372]	; (8003bbc <HAL_ADC_Init+0x288>)
 8003a48:	f7ff fd5e 	bl	8003508 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	7e5b      	ldrb	r3, [r3, #25]
 8003a50:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a56:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003a5c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003a62:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a6a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d106      	bne.n	8003a88 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	045b      	lsls	r3, r3, #17
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d009      	beq.n	8003aa4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	4b45      	ldr	r3, [pc, #276]	; (8003bc0 <HAL_ADC_Init+0x28c>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6812      	ldr	r2, [r2, #0]
 8003ab2:	69b9      	ldr	r1, [r7, #24]
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff feff 	bl	80038c0 <LL_ADC_REG_IsConversionOngoing>
 8003ac2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff ff20 	bl	800390e <LL_ADC_INJ_IsConversionOngoing>
 8003ace:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d13d      	bne.n	8003b52 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d13a      	bne.n	8003b52 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ae0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ae8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003af8:	f023 0302 	bic.w	r3, r3, #2
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6812      	ldr	r2, [r2, #0]
 8003b00:	69b9      	ldr	r1, [r7, #24]
 8003b02:	430b      	orrs	r3, r1
 8003b04:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d118      	bne.n	8003b42 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003b1a:	f023 0304 	bic.w	r3, r3, #4
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b26:	4311      	orrs	r1, r2
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003b2c:	4311      	orrs	r1, r2
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b32:	430a      	orrs	r2, r1
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	611a      	str	r2, [r3, #16]
 8003b40:	e007      	b.n	8003b52 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0201 	bic.w	r2, r2, #1
 8003b50:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d10c      	bne.n	8003b74 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	f023 010f 	bic.w	r1, r3, #15
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	1e5a      	subs	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	631a      	str	r2, [r3, #48]	; 0x30
 8003b72:	e007      	b.n	8003b84 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 020f 	bic.w	r2, r2, #15
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b88:	f023 0303 	bic.w	r3, r3, #3
 8003b8c:	f043 0201 	orr.w	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	655a      	str	r2, [r3, #84]	; 0x54
 8003b94:	e007      	b.n	8003ba6 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9a:	f043 0210 	orr.w	r2, r3, #16
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ba6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3720      	adds	r7, #32
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	200000b0 	.word	0x200000b0
 8003bb4:	053e2d63 	.word	0x053e2d63
 8003bb8:	50040000 	.word	0x50040000
 8003bbc:	50040300 	.word	0x50040300
 8003bc0:	fff0c007 	.word	0xfff0c007

08003bc4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff fe75 	bl	80038c0 <LL_ADC_REG_IsConversionOngoing>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d14f      	bne.n	8003c7c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <HAL_ADC_Start+0x26>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e04b      	b.n	8003c82 <HAL_ADC_Start+0xbe>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 fdb4 	bl	8004760 <ADC_Enable>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d137      	bne.n	8003c72 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c06:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c0a:	f023 0301 	bic.w	r3, r3, #1
 8003c0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c22:	d106      	bne.n	8003c32 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c28:	f023 0206 	bic.w	r2, r3, #6
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	659a      	str	r2, [r3, #88]	; 0x58
 8003c30:	e002      	b.n	8003c38 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	221c      	movs	r2, #28
 8003c3e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d007      	beq.n	8003c66 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff fe00 	bl	8003870 <LL_ADC_REG_StartConversion>
 8003c70:	e006      	b.n	8003c80 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003c7a:	e001      	b.n	8003c80 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b084      	sub	sp, #16
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_ADC_Stop+0x16>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e023      	b.n	8003ce8 <HAL_ADC_Stop+0x5e>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003ca8:	2103      	movs	r1, #3
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 fc9c 	bl	80045e8 <ADC_ConversionStop>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003cb4:	7bfb      	ldrb	r3, [r7, #15]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d111      	bne.n	8003cde <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 fdd6 	bl	800486c <ADC_Disable>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d109      	bne.n	8003cde <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003cd2:	f023 0301 	bic.w	r3, r3, #1
 8003cd6:	f043 0201 	orr.w	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d102      	bne.n	8003d08 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003d02:	2308      	movs	r3, #8
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	e010      	b.n	8003d2a <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d007      	beq.n	8003d26 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1a:	f043 0220 	orr.w	r2, r3, #32
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e06f      	b.n	8003e06 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003d26:	2304      	movs	r3, #4
 8003d28:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003d2a:	f7ff fbbd 	bl	80034a8 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003d30:	e021      	b.n	8003d76 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d38:	d01d      	beq.n	8003d76 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003d3a:	f7ff fbb5 	bl	80034a8 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d302      	bcc.n	8003d50 <HAL_ADC_PollForConversion+0x60>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d112      	bne.n	8003d76 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10b      	bne.n	8003d76 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d62:	f043 0204 	orr.w	r2, r3, #4
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e047      	b.n	8003e06 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0d6      	beq.n	8003d32 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d88:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff fc40 	bl	800361a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d01c      	beq.n	8003dda <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	7e5b      	ldrb	r3, [r3, #25]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d118      	bne.n	8003dda <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d111      	bne.n	8003dda <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d105      	bne.n	8003dda <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd2:	f043 0201 	orr.w	r2, r3, #1
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d104      	bne.n	8003df2 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2208      	movs	r2, #8
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	e008      	b.n	8003e04 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d103      	bne.n	8003e04 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	220c      	movs	r2, #12
 8003e02:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b0b6      	sub	sp, #216	; 0xd8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d101      	bne.n	8003e4a <HAL_ADC_ConfigChannel+0x22>
 8003e46:	2302      	movs	r3, #2
 8003e48:	e3b9      	b.n	80045be <HAL_ADC_ConfigChannel+0x796>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff fd32 	bl	80038c0 <LL_ADC_REG_IsConversionOngoing>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f040 839e 	bne.w	80045a0 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b05      	cmp	r3, #5
 8003e6a:	d824      	bhi.n	8003eb6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	3b02      	subs	r3, #2
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	d81b      	bhi.n	8003eae <HAL_ADC_ConfigChannel+0x86>
 8003e76:	a201      	add	r2, pc, #4	; (adr r2, 8003e7c <HAL_ADC_ConfigChannel+0x54>)
 8003e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7c:	08003e8d 	.word	0x08003e8d
 8003e80:	08003e95 	.word	0x08003e95
 8003e84:	08003e9d 	.word	0x08003e9d
 8003e88:	08003ea5 	.word	0x08003ea5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	220c      	movs	r2, #12
 8003e90:	605a      	str	r2, [r3, #4]
          break;
 8003e92:	e011      	b.n	8003eb8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	2212      	movs	r2, #18
 8003e98:	605a      	str	r2, [r3, #4]
          break;
 8003e9a:	e00d      	b.n	8003eb8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	2218      	movs	r2, #24
 8003ea0:	605a      	str	r2, [r3, #4]
          break;
 8003ea2:	e009      	b.n	8003eb8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003eaa:	605a      	str	r2, [r3, #4]
          break;
 8003eac:	e004      	b.n	8003eb8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2206      	movs	r2, #6
 8003eb2:	605a      	str	r2, [r3, #4]
          break;
 8003eb4:	e000      	b.n	8003eb8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003eb6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	6859      	ldr	r1, [r3, #4]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f7ff fbbb 	bl	8003640 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff fcf6 	bl	80038c0 <LL_ADC_REG_IsConversionOngoing>
 8003ed4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff fd16 	bl	800390e <LL_ADC_INJ_IsConversionOngoing>
 8003ee2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ee6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f040 81a6 	bne.w	800423c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ef0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f040 81a1 	bne.w	800423c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6818      	ldr	r0, [r3, #0]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	6819      	ldr	r1, [r3, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	461a      	mov	r2, r3
 8003f08:	f7ff fbc6 	bl	8003698 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	695a      	ldr	r2, [r3, #20]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	08db      	lsrs	r3, r3, #3
 8003f18:	f003 0303 	and.w	r3, r3, #3
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d00a      	beq.n	8003f44 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	6919      	ldr	r1, [r3, #16]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f3e:	f7ff fb17 	bl	8003570 <LL_ADC_SetOffset>
 8003f42:	e17b      	b.n	800423c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2100      	movs	r1, #0
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff fb34 	bl	80035b8 <LL_ADC_GetOffsetChannel>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10a      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x148>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2100      	movs	r1, #0
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff fb29 	bl	80035b8 <LL_ADC_GetOffsetChannel>
 8003f66:	4603      	mov	r3, r0
 8003f68:	0e9b      	lsrs	r3, r3, #26
 8003f6a:	f003 021f 	and.w	r2, r3, #31
 8003f6e:	e01e      	b.n	8003fae <HAL_ADC_ConfigChannel+0x186>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2100      	movs	r1, #0
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff fb1e 	bl	80035b8 <LL_ADC_GetOffsetChannel>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f86:	fa93 f3a3 	rbit	r3, r3
 8003f8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003f9e:	2320      	movs	r3, #32
 8003fa0:	e004      	b.n	8003fac <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003fa2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003fa6:	fab3 f383 	clz	r3, r3
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d105      	bne.n	8003fc6 <HAL_ADC_ConfigChannel+0x19e>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	0e9b      	lsrs	r3, r3, #26
 8003fc0:	f003 031f 	and.w	r3, r3, #31
 8003fc4:	e018      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x1d0>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003fd2:	fa93 f3a3 	rbit	r3, r3
 8003fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003fe2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003fea:	2320      	movs	r3, #32
 8003fec:	e004      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003fee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ff2:	fab3 f383 	clz	r3, r3
 8003ff6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d106      	bne.n	800400a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2200      	movs	r2, #0
 8004002:	2100      	movs	r1, #0
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff faed 	bl	80035e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2101      	movs	r1, #1
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff fad1 	bl	80035b8 <LL_ADC_GetOffsetChannel>
 8004016:	4603      	mov	r3, r0
 8004018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x20e>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2101      	movs	r1, #1
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff fac6 	bl	80035b8 <LL_ADC_GetOffsetChannel>
 800402c:	4603      	mov	r3, r0
 800402e:	0e9b      	lsrs	r3, r3, #26
 8004030:	f003 021f 	and.w	r2, r3, #31
 8004034:	e01e      	b.n	8004074 <HAL_ADC_ConfigChannel+0x24c>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2101      	movs	r1, #1
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff fabb 	bl	80035b8 <LL_ADC_GetOffsetChannel>
 8004042:	4603      	mov	r3, r0
 8004044:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004048:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800404c:	fa93 f3a3 	rbit	r3, r3
 8004050:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004054:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004058:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800405c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004064:	2320      	movs	r3, #32
 8004066:	e004      	b.n	8004072 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004068:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800406c:	fab3 f383 	clz	r3, r3
 8004070:	b2db      	uxtb	r3, r3
 8004072:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800407c:	2b00      	cmp	r3, #0
 800407e:	d105      	bne.n	800408c <HAL_ADC_ConfigChannel+0x264>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	0e9b      	lsrs	r3, r3, #26
 8004086:	f003 031f 	and.w	r3, r3, #31
 800408a:	e018      	b.n	80040be <HAL_ADC_ConfigChannel+0x296>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004094:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004098:	fa93 f3a3 	rbit	r3, r3
 800409c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80040a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80040a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80040a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80040b0:	2320      	movs	r3, #32
 80040b2:	e004      	b.n	80040be <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80040b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040b8:	fab3 f383 	clz	r3, r3
 80040bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80040be:	429a      	cmp	r2, r3
 80040c0:	d106      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2200      	movs	r2, #0
 80040c8:	2101      	movs	r1, #1
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7ff fa8a 	bl	80035e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2102      	movs	r1, #2
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff fa6e 	bl	80035b8 <LL_ADC_GetOffsetChannel>
 80040dc:	4603      	mov	r3, r0
 80040de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10a      	bne.n	80040fc <HAL_ADC_ConfigChannel+0x2d4>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2102      	movs	r1, #2
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff fa63 	bl	80035b8 <LL_ADC_GetOffsetChannel>
 80040f2:	4603      	mov	r3, r0
 80040f4:	0e9b      	lsrs	r3, r3, #26
 80040f6:	f003 021f 	and.w	r2, r3, #31
 80040fa:	e01e      	b.n	800413a <HAL_ADC_ConfigChannel+0x312>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2102      	movs	r1, #2
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff fa58 	bl	80035b8 <LL_ADC_GetOffsetChannel>
 8004108:	4603      	mov	r3, r0
 800410a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004112:	fa93 f3a3 	rbit	r3, r3
 8004116:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800411a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800411e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004122:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800412a:	2320      	movs	r3, #32
 800412c:	e004      	b.n	8004138 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800412e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004132:	fab3 f383 	clz	r3, r3
 8004136:	b2db      	uxtb	r3, r3
 8004138:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004142:	2b00      	cmp	r3, #0
 8004144:	d105      	bne.n	8004152 <HAL_ADC_ConfigChannel+0x32a>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	0e9b      	lsrs	r3, r3, #26
 800414c:	f003 031f 	and.w	r3, r3, #31
 8004150:	e016      	b.n	8004180 <HAL_ADC_ConfigChannel+0x358>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800415e:	fa93 f3a3 	rbit	r3, r3
 8004162:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004164:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004166:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800416a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004172:	2320      	movs	r3, #32
 8004174:	e004      	b.n	8004180 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004176:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800417a:	fab3 f383 	clz	r3, r3
 800417e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004180:	429a      	cmp	r2, r3
 8004182:	d106      	bne.n	8004192 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2200      	movs	r2, #0
 800418a:	2102      	movs	r1, #2
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff fa29 	bl	80035e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2103      	movs	r1, #3
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff fa0d 	bl	80035b8 <LL_ADC_GetOffsetChannel>
 800419e:	4603      	mov	r3, r0
 80041a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10a      	bne.n	80041be <HAL_ADC_ConfigChannel+0x396>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2103      	movs	r1, #3
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff fa02 	bl	80035b8 <LL_ADC_GetOffsetChannel>
 80041b4:	4603      	mov	r3, r0
 80041b6:	0e9b      	lsrs	r3, r3, #26
 80041b8:	f003 021f 	and.w	r2, r3, #31
 80041bc:	e017      	b.n	80041ee <HAL_ADC_ConfigChannel+0x3c6>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2103      	movs	r1, #3
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff f9f7 	bl	80035b8 <LL_ADC_GetOffsetChannel>
 80041ca:	4603      	mov	r3, r0
 80041cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041d0:	fa93 f3a3 	rbit	r3, r3
 80041d4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80041d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041d8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80041da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80041e0:	2320      	movs	r3, #32
 80041e2:	e003      	b.n	80041ec <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80041e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041e6:	fab3 f383 	clz	r3, r3
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d105      	bne.n	8004206 <HAL_ADC_ConfigChannel+0x3de>
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	0e9b      	lsrs	r3, r3, #26
 8004200:	f003 031f 	and.w	r3, r3, #31
 8004204:	e011      	b.n	800422a <HAL_ADC_ConfigChannel+0x402>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800420e:	fa93 f3a3 	rbit	r3, r3
 8004212:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004216:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800421e:	2320      	movs	r3, #32
 8004220:	e003      	b.n	800422a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004224:	fab3 f383 	clz	r3, r3
 8004228:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800422a:	429a      	cmp	r2, r3
 800422c:	d106      	bne.n	800423c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2200      	movs	r2, #0
 8004234:	2103      	movs	r1, #3
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff f9d4 	bl	80035e4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff faef 	bl	8003824 <LL_ADC_IsEnabled>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	f040 813f 	bne.w	80044cc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6818      	ldr	r0, [r3, #0]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	6819      	ldr	r1, [r3, #0]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	461a      	mov	r2, r3
 800425c:	f7ff fa48 	bl	80036f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	4a8e      	ldr	r2, [pc, #568]	; (80044a0 <HAL_ADC_ConfigChannel+0x678>)
 8004266:	4293      	cmp	r3, r2
 8004268:	f040 8130 	bne.w	80044cc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10b      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x46c>
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	0e9b      	lsrs	r3, r3, #26
 8004282:	3301      	adds	r3, #1
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	2b09      	cmp	r3, #9
 800428a:	bf94      	ite	ls
 800428c:	2301      	movls	r3, #1
 800428e:	2300      	movhi	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	e019      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x4a0>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800429c:	fa93 f3a3 	rbit	r3, r3
 80042a0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80042a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042a4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80042a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80042ac:	2320      	movs	r3, #32
 80042ae:	e003      	b.n	80042b8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80042b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042b2:	fab3 f383 	clz	r3, r3
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	3301      	adds	r3, #1
 80042ba:	f003 031f 	and.w	r3, r3, #31
 80042be:	2b09      	cmp	r3, #9
 80042c0:	bf94      	ite	ls
 80042c2:	2301      	movls	r3, #1
 80042c4:	2300      	movhi	r3, #0
 80042c6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d079      	beq.n	80043c0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d107      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x4c0>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	0e9b      	lsrs	r3, r3, #26
 80042de:	3301      	adds	r3, #1
 80042e0:	069b      	lsls	r3, r3, #26
 80042e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042e6:	e015      	b.n	8004314 <HAL_ADC_ConfigChannel+0x4ec>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042f0:	fa93 f3a3 	rbit	r3, r3
 80042f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80042f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80042fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004300:	2320      	movs	r3, #32
 8004302:	e003      	b.n	800430c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004304:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004306:	fab3 f383 	clz	r3, r3
 800430a:	b2db      	uxtb	r3, r3
 800430c:	3301      	adds	r3, #1
 800430e:	069b      	lsls	r3, r3, #26
 8004310:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800431c:	2b00      	cmp	r3, #0
 800431e:	d109      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x50c>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	0e9b      	lsrs	r3, r3, #26
 8004326:	3301      	adds	r3, #1
 8004328:	f003 031f 	and.w	r3, r3, #31
 800432c:	2101      	movs	r1, #1
 800432e:	fa01 f303 	lsl.w	r3, r1, r3
 8004332:	e017      	b.n	8004364 <HAL_ADC_ConfigChannel+0x53c>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800433c:	fa93 f3a3 	rbit	r3, r3
 8004340:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004344:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800434c:	2320      	movs	r3, #32
 800434e:	e003      	b.n	8004358 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004352:	fab3 f383 	clz	r3, r3
 8004356:	b2db      	uxtb	r3, r3
 8004358:	3301      	adds	r3, #1
 800435a:	f003 031f 	and.w	r3, r3, #31
 800435e:	2101      	movs	r1, #1
 8004360:	fa01 f303 	lsl.w	r3, r1, r3
 8004364:	ea42 0103 	orr.w	r1, r2, r3
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10a      	bne.n	800438a <HAL_ADC_ConfigChannel+0x562>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	0e9b      	lsrs	r3, r3, #26
 800437a:	3301      	adds	r3, #1
 800437c:	f003 021f 	and.w	r2, r3, #31
 8004380:	4613      	mov	r3, r2
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	4413      	add	r3, r2
 8004386:	051b      	lsls	r3, r3, #20
 8004388:	e018      	b.n	80043bc <HAL_ADC_ConfigChannel+0x594>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004392:	fa93 f3a3 	rbit	r3, r3
 8004396:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800439c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80043a2:	2320      	movs	r3, #32
 80043a4:	e003      	b.n	80043ae <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80043a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043a8:	fab3 f383 	clz	r3, r3
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	3301      	adds	r3, #1
 80043b0:	f003 021f 	and.w	r2, r3, #31
 80043b4:	4613      	mov	r3, r2
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	4413      	add	r3, r2
 80043ba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043bc:	430b      	orrs	r3, r1
 80043be:	e080      	b.n	80044c2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d107      	bne.n	80043dc <HAL_ADC_ConfigChannel+0x5b4>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	0e9b      	lsrs	r3, r3, #26
 80043d2:	3301      	adds	r3, #1
 80043d4:	069b      	lsls	r3, r3, #26
 80043d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043da:	e015      	b.n	8004408 <HAL_ADC_ConfigChannel+0x5e0>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e4:	fa93 f3a3 	rbit	r3, r3
 80043e8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80043ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ec:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80043ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80043f4:	2320      	movs	r3, #32
 80043f6:	e003      	b.n	8004400 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80043f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fa:	fab3 f383 	clz	r3, r3
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	3301      	adds	r3, #1
 8004402:	069b      	lsls	r3, r3, #26
 8004404:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004410:	2b00      	cmp	r3, #0
 8004412:	d109      	bne.n	8004428 <HAL_ADC_ConfigChannel+0x600>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	0e9b      	lsrs	r3, r3, #26
 800441a:	3301      	adds	r3, #1
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	2101      	movs	r1, #1
 8004422:	fa01 f303 	lsl.w	r3, r1, r3
 8004426:	e017      	b.n	8004458 <HAL_ADC_ConfigChannel+0x630>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	fa93 f3a3 	rbit	r3, r3
 8004434:	61fb      	str	r3, [r7, #28]
  return result;
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004440:	2320      	movs	r3, #32
 8004442:	e003      	b.n	800444c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	fab3 f383 	clz	r3, r3
 800444a:	b2db      	uxtb	r3, r3
 800444c:	3301      	adds	r3, #1
 800444e:	f003 031f 	and.w	r3, r3, #31
 8004452:	2101      	movs	r1, #1
 8004454:	fa01 f303 	lsl.w	r3, r1, r3
 8004458:	ea42 0103 	orr.w	r1, r2, r3
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10d      	bne.n	8004484 <HAL_ADC_ConfigChannel+0x65c>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	0e9b      	lsrs	r3, r3, #26
 800446e:	3301      	adds	r3, #1
 8004470:	f003 021f 	and.w	r2, r3, #31
 8004474:	4613      	mov	r3, r2
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	4413      	add	r3, r2
 800447a:	3b1e      	subs	r3, #30
 800447c:	051b      	lsls	r3, r3, #20
 800447e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004482:	e01d      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x698>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	fa93 f3a3 	rbit	r3, r3
 8004490:	613b      	str	r3, [r7, #16]
  return result;
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d103      	bne.n	80044a4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800449c:	2320      	movs	r3, #32
 800449e:	e005      	b.n	80044ac <HAL_ADC_ConfigChannel+0x684>
 80044a0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	fab3 f383 	clz	r3, r3
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	3301      	adds	r3, #1
 80044ae:	f003 021f 	and.w	r2, r3, #31
 80044b2:	4613      	mov	r3, r2
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	4413      	add	r3, r2
 80044b8:	3b1e      	subs	r3, #30
 80044ba:	051b      	lsls	r3, r3, #20
 80044bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044c0:	430b      	orrs	r3, r1
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	6892      	ldr	r2, [r2, #8]
 80044c6:	4619      	mov	r1, r3
 80044c8:	f7ff f8e6 	bl	8003698 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	4b3d      	ldr	r3, [pc, #244]	; (80045c8 <HAL_ADC_ConfigChannel+0x7a0>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d06c      	beq.n	80045b2 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044d8:	483c      	ldr	r0, [pc, #240]	; (80045cc <HAL_ADC_ConfigChannel+0x7a4>)
 80044da:	f7ff f83b 	bl	8003554 <LL_ADC_GetCommonPathInternalCh>
 80044de:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a3a      	ldr	r2, [pc, #232]	; (80045d0 <HAL_ADC_ConfigChannel+0x7a8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d127      	bne.n	800453c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80044ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d121      	bne.n	800453c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a35      	ldr	r2, [pc, #212]	; (80045d4 <HAL_ADC_ConfigChannel+0x7ac>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d157      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004502:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004506:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800450a:	4619      	mov	r1, r3
 800450c:	482f      	ldr	r0, [pc, #188]	; (80045cc <HAL_ADC_ConfigChannel+0x7a4>)
 800450e:	f7ff f80e 	bl	800352e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004512:	4b31      	ldr	r3, [pc, #196]	; (80045d8 <HAL_ADC_ConfigChannel+0x7b0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	099b      	lsrs	r3, r3, #6
 8004518:	4a30      	ldr	r2, [pc, #192]	; (80045dc <HAL_ADC_ConfigChannel+0x7b4>)
 800451a:	fba2 2303 	umull	r2, r3, r2, r3
 800451e:	099b      	lsrs	r3, r3, #6
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	4613      	mov	r3, r2
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	4413      	add	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800452c:	e002      	b.n	8004534 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	3b01      	subs	r3, #1
 8004532:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f9      	bne.n	800452e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800453a:	e03a      	b.n	80045b2 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a27      	ldr	r2, [pc, #156]	; (80045e0 <HAL_ADC_ConfigChannel+0x7b8>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d113      	bne.n	800456e <HAL_ADC_ConfigChannel+0x746>
 8004546:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800454a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10d      	bne.n	800456e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a1f      	ldr	r2, [pc, #124]	; (80045d4 <HAL_ADC_ConfigChannel+0x7ac>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d12a      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800455c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004560:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004564:	4619      	mov	r1, r3
 8004566:	4819      	ldr	r0, [pc, #100]	; (80045cc <HAL_ADC_ConfigChannel+0x7a4>)
 8004568:	f7fe ffe1 	bl	800352e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800456c:	e021      	b.n	80045b2 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a1c      	ldr	r2, [pc, #112]	; (80045e4 <HAL_ADC_ConfigChannel+0x7bc>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d11c      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004578:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800457c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d116      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a12      	ldr	r2, [pc, #72]	; (80045d4 <HAL_ADC_ConfigChannel+0x7ac>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d111      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800458e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004592:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004596:	4619      	mov	r1, r3
 8004598:	480c      	ldr	r0, [pc, #48]	; (80045cc <HAL_ADC_ConfigChannel+0x7a4>)
 800459a:	f7fe ffc8 	bl	800352e <LL_ADC_SetCommonPathInternalCh>
 800459e:	e008      	b.n	80045b2 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a4:	f043 0220 	orr.w	r2, r3, #32
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80045ba:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80045be:	4618      	mov	r0, r3
 80045c0:	37d8      	adds	r7, #216	; 0xd8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	80080000 	.word	0x80080000
 80045cc:	50040300 	.word	0x50040300
 80045d0:	c7520000 	.word	0xc7520000
 80045d4:	50040000 	.word	0x50040000
 80045d8:	200000b0 	.word	0x200000b0
 80045dc:	053e2d63 	.word	0x053e2d63
 80045e0:	cb840000 	.word	0xcb840000
 80045e4:	80000001 	.word	0x80000001

080045e8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b088      	sub	sp, #32
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80045f2:	2300      	movs	r3, #0
 80045f4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff f95e 	bl	80038c0 <LL_ADC_REG_IsConversionOngoing>
 8004604:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff f97f 	bl	800390e <LL_ADC_INJ_IsConversionOngoing>
 8004610:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d103      	bne.n	8004620 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 8098 	beq.w	8004750 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d02a      	beq.n	8004684 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	7e5b      	ldrb	r3, [r3, #25]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d126      	bne.n	8004684 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	7e1b      	ldrb	r3, [r3, #24]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d122      	bne.n	8004684 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800463e:	2301      	movs	r3, #1
 8004640:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004642:	e014      	b.n	800466e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	4a45      	ldr	r2, [pc, #276]	; (800475c <ADC_ConversionStop+0x174>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d90d      	bls.n	8004668 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004650:	f043 0210 	orr.w	r2, r3, #16
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465c:	f043 0201 	orr.w	r2, r3, #1
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e074      	b.n	8004752 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	3301      	adds	r3, #1
 800466c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004678:	2b40      	cmp	r3, #64	; 0x40
 800467a:	d1e3      	bne.n	8004644 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2240      	movs	r2, #64	; 0x40
 8004682:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	2b02      	cmp	r3, #2
 8004688:	d014      	beq.n	80046b4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff f916 	bl	80038c0 <LL_ADC_REG_IsConversionOngoing>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00c      	beq.n	80046b4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff f8d3 	bl	800384a <LL_ADC_IsDisableOngoing>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d104      	bne.n	80046b4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff f8f2 	bl	8003898 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d014      	beq.n	80046e4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff f925 	bl	800390e <LL_ADC_INJ_IsConversionOngoing>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00c      	beq.n	80046e4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff f8bb 	bl	800384a <LL_ADC_IsDisableOngoing>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d104      	bne.n	80046e4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7ff f901 	bl	80038e6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d005      	beq.n	80046f6 <ADC_ConversionStop+0x10e>
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d105      	bne.n	80046fc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80046f0:	230c      	movs	r3, #12
 80046f2:	617b      	str	r3, [r7, #20]
        break;
 80046f4:	e005      	b.n	8004702 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80046f6:	2308      	movs	r3, #8
 80046f8:	617b      	str	r3, [r7, #20]
        break;
 80046fa:	e002      	b.n	8004702 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80046fc:	2304      	movs	r3, #4
 80046fe:	617b      	str	r3, [r7, #20]
        break;
 8004700:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004702:	f7fe fed1 	bl	80034a8 <HAL_GetTick>
 8004706:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004708:	e01b      	b.n	8004742 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800470a:	f7fe fecd 	bl	80034a8 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b05      	cmp	r3, #5
 8004716:	d914      	bls.n	8004742 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689a      	ldr	r2, [r3, #8]
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	4013      	ands	r3, r2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00d      	beq.n	8004742 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472a:	f043 0210 	orr.w	r2, r3, #16
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004736:	f043 0201 	orr.w	r2, r3, #1
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e007      	b.n	8004752 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	4013      	ands	r3, r2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1dc      	bne.n	800470a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3720      	adds	r7, #32
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	a33fffff 	.word	0xa33fffff

08004760 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004768:	2300      	movs	r3, #0
 800476a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff f857 	bl	8003824 <LL_ADC_IsEnabled>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d169      	bne.n	8004850 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	4b36      	ldr	r3, [pc, #216]	; (800485c <ADC_Enable+0xfc>)
 8004784:	4013      	ands	r3, r2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00d      	beq.n	80047a6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478e:	f043 0210 	orr.w	r2, r3, #16
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479a:	f043 0201 	orr.w	r2, r3, #1
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e055      	b.n	8004852 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff f812 	bl	80037d4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80047b0:	482b      	ldr	r0, [pc, #172]	; (8004860 <ADC_Enable+0x100>)
 80047b2:	f7fe fecf 	bl	8003554 <LL_ADC_GetCommonPathInternalCh>
 80047b6:	4603      	mov	r3, r0
 80047b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d013      	beq.n	80047e8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047c0:	4b28      	ldr	r3, [pc, #160]	; (8004864 <ADC_Enable+0x104>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	099b      	lsrs	r3, r3, #6
 80047c6:	4a28      	ldr	r2, [pc, #160]	; (8004868 <ADC_Enable+0x108>)
 80047c8:	fba2 2303 	umull	r2, r3, r2, r3
 80047cc:	099b      	lsrs	r3, r3, #6
 80047ce:	1c5a      	adds	r2, r3, #1
 80047d0:	4613      	mov	r3, r2
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	4413      	add	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80047da:	e002      	b.n	80047e2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	3b01      	subs	r3, #1
 80047e0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1f9      	bne.n	80047dc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80047e8:	f7fe fe5e 	bl	80034a8 <HAL_GetTick>
 80047ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047ee:	e028      	b.n	8004842 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff f815 	bl	8003824 <LL_ADC_IsEnabled>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d104      	bne.n	800480a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4618      	mov	r0, r3
 8004806:	f7fe ffe5 	bl	80037d4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800480a:	f7fe fe4d 	bl	80034a8 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d914      	bls.n	8004842 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b01      	cmp	r3, #1
 8004824:	d00d      	beq.n	8004842 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482a:	f043 0210 	orr.w	r2, r3, #16
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004836:	f043 0201 	orr.w	r2, r3, #1
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e007      	b.n	8004852 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b01      	cmp	r3, #1
 800484e:	d1cf      	bne.n	80047f0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	8000003f 	.word	0x8000003f
 8004860:	50040300 	.word	0x50040300
 8004864:	200000b0 	.word	0x200000b0
 8004868:	053e2d63 	.word	0x053e2d63

0800486c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4618      	mov	r0, r3
 800487a:	f7fe ffe6 	bl	800384a <LL_ADC_IsDisableOngoing>
 800487e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4618      	mov	r0, r3
 8004886:	f7fe ffcd 	bl	8003824 <LL_ADC_IsEnabled>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d047      	beq.n	8004920 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d144      	bne.n	8004920 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 030d 	and.w	r3, r3, #13
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d10c      	bne.n	80048be <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fe ffa7 	bl	80037fc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2203      	movs	r2, #3
 80048b4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80048b6:	f7fe fdf7 	bl	80034a8 <HAL_GetTick>
 80048ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80048bc:	e029      	b.n	8004912 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c2:	f043 0210 	orr.w	r2, r3, #16
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ce:	f043 0201 	orr.w	r2, r3, #1
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e023      	b.n	8004922 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80048da:	f7fe fde5 	bl	80034a8 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d914      	bls.n	8004912 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00d      	beq.n	8004912 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fa:	f043 0210 	orr.w	r2, r3, #16
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004906:	f043 0201 	orr.w	r2, r3, #1
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e007      	b.n	8004922 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1dc      	bne.n	80048da <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <LL_ADC_StartCalibration>:
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800493c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004946:	4313      	orrs	r3, r2
 8004948:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	609a      	str	r2, [r3, #8]
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <LL_ADC_IsCalibrationOnGoing>:
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800496c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004970:	d101      	bne.n	8004976 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800498e:	2300      	movs	r3, #0
 8004990:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004998:	2b01      	cmp	r3, #1
 800499a:	d101      	bne.n	80049a0 <HAL_ADCEx_Calibration_Start+0x1c>
 800499c:	2302      	movs	r3, #2
 800499e:	e04d      	b.n	8004a3c <HAL_ADCEx_Calibration_Start+0xb8>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7ff ff5f 	bl	800486c <ADC_Disable>
 80049ae:	4603      	mov	r3, r0
 80049b0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d136      	bne.n	8004a26 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80049c0:	f023 0302 	bic.w	r3, r3, #2
 80049c4:	f043 0202 	orr.w	r2, r3, #2
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6839      	ldr	r1, [r7, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff ffa9 	bl	800492a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80049d8:	e014      	b.n	8004a04 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	3301      	adds	r3, #1
 80049de:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80049e6:	d30d      	bcc.n	8004a04 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ec:	f023 0312 	bic.w	r3, r3, #18
 80049f0:	f043 0210 	orr.w	r2, r3, #16
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e01b      	b.n	8004a3c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff ffa7 	bl	800495c <LL_ADC_IsCalibrationOnGoing>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1e2      	bne.n	80049da <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a18:	f023 0303 	bic.w	r3, r3, #3
 8004a1c:	f043 0201 	orr.w	r2, r3, #1
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	655a      	str	r2, [r3, #84]	; 0x54
 8004a24:	e005      	b.n	8004a32 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2a:	f043 0210 	orr.w	r2, r3, #16
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f003 0307 	and.w	r3, r3, #7
 8004a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a54:	4b0c      	ldr	r3, [pc, #48]	; (8004a88 <__NVIC_SetPriorityGrouping+0x44>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a60:	4013      	ands	r3, r2
 8004a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a76:	4a04      	ldr	r2, [pc, #16]	; (8004a88 <__NVIC_SetPriorityGrouping+0x44>)
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	60d3      	str	r3, [r2, #12]
}
 8004a7c:	bf00      	nop
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	e000ed00 	.word	0xe000ed00

08004a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a90:	4b04      	ldr	r3, [pc, #16]	; (8004aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	0a1b      	lsrs	r3, r3, #8
 8004a96:	f003 0307 	and.w	r3, r3, #7
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	e000ed00 	.word	0xe000ed00

08004aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	4603      	mov	r3, r0
 8004ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	db0b      	blt.n	8004ad2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aba:	79fb      	ldrb	r3, [r7, #7]
 8004abc:	f003 021f 	and.w	r2, r3, #31
 8004ac0:	4907      	ldr	r1, [pc, #28]	; (8004ae0 <__NVIC_EnableIRQ+0x38>)
 8004ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac6:	095b      	lsrs	r3, r3, #5
 8004ac8:	2001      	movs	r0, #1
 8004aca:	fa00 f202 	lsl.w	r2, r0, r2
 8004ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	e000e100 	.word	0xe000e100

08004ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	4603      	mov	r3, r0
 8004aec:	6039      	str	r1, [r7, #0]
 8004aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	db0a      	blt.n	8004b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	490c      	ldr	r1, [pc, #48]	; (8004b30 <__NVIC_SetPriority+0x4c>)
 8004afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b02:	0112      	lsls	r2, r2, #4
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	440b      	add	r3, r1
 8004b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b0c:	e00a      	b.n	8004b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	4908      	ldr	r1, [pc, #32]	; (8004b34 <__NVIC_SetPriority+0x50>)
 8004b14:	79fb      	ldrb	r3, [r7, #7]
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	3b04      	subs	r3, #4
 8004b1c:	0112      	lsls	r2, r2, #4
 8004b1e:	b2d2      	uxtb	r2, r2
 8004b20:	440b      	add	r3, r1
 8004b22:	761a      	strb	r2, [r3, #24]
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	e000e100 	.word	0xe000e100
 8004b34:	e000ed00 	.word	0xe000ed00

08004b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b089      	sub	sp, #36	; 0x24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	f1c3 0307 	rsb	r3, r3, #7
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	bf28      	it	cs
 8004b56:	2304      	movcs	r3, #4
 8004b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	2b06      	cmp	r3, #6
 8004b60:	d902      	bls.n	8004b68 <NVIC_EncodePriority+0x30>
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	3b03      	subs	r3, #3
 8004b66:	e000      	b.n	8004b6a <NVIC_EncodePriority+0x32>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	fa02 f303 	lsl.w	r3, r2, r3
 8004b76:	43da      	mvns	r2, r3
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	401a      	ands	r2, r3
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b80:	f04f 31ff 	mov.w	r1, #4294967295
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8a:	43d9      	mvns	r1, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b90:	4313      	orrs	r3, r2
         );
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3724      	adds	r7, #36	; 0x24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b082      	sub	sp, #8
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7ff ff4c 	bl	8004a44 <__NVIC_SetPriorityGrouping>
}
 8004bac:	bf00      	nop
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
 8004bc0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004bc6:	f7ff ff61 	bl	8004a8c <__NVIC_GetPriorityGrouping>
 8004bca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	6978      	ldr	r0, [r7, #20]
 8004bd2:	f7ff ffb1 	bl	8004b38 <NVIC_EncodePriority>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bdc:	4611      	mov	r1, r2
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff ff80 	bl	8004ae4 <__NVIC_SetPriority>
}
 8004be4:	bf00      	nop
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7ff ff54 	bl	8004aa8 <__NVIC_EnableIRQ>
}
 8004c00:	bf00      	nop
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c12:	2300      	movs	r3, #0
 8004c14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c16:	e148      	b.n	8004eaa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	fa01 f303 	lsl.w	r3, r1, r3
 8004c24:	4013      	ands	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 813a 	beq.w	8004ea4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f003 0303 	and.w	r3, r3, #3
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d005      	beq.n	8004c48 <HAL_GPIO_Init+0x40>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f003 0303 	and.w	r3, r3, #3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d130      	bne.n	8004caa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	2203      	movs	r2, #3
 8004c54:	fa02 f303 	lsl.w	r3, r2, r3
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c7e:	2201      	movs	r2, #1
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	fa02 f303 	lsl.w	r3, r2, r3
 8004c86:	43db      	mvns	r3, r3
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	091b      	lsrs	r3, r3, #4
 8004c94:	f003 0201 	and.w	r2, r3, #1
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	2b03      	cmp	r3, #3
 8004cb4:	d017      	beq.n	8004ce6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	2203      	movs	r2, #3
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	689a      	ldr	r2, [r3, #8]
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d123      	bne.n	8004d3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	08da      	lsrs	r2, r3, #3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3208      	adds	r2, #8
 8004cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	220f      	movs	r2, #15
 8004d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0e:	43db      	mvns	r3, r3
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4013      	ands	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	691a      	ldr	r2, [r3, #16]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	08da      	lsrs	r2, r3, #3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3208      	adds	r2, #8
 8004d34:	6939      	ldr	r1, [r7, #16]
 8004d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	2203      	movs	r2, #3
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	43db      	mvns	r3, r3
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f003 0203 	and.w	r2, r3, #3
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 8094 	beq.w	8004ea4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d7c:	4b52      	ldr	r3, [pc, #328]	; (8004ec8 <HAL_GPIO_Init+0x2c0>)
 8004d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d80:	4a51      	ldr	r2, [pc, #324]	; (8004ec8 <HAL_GPIO_Init+0x2c0>)
 8004d82:	f043 0301 	orr.w	r3, r3, #1
 8004d86:	6613      	str	r3, [r2, #96]	; 0x60
 8004d88:	4b4f      	ldr	r3, [pc, #316]	; (8004ec8 <HAL_GPIO_Init+0x2c0>)
 8004d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004d94:	4a4d      	ldr	r2, [pc, #308]	; (8004ecc <HAL_GPIO_Init+0x2c4>)
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	089b      	lsrs	r3, r3, #2
 8004d9a:	3302      	adds	r3, #2
 8004d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004da0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f003 0303 	and.w	r3, r3, #3
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	220f      	movs	r2, #15
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	43db      	mvns	r3, r3
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4013      	ands	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004dbe:	d00d      	beq.n	8004ddc <HAL_GPIO_Init+0x1d4>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a43      	ldr	r2, [pc, #268]	; (8004ed0 <HAL_GPIO_Init+0x2c8>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d007      	beq.n	8004dd8 <HAL_GPIO_Init+0x1d0>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a42      	ldr	r2, [pc, #264]	; (8004ed4 <HAL_GPIO_Init+0x2cc>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d101      	bne.n	8004dd4 <HAL_GPIO_Init+0x1cc>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e004      	b.n	8004dde <HAL_GPIO_Init+0x1d6>
 8004dd4:	2307      	movs	r3, #7
 8004dd6:	e002      	b.n	8004dde <HAL_GPIO_Init+0x1d6>
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e000      	b.n	8004dde <HAL_GPIO_Init+0x1d6>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	f002 0203 	and.w	r2, r2, #3
 8004de4:	0092      	lsls	r2, r2, #2
 8004de6:	4093      	lsls	r3, r2
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004dee:	4937      	ldr	r1, [pc, #220]	; (8004ecc <HAL_GPIO_Init+0x2c4>)
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	089b      	lsrs	r3, r3, #2
 8004df4:	3302      	adds	r3, #2
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004dfc:	4b36      	ldr	r3, [pc, #216]	; (8004ed8 <HAL_GPIO_Init+0x2d0>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	43db      	mvns	r3, r3
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e20:	4a2d      	ldr	r2, [pc, #180]	; (8004ed8 <HAL_GPIO_Init+0x2d0>)
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e26:	4b2c      	ldr	r3, [pc, #176]	; (8004ed8 <HAL_GPIO_Init+0x2d0>)
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	4013      	ands	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e4a:	4a23      	ldr	r2, [pc, #140]	; (8004ed8 <HAL_GPIO_Init+0x2d0>)
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004e50:	4b21      	ldr	r3, [pc, #132]	; (8004ed8 <HAL_GPIO_Init+0x2d0>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	43db      	mvns	r3, r3
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e74:	4a18      	ldr	r2, [pc, #96]	; (8004ed8 <HAL_GPIO_Init+0x2d0>)
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004e7a:	4b17      	ldr	r3, [pc, #92]	; (8004ed8 <HAL_GPIO_Init+0x2d0>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	43db      	mvns	r3, r3
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	4013      	ands	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e9e:	4a0e      	ldr	r2, [pc, #56]	; (8004ed8 <HAL_GPIO_Init+0x2d0>)
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f47f aeaf 	bne.w	8004c18 <HAL_GPIO_Init+0x10>
  }
}
 8004eba:	bf00      	nop
 8004ebc:	bf00      	nop
 8004ebe:	371c      	adds	r7, #28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	40010000 	.word	0x40010000
 8004ed0:	48000400 	.word	0x48000400
 8004ed4:	48000800 	.word	0x48000800
 8004ed8:	40010400 	.word	0x40010400

08004edc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691a      	ldr	r2, [r3, #16]
 8004eec:	887b      	ldrh	r3, [r7, #2]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	73fb      	strb	r3, [r7, #15]
 8004ef8:	e001      	b.n	8004efe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004efa:	2300      	movs	r3, #0
 8004efc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	460b      	mov	r3, r1
 8004f16:	807b      	strh	r3, [r7, #2]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f1c:	787b      	ldrb	r3, [r7, #1]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f22:	887a      	ldrh	r2, [r7, #2]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f28:	e002      	b.n	8004f30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f2a:	887a      	ldrh	r2, [r7, #2]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004f40:	4b04      	ldr	r3, [pc, #16]	; (8004f54 <HAL_PWREx_GetVoltageRange+0x18>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	40007000 	.word	0x40007000

08004f58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f66:	d130      	bne.n	8004fca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f68:	4b23      	ldr	r3, [pc, #140]	; (8004ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f74:	d038      	beq.n	8004fe8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f76:	4b20      	ldr	r3, [pc, #128]	; (8004ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f7e:	4a1e      	ldr	r2, [pc, #120]	; (8004ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f84:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f86:	4b1d      	ldr	r3, [pc, #116]	; (8004ffc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2232      	movs	r2, #50	; 0x32
 8004f8c:	fb02 f303 	mul.w	r3, r2, r3
 8004f90:	4a1b      	ldr	r2, [pc, #108]	; (8005000 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004f92:	fba2 2303 	umull	r2, r3, r2, r3
 8004f96:	0c9b      	lsrs	r3, r3, #18
 8004f98:	3301      	adds	r3, #1
 8004f9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f9c:	e002      	b.n	8004fa4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fa4:	4b14      	ldr	r3, [pc, #80]	; (8004ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb0:	d102      	bne.n	8004fb8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1f2      	bne.n	8004f9e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fb8:	4b0f      	ldr	r3, [pc, #60]	; (8004ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc4:	d110      	bne.n	8004fe8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e00f      	b.n	8004fea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fca:	4b0b      	ldr	r3, [pc, #44]	; (8004ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd6:	d007      	beq.n	8004fe8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004fd8:	4b07      	ldr	r3, [pc, #28]	; (8004ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fe0:	4a05      	ldr	r2, [pc, #20]	; (8004ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fe2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fe6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	40007000 	.word	0x40007000
 8004ffc:	200000b0 	.word	0x200000b0
 8005000:	431bde83 	.word	0x431bde83

08005004 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b088      	sub	sp, #32
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e3fe      	b.n	8005814 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005016:	4ba1      	ldr	r3, [pc, #644]	; (800529c <HAL_RCC_OscConfig+0x298>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 030c 	and.w	r3, r3, #12
 800501e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005020:	4b9e      	ldr	r3, [pc, #632]	; (800529c <HAL_RCC_OscConfig+0x298>)
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f003 0303 	and.w	r3, r3, #3
 8005028:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0310 	and.w	r3, r3, #16
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 80e4 	beq.w	8005200 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d007      	beq.n	800504e <HAL_RCC_OscConfig+0x4a>
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	2b0c      	cmp	r3, #12
 8005042:	f040 808b 	bne.w	800515c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2b01      	cmp	r3, #1
 800504a:	f040 8087 	bne.w	800515c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800504e:	4b93      	ldr	r3, [pc, #588]	; (800529c <HAL_RCC_OscConfig+0x298>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d005      	beq.n	8005066 <HAL_RCC_OscConfig+0x62>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e3d6      	b.n	8005814 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1a      	ldr	r2, [r3, #32]
 800506a:	4b8c      	ldr	r3, [pc, #560]	; (800529c <HAL_RCC_OscConfig+0x298>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d004      	beq.n	8005080 <HAL_RCC_OscConfig+0x7c>
 8005076:	4b89      	ldr	r3, [pc, #548]	; (800529c <HAL_RCC_OscConfig+0x298>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800507e:	e005      	b.n	800508c <HAL_RCC_OscConfig+0x88>
 8005080:	4b86      	ldr	r3, [pc, #536]	; (800529c <HAL_RCC_OscConfig+0x298>)
 8005082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005086:	091b      	lsrs	r3, r3, #4
 8005088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800508c:	4293      	cmp	r3, r2
 800508e:	d223      	bcs.n	80050d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	4618      	mov	r0, r3
 8005096:	f000 fda7 	bl	8005be8 <RCC_SetFlashLatencyFromMSIRange>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e3b7      	b.n	8005814 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050a4:	4b7d      	ldr	r3, [pc, #500]	; (800529c <HAL_RCC_OscConfig+0x298>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a7c      	ldr	r2, [pc, #496]	; (800529c <HAL_RCC_OscConfig+0x298>)
 80050aa:	f043 0308 	orr.w	r3, r3, #8
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	4b7a      	ldr	r3, [pc, #488]	; (800529c <HAL_RCC_OscConfig+0x298>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	4977      	ldr	r1, [pc, #476]	; (800529c <HAL_RCC_OscConfig+0x298>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050c2:	4b76      	ldr	r3, [pc, #472]	; (800529c <HAL_RCC_OscConfig+0x298>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	021b      	lsls	r3, r3, #8
 80050d0:	4972      	ldr	r1, [pc, #456]	; (800529c <HAL_RCC_OscConfig+0x298>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	604b      	str	r3, [r1, #4]
 80050d6:	e025      	b.n	8005124 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050d8:	4b70      	ldr	r3, [pc, #448]	; (800529c <HAL_RCC_OscConfig+0x298>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a6f      	ldr	r2, [pc, #444]	; (800529c <HAL_RCC_OscConfig+0x298>)
 80050de:	f043 0308 	orr.w	r3, r3, #8
 80050e2:	6013      	str	r3, [r2, #0]
 80050e4:	4b6d      	ldr	r3, [pc, #436]	; (800529c <HAL_RCC_OscConfig+0x298>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	496a      	ldr	r1, [pc, #424]	; (800529c <HAL_RCC_OscConfig+0x298>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050f6:	4b69      	ldr	r3, [pc, #420]	; (800529c <HAL_RCC_OscConfig+0x298>)
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	021b      	lsls	r3, r3, #8
 8005104:	4965      	ldr	r1, [pc, #404]	; (800529c <HAL_RCC_OscConfig+0x298>)
 8005106:	4313      	orrs	r3, r2
 8005108:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d109      	bne.n	8005124 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	4618      	mov	r0, r3
 8005116:	f000 fd67 	bl	8005be8 <RCC_SetFlashLatencyFromMSIRange>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e377      	b.n	8005814 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005124:	f000 fc80 	bl	8005a28 <HAL_RCC_GetSysClockFreq>
 8005128:	4602      	mov	r2, r0
 800512a:	4b5c      	ldr	r3, [pc, #368]	; (800529c <HAL_RCC_OscConfig+0x298>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	091b      	lsrs	r3, r3, #4
 8005130:	f003 030f 	and.w	r3, r3, #15
 8005134:	495a      	ldr	r1, [pc, #360]	; (80052a0 <HAL_RCC_OscConfig+0x29c>)
 8005136:	5ccb      	ldrb	r3, [r1, r3]
 8005138:	f003 031f 	and.w	r3, r3, #31
 800513c:	fa22 f303 	lsr.w	r3, r2, r3
 8005140:	4a58      	ldr	r2, [pc, #352]	; (80052a4 <HAL_RCC_OscConfig+0x2a0>)
 8005142:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005144:	4b58      	ldr	r3, [pc, #352]	; (80052a8 <HAL_RCC_OscConfig+0x2a4>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4618      	mov	r0, r3
 800514a:	f7fd fff3 	bl	8003134 <HAL_InitTick>
 800514e:	4603      	mov	r3, r0
 8005150:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005152:	7bfb      	ldrb	r3, [r7, #15]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d052      	beq.n	80051fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005158:	7bfb      	ldrb	r3, [r7, #15]
 800515a:	e35b      	b.n	8005814 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d032      	beq.n	80051ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005164:	4b4d      	ldr	r3, [pc, #308]	; (800529c <HAL_RCC_OscConfig+0x298>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a4c      	ldr	r2, [pc, #304]	; (800529c <HAL_RCC_OscConfig+0x298>)
 800516a:	f043 0301 	orr.w	r3, r3, #1
 800516e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005170:	f7fe f99a 	bl	80034a8 <HAL_GetTick>
 8005174:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005178:	f7fe f996 	bl	80034a8 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e344      	b.n	8005814 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800518a:	4b44      	ldr	r3, [pc, #272]	; (800529c <HAL_RCC_OscConfig+0x298>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0f0      	beq.n	8005178 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005196:	4b41      	ldr	r3, [pc, #260]	; (800529c <HAL_RCC_OscConfig+0x298>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a40      	ldr	r2, [pc, #256]	; (800529c <HAL_RCC_OscConfig+0x298>)
 800519c:	f043 0308 	orr.w	r3, r3, #8
 80051a0:	6013      	str	r3, [r2, #0]
 80051a2:	4b3e      	ldr	r3, [pc, #248]	; (800529c <HAL_RCC_OscConfig+0x298>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	493b      	ldr	r1, [pc, #236]	; (800529c <HAL_RCC_OscConfig+0x298>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051b4:	4b39      	ldr	r3, [pc, #228]	; (800529c <HAL_RCC_OscConfig+0x298>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	69db      	ldr	r3, [r3, #28]
 80051c0:	021b      	lsls	r3, r3, #8
 80051c2:	4936      	ldr	r1, [pc, #216]	; (800529c <HAL_RCC_OscConfig+0x298>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	604b      	str	r3, [r1, #4]
 80051c8:	e01a      	b.n	8005200 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80051ca:	4b34      	ldr	r3, [pc, #208]	; (800529c <HAL_RCC_OscConfig+0x298>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a33      	ldr	r2, [pc, #204]	; (800529c <HAL_RCC_OscConfig+0x298>)
 80051d0:	f023 0301 	bic.w	r3, r3, #1
 80051d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051d6:	f7fe f967 	bl	80034a8 <HAL_GetTick>
 80051da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80051dc:	e008      	b.n	80051f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051de:	f7fe f963 	bl	80034a8 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e311      	b.n	8005814 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80051f0:	4b2a      	ldr	r3, [pc, #168]	; (800529c <HAL_RCC_OscConfig+0x298>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1f0      	bne.n	80051de <HAL_RCC_OscConfig+0x1da>
 80051fc:	e000      	b.n	8005200 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80051fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	d074      	beq.n	80052f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	2b08      	cmp	r3, #8
 8005210:	d005      	beq.n	800521e <HAL_RCC_OscConfig+0x21a>
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	2b0c      	cmp	r3, #12
 8005216:	d10e      	bne.n	8005236 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	2b03      	cmp	r3, #3
 800521c:	d10b      	bne.n	8005236 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800521e:	4b1f      	ldr	r3, [pc, #124]	; (800529c <HAL_RCC_OscConfig+0x298>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d064      	beq.n	80052f4 <HAL_RCC_OscConfig+0x2f0>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d160      	bne.n	80052f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e2ee      	b.n	8005814 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800523e:	d106      	bne.n	800524e <HAL_RCC_OscConfig+0x24a>
 8005240:	4b16      	ldr	r3, [pc, #88]	; (800529c <HAL_RCC_OscConfig+0x298>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a15      	ldr	r2, [pc, #84]	; (800529c <HAL_RCC_OscConfig+0x298>)
 8005246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	e01d      	b.n	800528a <HAL_RCC_OscConfig+0x286>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005256:	d10c      	bne.n	8005272 <HAL_RCC_OscConfig+0x26e>
 8005258:	4b10      	ldr	r3, [pc, #64]	; (800529c <HAL_RCC_OscConfig+0x298>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a0f      	ldr	r2, [pc, #60]	; (800529c <HAL_RCC_OscConfig+0x298>)
 800525e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	4b0d      	ldr	r3, [pc, #52]	; (800529c <HAL_RCC_OscConfig+0x298>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a0c      	ldr	r2, [pc, #48]	; (800529c <HAL_RCC_OscConfig+0x298>)
 800526a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	e00b      	b.n	800528a <HAL_RCC_OscConfig+0x286>
 8005272:	4b0a      	ldr	r3, [pc, #40]	; (800529c <HAL_RCC_OscConfig+0x298>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a09      	ldr	r2, [pc, #36]	; (800529c <HAL_RCC_OscConfig+0x298>)
 8005278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	4b07      	ldr	r3, [pc, #28]	; (800529c <HAL_RCC_OscConfig+0x298>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a06      	ldr	r2, [pc, #24]	; (800529c <HAL_RCC_OscConfig+0x298>)
 8005284:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005288:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d01c      	beq.n	80052cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005292:	f7fe f909 	bl	80034a8 <HAL_GetTick>
 8005296:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005298:	e011      	b.n	80052be <HAL_RCC_OscConfig+0x2ba>
 800529a:	bf00      	nop
 800529c:	40021000 	.word	0x40021000
 80052a0:	0800db08 	.word	0x0800db08
 80052a4:	200000b0 	.word	0x200000b0
 80052a8:	200000b4 	.word	0x200000b4
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052ac:	f7fe f8fc 	bl	80034a8 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b64      	cmp	r3, #100	; 0x64
 80052b8:	d901      	bls.n	80052be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e2aa      	b.n	8005814 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052be:	4baf      	ldr	r3, [pc, #700]	; (800557c <HAL_RCC_OscConfig+0x578>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0f0      	beq.n	80052ac <HAL_RCC_OscConfig+0x2a8>
 80052ca:	e014      	b.n	80052f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052cc:	f7fe f8ec 	bl	80034a8 <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052d4:	f7fe f8e8 	bl	80034a8 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b64      	cmp	r3, #100	; 0x64
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e296      	b.n	8005814 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052e6:	4ba5      	ldr	r3, [pc, #660]	; (800557c <HAL_RCC_OscConfig+0x578>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f0      	bne.n	80052d4 <HAL_RCC_OscConfig+0x2d0>
 80052f2:	e000      	b.n	80052f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d060      	beq.n	80053c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2b04      	cmp	r3, #4
 8005306:	d005      	beq.n	8005314 <HAL_RCC_OscConfig+0x310>
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	2b0c      	cmp	r3, #12
 800530c:	d119      	bne.n	8005342 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2b02      	cmp	r3, #2
 8005312:	d116      	bne.n	8005342 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005314:	4b99      	ldr	r3, [pc, #612]	; (800557c <HAL_RCC_OscConfig+0x578>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800531c:	2b00      	cmp	r3, #0
 800531e:	d005      	beq.n	800532c <HAL_RCC_OscConfig+0x328>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e273      	b.n	8005814 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800532c:	4b93      	ldr	r3, [pc, #588]	; (800557c <HAL_RCC_OscConfig+0x578>)
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	061b      	lsls	r3, r3, #24
 800533a:	4990      	ldr	r1, [pc, #576]	; (800557c <HAL_RCC_OscConfig+0x578>)
 800533c:	4313      	orrs	r3, r2
 800533e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005340:	e040      	b.n	80053c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d023      	beq.n	8005392 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800534a:	4b8c      	ldr	r3, [pc, #560]	; (800557c <HAL_RCC_OscConfig+0x578>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a8b      	ldr	r2, [pc, #556]	; (800557c <HAL_RCC_OscConfig+0x578>)
 8005350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005356:	f7fe f8a7 	bl	80034a8 <HAL_GetTick>
 800535a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800535c:	e008      	b.n	8005370 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800535e:	f7fe f8a3 	bl	80034a8 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	2b02      	cmp	r3, #2
 800536a:	d901      	bls.n	8005370 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e251      	b.n	8005814 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005370:	4b82      	ldr	r3, [pc, #520]	; (800557c <HAL_RCC_OscConfig+0x578>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005378:	2b00      	cmp	r3, #0
 800537a:	d0f0      	beq.n	800535e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800537c:	4b7f      	ldr	r3, [pc, #508]	; (800557c <HAL_RCC_OscConfig+0x578>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	061b      	lsls	r3, r3, #24
 800538a:	497c      	ldr	r1, [pc, #496]	; (800557c <HAL_RCC_OscConfig+0x578>)
 800538c:	4313      	orrs	r3, r2
 800538e:	604b      	str	r3, [r1, #4]
 8005390:	e018      	b.n	80053c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005392:	4b7a      	ldr	r3, [pc, #488]	; (800557c <HAL_RCC_OscConfig+0x578>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a79      	ldr	r2, [pc, #484]	; (800557c <HAL_RCC_OscConfig+0x578>)
 8005398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800539c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539e:	f7fe f883 	bl	80034a8 <HAL_GetTick>
 80053a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053a4:	e008      	b.n	80053b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053a6:	f7fe f87f 	bl	80034a8 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d901      	bls.n	80053b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e22d      	b.n	8005814 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053b8:	4b70      	ldr	r3, [pc, #448]	; (800557c <HAL_RCC_OscConfig+0x578>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1f0      	bne.n	80053a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0308 	and.w	r3, r3, #8
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d03c      	beq.n	800544a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d01c      	beq.n	8005412 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053d8:	4b68      	ldr	r3, [pc, #416]	; (800557c <HAL_RCC_OscConfig+0x578>)
 80053da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053de:	4a67      	ldr	r2, [pc, #412]	; (800557c <HAL_RCC_OscConfig+0x578>)
 80053e0:	f043 0301 	orr.w	r3, r3, #1
 80053e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e8:	f7fe f85e 	bl	80034a8 <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053f0:	f7fe f85a 	bl	80034a8 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e208      	b.n	8005814 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005402:	4b5e      	ldr	r3, [pc, #376]	; (800557c <HAL_RCC_OscConfig+0x578>)
 8005404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d0ef      	beq.n	80053f0 <HAL_RCC_OscConfig+0x3ec>
 8005410:	e01b      	b.n	800544a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005412:	4b5a      	ldr	r3, [pc, #360]	; (800557c <HAL_RCC_OscConfig+0x578>)
 8005414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005418:	4a58      	ldr	r2, [pc, #352]	; (800557c <HAL_RCC_OscConfig+0x578>)
 800541a:	f023 0301 	bic.w	r3, r3, #1
 800541e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005422:	f7fe f841 	bl	80034a8 <HAL_GetTick>
 8005426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005428:	e008      	b.n	800543c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800542a:	f7fe f83d 	bl	80034a8 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d901      	bls.n	800543c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e1eb      	b.n	8005814 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800543c:	4b4f      	ldr	r3, [pc, #316]	; (800557c <HAL_RCC_OscConfig+0x578>)
 800543e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1ef      	bne.n	800542a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0304 	and.w	r3, r3, #4
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 80a6 	beq.w	80055a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005458:	2300      	movs	r3, #0
 800545a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800545c:	4b47      	ldr	r3, [pc, #284]	; (800557c <HAL_RCC_OscConfig+0x578>)
 800545e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10d      	bne.n	8005484 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005468:	4b44      	ldr	r3, [pc, #272]	; (800557c <HAL_RCC_OscConfig+0x578>)
 800546a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800546c:	4a43      	ldr	r2, [pc, #268]	; (800557c <HAL_RCC_OscConfig+0x578>)
 800546e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005472:	6593      	str	r3, [r2, #88]	; 0x58
 8005474:	4b41      	ldr	r3, [pc, #260]	; (800557c <HAL_RCC_OscConfig+0x578>)
 8005476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800547c:	60bb      	str	r3, [r7, #8]
 800547e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005480:	2301      	movs	r3, #1
 8005482:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005484:	4b3e      	ldr	r3, [pc, #248]	; (8005580 <HAL_RCC_OscConfig+0x57c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548c:	2b00      	cmp	r3, #0
 800548e:	d118      	bne.n	80054c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005490:	4b3b      	ldr	r3, [pc, #236]	; (8005580 <HAL_RCC_OscConfig+0x57c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a3a      	ldr	r2, [pc, #232]	; (8005580 <HAL_RCC_OscConfig+0x57c>)
 8005496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800549a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800549c:	f7fe f804 	bl	80034a8 <HAL_GetTick>
 80054a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054a4:	f7fe f800 	bl	80034a8 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e1ae      	b.n	8005814 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054b6:	4b32      	ldr	r3, [pc, #200]	; (8005580 <HAL_RCC_OscConfig+0x57c>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d0f0      	beq.n	80054a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d108      	bne.n	80054dc <HAL_RCC_OscConfig+0x4d8>
 80054ca:	4b2c      	ldr	r3, [pc, #176]	; (800557c <HAL_RCC_OscConfig+0x578>)
 80054cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d0:	4a2a      	ldr	r2, [pc, #168]	; (800557c <HAL_RCC_OscConfig+0x578>)
 80054d2:	f043 0301 	orr.w	r3, r3, #1
 80054d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054da:	e024      	b.n	8005526 <HAL_RCC_OscConfig+0x522>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	2b05      	cmp	r3, #5
 80054e2:	d110      	bne.n	8005506 <HAL_RCC_OscConfig+0x502>
 80054e4:	4b25      	ldr	r3, [pc, #148]	; (800557c <HAL_RCC_OscConfig+0x578>)
 80054e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ea:	4a24      	ldr	r2, [pc, #144]	; (800557c <HAL_RCC_OscConfig+0x578>)
 80054ec:	f043 0304 	orr.w	r3, r3, #4
 80054f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054f4:	4b21      	ldr	r3, [pc, #132]	; (800557c <HAL_RCC_OscConfig+0x578>)
 80054f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fa:	4a20      	ldr	r2, [pc, #128]	; (800557c <HAL_RCC_OscConfig+0x578>)
 80054fc:	f043 0301 	orr.w	r3, r3, #1
 8005500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005504:	e00f      	b.n	8005526 <HAL_RCC_OscConfig+0x522>
 8005506:	4b1d      	ldr	r3, [pc, #116]	; (800557c <HAL_RCC_OscConfig+0x578>)
 8005508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550c:	4a1b      	ldr	r2, [pc, #108]	; (800557c <HAL_RCC_OscConfig+0x578>)
 800550e:	f023 0301 	bic.w	r3, r3, #1
 8005512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005516:	4b19      	ldr	r3, [pc, #100]	; (800557c <HAL_RCC_OscConfig+0x578>)
 8005518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551c:	4a17      	ldr	r2, [pc, #92]	; (800557c <HAL_RCC_OscConfig+0x578>)
 800551e:	f023 0304 	bic.w	r3, r3, #4
 8005522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d016      	beq.n	800555c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800552e:	f7fd ffbb 	bl	80034a8 <HAL_GetTick>
 8005532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005534:	e00a      	b.n	800554c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005536:	f7fd ffb7 	bl	80034a8 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	f241 3288 	movw	r2, #5000	; 0x1388
 8005544:	4293      	cmp	r3, r2
 8005546:	d901      	bls.n	800554c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e163      	b.n	8005814 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800554c:	4b0b      	ldr	r3, [pc, #44]	; (800557c <HAL_RCC_OscConfig+0x578>)
 800554e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0ed      	beq.n	8005536 <HAL_RCC_OscConfig+0x532>
 800555a:	e01a      	b.n	8005592 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800555c:	f7fd ffa4 	bl	80034a8 <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005562:	e00f      	b.n	8005584 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005564:	f7fd ffa0 	bl	80034a8 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005572:	4293      	cmp	r3, r2
 8005574:	d906      	bls.n	8005584 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e14c      	b.n	8005814 <HAL_RCC_OscConfig+0x810>
 800557a:	bf00      	nop
 800557c:	40021000 	.word	0x40021000
 8005580:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005584:	4ba5      	ldr	r3, [pc, #660]	; (800581c <HAL_RCC_OscConfig+0x818>)
 8005586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1e8      	bne.n	8005564 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005592:	7ffb      	ldrb	r3, [r7, #31]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d105      	bne.n	80055a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005598:	4ba0      	ldr	r3, [pc, #640]	; (800581c <HAL_RCC_OscConfig+0x818>)
 800559a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559c:	4a9f      	ldr	r2, [pc, #636]	; (800581c <HAL_RCC_OscConfig+0x818>)
 800559e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0320 	and.w	r3, r3, #32
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d03c      	beq.n	800562a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01c      	beq.n	80055f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055b8:	4b98      	ldr	r3, [pc, #608]	; (800581c <HAL_RCC_OscConfig+0x818>)
 80055ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055be:	4a97      	ldr	r2, [pc, #604]	; (800581c <HAL_RCC_OscConfig+0x818>)
 80055c0:	f043 0301 	orr.w	r3, r3, #1
 80055c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c8:	f7fd ff6e 	bl	80034a8 <HAL_GetTick>
 80055cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055d0:	f7fd ff6a 	bl	80034a8 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e118      	b.n	8005814 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055e2:	4b8e      	ldr	r3, [pc, #568]	; (800581c <HAL_RCC_OscConfig+0x818>)
 80055e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d0ef      	beq.n	80055d0 <HAL_RCC_OscConfig+0x5cc>
 80055f0:	e01b      	b.n	800562a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055f2:	4b8a      	ldr	r3, [pc, #552]	; (800581c <HAL_RCC_OscConfig+0x818>)
 80055f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055f8:	4a88      	ldr	r2, [pc, #544]	; (800581c <HAL_RCC_OscConfig+0x818>)
 80055fa:	f023 0301 	bic.w	r3, r3, #1
 80055fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005602:	f7fd ff51 	bl	80034a8 <HAL_GetTick>
 8005606:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005608:	e008      	b.n	800561c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800560a:	f7fd ff4d 	bl	80034a8 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d901      	bls.n	800561c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e0fb      	b.n	8005814 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800561c:	4b7f      	ldr	r3, [pc, #508]	; (800581c <HAL_RCC_OscConfig+0x818>)
 800561e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1ef      	bne.n	800560a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 80ef 	beq.w	8005812 <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005638:	2b02      	cmp	r3, #2
 800563a:	f040 80c5 	bne.w	80057c8 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800563e:	4b77      	ldr	r3, [pc, #476]	; (800581c <HAL_RCC_OscConfig+0x818>)
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f003 0203 	and.w	r2, r3, #3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564e:	429a      	cmp	r2, r3
 8005650:	d12c      	bne.n	80056ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565c:	3b01      	subs	r3, #1
 800565e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005660:	429a      	cmp	r2, r3
 8005662:	d123      	bne.n	80056ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800566e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005670:	429a      	cmp	r2, r3
 8005672:	d11b      	bne.n	80056ac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005680:	429a      	cmp	r2, r3
 8005682:	d113      	bne.n	80056ac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568e:	085b      	lsrs	r3, r3, #1
 8005690:	3b01      	subs	r3, #1
 8005692:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005694:	429a      	cmp	r2, r3
 8005696:	d109      	bne.n	80056ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	085b      	lsrs	r3, r3, #1
 80056a4:	3b01      	subs	r3, #1
 80056a6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d067      	beq.n	800577c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	2b0c      	cmp	r3, #12
 80056b0:	d062      	beq.n	8005778 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80056b2:	4b5a      	ldr	r3, [pc, #360]	; (800581c <HAL_RCC_OscConfig+0x818>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e0a8      	b.n	8005814 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80056c2:	4b56      	ldr	r3, [pc, #344]	; (800581c <HAL_RCC_OscConfig+0x818>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a55      	ldr	r2, [pc, #340]	; (800581c <HAL_RCC_OscConfig+0x818>)
 80056c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80056ce:	f7fd feeb 	bl	80034a8 <HAL_GetTick>
 80056d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056d4:	e008      	b.n	80056e8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056d6:	f7fd fee7 	bl	80034a8 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d901      	bls.n	80056e8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e095      	b.n	8005814 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056e8:	4b4c      	ldr	r3, [pc, #304]	; (800581c <HAL_RCC_OscConfig+0x818>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1f0      	bne.n	80056d6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056f4:	4b49      	ldr	r3, [pc, #292]	; (800581c <HAL_RCC_OscConfig+0x818>)
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	4b49      	ldr	r3, [pc, #292]	; (8005820 <HAL_RCC_OscConfig+0x81c>)
 80056fa:	4013      	ands	r3, r2
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005704:	3a01      	subs	r2, #1
 8005706:	0112      	lsls	r2, r2, #4
 8005708:	4311      	orrs	r1, r2
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800570e:	0212      	lsls	r2, r2, #8
 8005710:	4311      	orrs	r1, r2
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005716:	0852      	lsrs	r2, r2, #1
 8005718:	3a01      	subs	r2, #1
 800571a:	0552      	lsls	r2, r2, #21
 800571c:	4311      	orrs	r1, r2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005722:	0852      	lsrs	r2, r2, #1
 8005724:	3a01      	subs	r2, #1
 8005726:	0652      	lsls	r2, r2, #25
 8005728:	4311      	orrs	r1, r2
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800572e:	06d2      	lsls	r2, r2, #27
 8005730:	430a      	orrs	r2, r1
 8005732:	493a      	ldr	r1, [pc, #232]	; (800581c <HAL_RCC_OscConfig+0x818>)
 8005734:	4313      	orrs	r3, r2
 8005736:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005738:	4b38      	ldr	r3, [pc, #224]	; (800581c <HAL_RCC_OscConfig+0x818>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a37      	ldr	r2, [pc, #220]	; (800581c <HAL_RCC_OscConfig+0x818>)
 800573e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005742:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005744:	4b35      	ldr	r3, [pc, #212]	; (800581c <HAL_RCC_OscConfig+0x818>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	4a34      	ldr	r2, [pc, #208]	; (800581c <HAL_RCC_OscConfig+0x818>)
 800574a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800574e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005750:	f7fd feaa 	bl	80034a8 <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005758:	f7fd fea6 	bl	80034a8 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e054      	b.n	8005814 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800576a:	4b2c      	ldr	r3, [pc, #176]	; (800581c <HAL_RCC_OscConfig+0x818>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d0f0      	beq.n	8005758 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005776:	e04c      	b.n	8005812 <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e04b      	b.n	8005814 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800577c:	4b27      	ldr	r3, [pc, #156]	; (800581c <HAL_RCC_OscConfig+0x818>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d144      	bne.n	8005812 <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005788:	4b24      	ldr	r3, [pc, #144]	; (800581c <HAL_RCC_OscConfig+0x818>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a23      	ldr	r2, [pc, #140]	; (800581c <HAL_RCC_OscConfig+0x818>)
 800578e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005792:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005794:	4b21      	ldr	r3, [pc, #132]	; (800581c <HAL_RCC_OscConfig+0x818>)
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	4a20      	ldr	r2, [pc, #128]	; (800581c <HAL_RCC_OscConfig+0x818>)
 800579a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800579e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80057a0:	f7fd fe82 	bl	80034a8 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057a8:	f7fd fe7e 	bl	80034a8 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e02c      	b.n	8005814 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057ba:	4b18      	ldr	r3, [pc, #96]	; (800581c <HAL_RCC_OscConfig+0x818>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0f0      	beq.n	80057a8 <HAL_RCC_OscConfig+0x7a4>
 80057c6:	e024      	b.n	8005812 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	2b0c      	cmp	r3, #12
 80057cc:	d01f      	beq.n	800580e <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ce:	4b13      	ldr	r3, [pc, #76]	; (800581c <HAL_RCC_OscConfig+0x818>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a12      	ldr	r2, [pc, #72]	; (800581c <HAL_RCC_OscConfig+0x818>)
 80057d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057da:	f7fd fe65 	bl	80034a8 <HAL_GetTick>
 80057de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057e0:	e008      	b.n	80057f4 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057e2:	f7fd fe61 	bl	80034a8 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e00f      	b.n	8005814 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057f4:	4b09      	ldr	r3, [pc, #36]	; (800581c <HAL_RCC_OscConfig+0x818>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1f0      	bne.n	80057e2 <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005800:	4b06      	ldr	r3, [pc, #24]	; (800581c <HAL_RCC_OscConfig+0x818>)
 8005802:	68da      	ldr	r2, [r3, #12]
 8005804:	4905      	ldr	r1, [pc, #20]	; (800581c <HAL_RCC_OscConfig+0x818>)
 8005806:	4b07      	ldr	r3, [pc, #28]	; (8005824 <HAL_RCC_OscConfig+0x820>)
 8005808:	4013      	ands	r3, r2
 800580a:	60cb      	str	r3, [r1, #12]
 800580c:	e001      	b.n	8005812 <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e000      	b.n	8005814 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3720      	adds	r7, #32
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40021000 	.word	0x40021000
 8005820:	019d808c 	.word	0x019d808c
 8005824:	feeefffc 	.word	0xfeeefffc

08005828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e0e7      	b.n	8005a0c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800583c:	4b75      	ldr	r3, [pc, #468]	; (8005a14 <HAL_RCC_ClockConfig+0x1ec>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	429a      	cmp	r2, r3
 8005848:	d910      	bls.n	800586c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800584a:	4b72      	ldr	r3, [pc, #456]	; (8005a14 <HAL_RCC_ClockConfig+0x1ec>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f023 0207 	bic.w	r2, r3, #7
 8005852:	4970      	ldr	r1, [pc, #448]	; (8005a14 <HAL_RCC_ClockConfig+0x1ec>)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	4313      	orrs	r3, r2
 8005858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800585a:	4b6e      	ldr	r3, [pc, #440]	; (8005a14 <HAL_RCC_ClockConfig+0x1ec>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0307 	and.w	r3, r3, #7
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	429a      	cmp	r2, r3
 8005866:	d001      	beq.n	800586c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e0cf      	b.n	8005a0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d010      	beq.n	800589a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689a      	ldr	r2, [r3, #8]
 800587c:	4b66      	ldr	r3, [pc, #408]	; (8005a18 <HAL_RCC_ClockConfig+0x1f0>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005884:	429a      	cmp	r2, r3
 8005886:	d908      	bls.n	800589a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005888:	4b63      	ldr	r3, [pc, #396]	; (8005a18 <HAL_RCC_ClockConfig+0x1f0>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	4960      	ldr	r1, [pc, #384]	; (8005a18 <HAL_RCC_ClockConfig+0x1f0>)
 8005896:	4313      	orrs	r3, r2
 8005898:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d04c      	beq.n	8005940 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2b03      	cmp	r3, #3
 80058ac:	d107      	bne.n	80058be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058ae:	4b5a      	ldr	r3, [pc, #360]	; (8005a18 <HAL_RCC_ClockConfig+0x1f0>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d121      	bne.n	80058fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e0a6      	b.n	8005a0c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d107      	bne.n	80058d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058c6:	4b54      	ldr	r3, [pc, #336]	; (8005a18 <HAL_RCC_ClockConfig+0x1f0>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d115      	bne.n	80058fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e09a      	b.n	8005a0c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d107      	bne.n	80058ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058de:	4b4e      	ldr	r3, [pc, #312]	; (8005a18 <HAL_RCC_ClockConfig+0x1f0>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d109      	bne.n	80058fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e08e      	b.n	8005a0c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058ee:	4b4a      	ldr	r3, [pc, #296]	; (8005a18 <HAL_RCC_ClockConfig+0x1f0>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e086      	b.n	8005a0c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058fe:	4b46      	ldr	r3, [pc, #280]	; (8005a18 <HAL_RCC_ClockConfig+0x1f0>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f023 0203 	bic.w	r2, r3, #3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	4943      	ldr	r1, [pc, #268]	; (8005a18 <HAL_RCC_ClockConfig+0x1f0>)
 800590c:	4313      	orrs	r3, r2
 800590e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005910:	f7fd fdca 	bl	80034a8 <HAL_GetTick>
 8005914:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005916:	e00a      	b.n	800592e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005918:	f7fd fdc6 	bl	80034a8 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	f241 3288 	movw	r2, #5000	; 0x1388
 8005926:	4293      	cmp	r3, r2
 8005928:	d901      	bls.n	800592e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e06e      	b.n	8005a0c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800592e:	4b3a      	ldr	r3, [pc, #232]	; (8005a18 <HAL_RCC_ClockConfig+0x1f0>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f003 020c 	and.w	r2, r3, #12
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	429a      	cmp	r2, r3
 800593e:	d1eb      	bne.n	8005918 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d010      	beq.n	800596e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689a      	ldr	r2, [r3, #8]
 8005950:	4b31      	ldr	r3, [pc, #196]	; (8005a18 <HAL_RCC_ClockConfig+0x1f0>)
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005958:	429a      	cmp	r2, r3
 800595a:	d208      	bcs.n	800596e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800595c:	4b2e      	ldr	r3, [pc, #184]	; (8005a18 <HAL_RCC_ClockConfig+0x1f0>)
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	492b      	ldr	r1, [pc, #172]	; (8005a18 <HAL_RCC_ClockConfig+0x1f0>)
 800596a:	4313      	orrs	r3, r2
 800596c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800596e:	4b29      	ldr	r3, [pc, #164]	; (8005a14 <HAL_RCC_ClockConfig+0x1ec>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0307 	and.w	r3, r3, #7
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	429a      	cmp	r2, r3
 800597a:	d210      	bcs.n	800599e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800597c:	4b25      	ldr	r3, [pc, #148]	; (8005a14 <HAL_RCC_ClockConfig+0x1ec>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f023 0207 	bic.w	r2, r3, #7
 8005984:	4923      	ldr	r1, [pc, #140]	; (8005a14 <HAL_RCC_ClockConfig+0x1ec>)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	4313      	orrs	r3, r2
 800598a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800598c:	4b21      	ldr	r3, [pc, #132]	; (8005a14 <HAL_RCC_ClockConfig+0x1ec>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0307 	and.w	r3, r3, #7
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	429a      	cmp	r2, r3
 8005998:	d001      	beq.n	800599e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e036      	b.n	8005a0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0304 	and.w	r3, r3, #4
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d008      	beq.n	80059bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059aa:	4b1b      	ldr	r3, [pc, #108]	; (8005a18 <HAL_RCC_ClockConfig+0x1f0>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	4918      	ldr	r1, [pc, #96]	; (8005a18 <HAL_RCC_ClockConfig+0x1f0>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0308 	and.w	r3, r3, #8
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d009      	beq.n	80059dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059c8:	4b13      	ldr	r3, [pc, #76]	; (8005a18 <HAL_RCC_ClockConfig+0x1f0>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	00db      	lsls	r3, r3, #3
 80059d6:	4910      	ldr	r1, [pc, #64]	; (8005a18 <HAL_RCC_ClockConfig+0x1f0>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059dc:	f000 f824 	bl	8005a28 <HAL_RCC_GetSysClockFreq>
 80059e0:	4602      	mov	r2, r0
 80059e2:	4b0d      	ldr	r3, [pc, #52]	; (8005a18 <HAL_RCC_ClockConfig+0x1f0>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	091b      	lsrs	r3, r3, #4
 80059e8:	f003 030f 	and.w	r3, r3, #15
 80059ec:	490b      	ldr	r1, [pc, #44]	; (8005a1c <HAL_RCC_ClockConfig+0x1f4>)
 80059ee:	5ccb      	ldrb	r3, [r1, r3]
 80059f0:	f003 031f 	and.w	r3, r3, #31
 80059f4:	fa22 f303 	lsr.w	r3, r2, r3
 80059f8:	4a09      	ldr	r2, [pc, #36]	; (8005a20 <HAL_RCC_ClockConfig+0x1f8>)
 80059fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80059fc:	4b09      	ldr	r3, [pc, #36]	; (8005a24 <HAL_RCC_ClockConfig+0x1fc>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7fd fb97 	bl	8003134 <HAL_InitTick>
 8005a06:	4603      	mov	r3, r0
 8005a08:	72fb      	strb	r3, [r7, #11]

  return status;
 8005a0a:	7afb      	ldrb	r3, [r7, #11]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40022000 	.word	0x40022000
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	0800db08 	.word	0x0800db08
 8005a20:	200000b0 	.word	0x200000b0
 8005a24:	200000b4 	.word	0x200000b4

08005a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b089      	sub	sp, #36	; 0x24
 8005a2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61fb      	str	r3, [r7, #28]
 8005a32:	2300      	movs	r3, #0
 8005a34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a36:	4b3e      	ldr	r3, [pc, #248]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 030c 	and.w	r3, r3, #12
 8005a3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a40:	4b3b      	ldr	r3, [pc, #236]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	f003 0303 	and.w	r3, r3, #3
 8005a48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d005      	beq.n	8005a5c <HAL_RCC_GetSysClockFreq+0x34>
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	2b0c      	cmp	r3, #12
 8005a54:	d121      	bne.n	8005a9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d11e      	bne.n	8005a9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005a5c:	4b34      	ldr	r3, [pc, #208]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0308 	and.w	r3, r3, #8
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d107      	bne.n	8005a78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005a68:	4b31      	ldr	r3, [pc, #196]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a6e:	0a1b      	lsrs	r3, r3, #8
 8005a70:	f003 030f 	and.w	r3, r3, #15
 8005a74:	61fb      	str	r3, [r7, #28]
 8005a76:	e005      	b.n	8005a84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005a78:	4b2d      	ldr	r3, [pc, #180]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	091b      	lsrs	r3, r3, #4
 8005a7e:	f003 030f 	and.w	r3, r3, #15
 8005a82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005a84:	4a2b      	ldr	r2, [pc, #172]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10d      	bne.n	8005ab0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a98:	e00a      	b.n	8005ab0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	2b04      	cmp	r3, #4
 8005a9e:	d102      	bne.n	8005aa6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005aa0:	4b25      	ldr	r3, [pc, #148]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x110>)
 8005aa2:	61bb      	str	r3, [r7, #24]
 8005aa4:	e004      	b.n	8005ab0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d101      	bne.n	8005ab0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005aac:	4b23      	ldr	r3, [pc, #140]	; (8005b3c <HAL_RCC_GetSysClockFreq+0x114>)
 8005aae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	2b0c      	cmp	r3, #12
 8005ab4:	d134      	bne.n	8005b20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ab6:	4b1e      	ldr	r3, [pc, #120]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f003 0303 	and.w	r3, r3, #3
 8005abe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d003      	beq.n	8005ace <HAL_RCC_GetSysClockFreq+0xa6>
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2b03      	cmp	r3, #3
 8005aca:	d003      	beq.n	8005ad4 <HAL_RCC_GetSysClockFreq+0xac>
 8005acc:	e005      	b.n	8005ada <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005ace:	4b1a      	ldr	r3, [pc, #104]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ad0:	617b      	str	r3, [r7, #20]
      break;
 8005ad2:	e005      	b.n	8005ae0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005ad4:	4b19      	ldr	r3, [pc, #100]	; (8005b3c <HAL_RCC_GetSysClockFreq+0x114>)
 8005ad6:	617b      	str	r3, [r7, #20]
      break;
 8005ad8:	e002      	b.n	8005ae0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	617b      	str	r3, [r7, #20]
      break;
 8005ade:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ae0:	4b13      	ldr	r3, [pc, #76]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	091b      	lsrs	r3, r3, #4
 8005ae6:	f003 0307 	and.w	r3, r3, #7
 8005aea:	3301      	adds	r3, #1
 8005aec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005aee:	4b10      	ldr	r3, [pc, #64]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	0a1b      	lsrs	r3, r3, #8
 8005af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	fb02 f203 	mul.w	r2, r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b06:	4b0a      	ldr	r3, [pc, #40]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	0e5b      	lsrs	r3, r3, #25
 8005b0c:	f003 0303 	and.w	r3, r3, #3
 8005b10:	3301      	adds	r3, #1
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005b20:	69bb      	ldr	r3, [r7, #24]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3724      	adds	r7, #36	; 0x24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	40021000 	.word	0x40021000
 8005b34:	0800db20 	.word	0x0800db20
 8005b38:	00f42400 	.word	0x00f42400
 8005b3c:	007a1200 	.word	0x007a1200

08005b40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b44:	4b03      	ldr	r3, [pc, #12]	; (8005b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b46:	681b      	ldr	r3, [r3, #0]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	200000b0 	.word	0x200000b0

08005b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b5c:	f7ff fff0 	bl	8005b40 <HAL_RCC_GetHCLKFreq>
 8005b60:	4602      	mov	r2, r0
 8005b62:	4b06      	ldr	r3, [pc, #24]	; (8005b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	0a1b      	lsrs	r3, r3, #8
 8005b68:	f003 0307 	and.w	r3, r3, #7
 8005b6c:	4904      	ldr	r1, [pc, #16]	; (8005b80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b6e:	5ccb      	ldrb	r3, [r1, r3]
 8005b70:	f003 031f 	and.w	r3, r3, #31
 8005b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	40021000 	.word	0x40021000
 8005b80:	0800db18 	.word	0x0800db18

08005b84 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	220f      	movs	r2, #15
 8005b92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005b94:	4b12      	ldr	r3, [pc, #72]	; (8005be0 <HAL_RCC_GetClockConfig+0x5c>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f003 0203 	and.w	r2, r3, #3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005ba0:	4b0f      	ldr	r3, [pc, #60]	; (8005be0 <HAL_RCC_GetClockConfig+0x5c>)
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005bac:	4b0c      	ldr	r3, [pc, #48]	; (8005be0 <HAL_RCC_GetClockConfig+0x5c>)
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005bb8:	4b09      	ldr	r3, [pc, #36]	; (8005be0 <HAL_RCC_GetClockConfig+0x5c>)
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	08db      	lsrs	r3, r3, #3
 8005bbe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005bc6:	4b07      	ldr	r3, [pc, #28]	; (8005be4 <HAL_RCC_GetClockConfig+0x60>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0207 	and.w	r2, r3, #7
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	601a      	str	r2, [r3, #0]
}
 8005bd2:	bf00      	nop
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	40021000 	.word	0x40021000
 8005be4:	40022000 	.word	0x40022000

08005be8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005bf4:	4b2a      	ldr	r3, [pc, #168]	; (8005ca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005c00:	f7ff f99c 	bl	8004f3c <HAL_PWREx_GetVoltageRange>
 8005c04:	6178      	str	r0, [r7, #20]
 8005c06:	e014      	b.n	8005c32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c08:	4b25      	ldr	r3, [pc, #148]	; (8005ca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c0c:	4a24      	ldr	r2, [pc, #144]	; (8005ca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c12:	6593      	str	r3, [r2, #88]	; 0x58
 8005c14:	4b22      	ldr	r3, [pc, #136]	; (8005ca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005c20:	f7ff f98c 	bl	8004f3c <HAL_PWREx_GetVoltageRange>
 8005c24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005c26:	4b1e      	ldr	r3, [pc, #120]	; (8005ca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c2a:	4a1d      	ldr	r2, [pc, #116]	; (8005ca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c38:	d10b      	bne.n	8005c52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b80      	cmp	r3, #128	; 0x80
 8005c3e:	d919      	bls.n	8005c74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2ba0      	cmp	r3, #160	; 0xa0
 8005c44:	d902      	bls.n	8005c4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c46:	2302      	movs	r3, #2
 8005c48:	613b      	str	r3, [r7, #16]
 8005c4a:	e013      	b.n	8005c74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	613b      	str	r3, [r7, #16]
 8005c50:	e010      	b.n	8005c74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b80      	cmp	r3, #128	; 0x80
 8005c56:	d902      	bls.n	8005c5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005c58:	2303      	movs	r3, #3
 8005c5a:	613b      	str	r3, [r7, #16]
 8005c5c:	e00a      	b.n	8005c74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b80      	cmp	r3, #128	; 0x80
 8005c62:	d102      	bne.n	8005c6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c64:	2302      	movs	r3, #2
 8005c66:	613b      	str	r3, [r7, #16]
 8005c68:	e004      	b.n	8005c74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b70      	cmp	r3, #112	; 0x70
 8005c6e:	d101      	bne.n	8005c74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c70:	2301      	movs	r3, #1
 8005c72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c74:	4b0b      	ldr	r3, [pc, #44]	; (8005ca4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f023 0207 	bic.w	r2, r3, #7
 8005c7c:	4909      	ldr	r1, [pc, #36]	; (8005ca4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c84:	4b07      	ldr	r3, [pc, #28]	; (8005ca4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0307 	and.w	r3, r3, #7
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d001      	beq.n	8005c96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e000      	b.n	8005c98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	40022000 	.word	0x40022000

08005ca8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d031      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ccc:	d01a      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005cce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005cd2:	d814      	bhi.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d009      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005cd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cdc:	d10f      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005cde:	4bac      	ldr	r3, [pc, #688]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	4aab      	ldr	r2, [pc, #684]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ce8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cea:	e00c      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	3304      	adds	r3, #4
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 f9cc 	bl	8006090 <RCCEx_PLLSAI1_Config>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cfc:	e003      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	74fb      	strb	r3, [r7, #19]
      break;
 8005d02:	e000      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005d04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d06:	7cfb      	ldrb	r3, [r7, #19]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10b      	bne.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d0c:	4ba0      	ldr	r3, [pc, #640]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1a:	499d      	ldr	r1, [pc, #628]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005d22:	e001      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d24:	7cfb      	ldrb	r3, [r7, #19]
 8005d26:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 8099 	beq.w	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d36:	2300      	movs	r3, #0
 8005d38:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d3a:	4b95      	ldr	r3, [pc, #596]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005d46:	2301      	movs	r3, #1
 8005d48:	e000      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00d      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d50:	4b8f      	ldr	r3, [pc, #572]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d54:	4a8e      	ldr	r2, [pc, #568]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d5a:	6593      	str	r3, [r2, #88]	; 0x58
 8005d5c:	4b8c      	ldr	r3, [pc, #560]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d64:	60bb      	str	r3, [r7, #8]
 8005d66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d6c:	4b89      	ldr	r3, [pc, #548]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a88      	ldr	r2, [pc, #544]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d78:	f7fd fb96 	bl	80034a8 <HAL_GetTick>
 8005d7c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005d7e:	e009      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d80:	f7fd fb92 	bl	80034a8 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d902      	bls.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	74fb      	strb	r3, [r7, #19]
        break;
 8005d92:	e005      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005d94:	4b7f      	ldr	r3, [pc, #508]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d0ef      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005da0:	7cfb      	ldrb	r3, [r7, #19]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d155      	bne.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005da6:	4b7a      	ldr	r3, [pc, #488]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005db0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d01e      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d019      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005dc2:	4b73      	ldr	r3, [pc, #460]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dcc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005dce:	4b70      	ldr	r3, [pc, #448]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd4:	4a6e      	ldr	r2, [pc, #440]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005dde:	4b6c      	ldr	r3, [pc, #432]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de4:	4a6a      	ldr	r2, [pc, #424]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005dee:	4a68      	ldr	r2, [pc, #416]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d016      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e00:	f7fd fb52 	bl	80034a8 <HAL_GetTick>
 8005e04:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e06:	e00b      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e08:	f7fd fb4e 	bl	80034a8 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d902      	bls.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	74fb      	strb	r3, [r7, #19]
            break;
 8005e1e:	e006      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e20:	4b5b      	ldr	r3, [pc, #364]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d0ec      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005e2e:	7cfb      	ldrb	r3, [r7, #19]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10b      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e34:	4b56      	ldr	r3, [pc, #344]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e42:	4953      	ldr	r1, [pc, #332]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005e4a:	e004      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e4c:	7cfb      	ldrb	r3, [r7, #19]
 8005e4e:	74bb      	strb	r3, [r7, #18]
 8005e50:	e001      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e52:	7cfb      	ldrb	r3, [r7, #19]
 8005e54:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e56:	7c7b      	ldrb	r3, [r7, #17]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d105      	bne.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e5c:	4b4c      	ldr	r3, [pc, #304]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e60:	4a4b      	ldr	r2, [pc, #300]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005e62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00a      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e74:	4b46      	ldr	r3, [pc, #280]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e7a:	f023 0203 	bic.w	r2, r3, #3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	4943      	ldr	r1, [pc, #268]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005e84:	4313      	orrs	r3, r2
 8005e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00a      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e96:	4b3e      	ldr	r3, [pc, #248]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e9c:	f023 020c 	bic.w	r2, r3, #12
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea4:	493a      	ldr	r1, [pc, #232]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0320 	and.w	r3, r3, #32
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00a      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005eb8:	4b35      	ldr	r3, [pc, #212]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ebe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec6:	4932      	ldr	r1, [pc, #200]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00a      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005eda:	4b2d      	ldr	r3, [pc, #180]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee8:	4929      	ldr	r1, [pc, #164]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00a      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005efc:	4b24      	ldr	r3, [pc, #144]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0a:	4921      	ldr	r1, [pc, #132]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00a      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f1e:	4b1c      	ldr	r3, [pc, #112]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2c:	4918      	ldr	r1, [pc, #96]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00a      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f40:	4b13      	ldr	r3, [pc, #76]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4e:	4910      	ldr	r1, [pc, #64]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d02c      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f62:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f70:	4907      	ldr	r1, [pc, #28]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f80:	d10a      	bne.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f82:	4b03      	ldr	r3, [pc, #12]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	4a02      	ldr	r2, [pc, #8]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f8c:	60d3      	str	r3, [r2, #12]
 8005f8e:	e015      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x314>
 8005f90:	40021000 	.word	0x40021000
 8005f94:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005fa0:	d10c      	bne.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 f871 	bl	8006090 <RCCEx_PLLSAI1_Config>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005fb2:	7cfb      	ldrb	r3, [r7, #19]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d001      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8005fb8:	7cfb      	ldrb	r3, [r7, #19]
 8005fba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d028      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fc8:	4b30      	ldr	r3, [pc, #192]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd6:	492d      	ldr	r1, [pc, #180]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fe6:	d106      	bne.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fe8:	4b28      	ldr	r3, [pc, #160]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	4a27      	ldr	r2, [pc, #156]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ff2:	60d3      	str	r3, [r2, #12]
 8005ff4:	e011      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ffe:	d10c      	bne.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3304      	adds	r3, #4
 8006004:	2101      	movs	r1, #1
 8006006:	4618      	mov	r0, r3
 8006008:	f000 f842 	bl	8006090 <RCCEx_PLLSAI1_Config>
 800600c:	4603      	mov	r3, r0
 800600e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006010:	7cfb      	ldrb	r3, [r7, #19]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8006016:	7cfb      	ldrb	r3, [r7, #19]
 8006018:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d01c      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006026:	4b19      	ldr	r3, [pc, #100]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800602c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006034:	4915      	ldr	r1, [pc, #84]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006036:	4313      	orrs	r3, r2
 8006038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006040:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006044:	d10c      	bne.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	3304      	adds	r3, #4
 800604a:	2102      	movs	r1, #2
 800604c:	4618      	mov	r0, r3
 800604e:	f000 f81f 	bl	8006090 <RCCEx_PLLSAI1_Config>
 8006052:	4603      	mov	r3, r0
 8006054:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006056:	7cfb      	ldrb	r3, [r7, #19]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800605c:	7cfb      	ldrb	r3, [r7, #19]
 800605e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00a      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800606c:	4b07      	ldr	r3, [pc, #28]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800606e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006072:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800607a:	4904      	ldr	r1, [pc, #16]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800607c:	4313      	orrs	r3, r2
 800607e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006082:	7cbb      	ldrb	r3, [r7, #18]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	40021000 	.word	0x40021000

08006090 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800609e:	4b74      	ldr	r3, [pc, #464]	; (8006270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	f003 0303 	and.w	r3, r3, #3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d018      	beq.n	80060dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80060aa:	4b71      	ldr	r3, [pc, #452]	; (8006270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f003 0203 	and.w	r2, r3, #3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d10d      	bne.n	80060d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
       ||
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d009      	beq.n	80060d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80060c2:	4b6b      	ldr	r3, [pc, #428]	; (8006270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	091b      	lsrs	r3, r3, #4
 80060c8:	f003 0307 	and.w	r3, r3, #7
 80060cc:	1c5a      	adds	r2, r3, #1
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
       ||
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d047      	beq.n	8006166 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	73fb      	strb	r3, [r7, #15]
 80060da:	e044      	b.n	8006166 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b03      	cmp	r3, #3
 80060e2:	d018      	beq.n	8006116 <RCCEx_PLLSAI1_Config+0x86>
 80060e4:	2b03      	cmp	r3, #3
 80060e6:	d825      	bhi.n	8006134 <RCCEx_PLLSAI1_Config+0xa4>
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d002      	beq.n	80060f2 <RCCEx_PLLSAI1_Config+0x62>
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d009      	beq.n	8006104 <RCCEx_PLLSAI1_Config+0x74>
 80060f0:	e020      	b.n	8006134 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80060f2:	4b5f      	ldr	r3, [pc, #380]	; (8006270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d11d      	bne.n	800613a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006102:	e01a      	b.n	800613a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006104:	4b5a      	ldr	r3, [pc, #360]	; (8006270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800610c:	2b00      	cmp	r3, #0
 800610e:	d116      	bne.n	800613e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006114:	e013      	b.n	800613e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006116:	4b56      	ldr	r3, [pc, #344]	; (8006270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10f      	bne.n	8006142 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006122:	4b53      	ldr	r3, [pc, #332]	; (8006270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d109      	bne.n	8006142 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006132:	e006      	b.n	8006142 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	73fb      	strb	r3, [r7, #15]
      break;
 8006138:	e004      	b.n	8006144 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800613a:	bf00      	nop
 800613c:	e002      	b.n	8006144 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800613e:	bf00      	nop
 8006140:	e000      	b.n	8006144 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006142:	bf00      	nop
    }

    if(status == HAL_OK)
 8006144:	7bfb      	ldrb	r3, [r7, #15]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10d      	bne.n	8006166 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800614a:	4b49      	ldr	r3, [pc, #292]	; (8006270 <RCCEx_PLLSAI1_Config+0x1e0>)
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6819      	ldr	r1, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	3b01      	subs	r3, #1
 800615c:	011b      	lsls	r3, r3, #4
 800615e:	430b      	orrs	r3, r1
 8006160:	4943      	ldr	r1, [pc, #268]	; (8006270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006162:	4313      	orrs	r3, r2
 8006164:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006166:	7bfb      	ldrb	r3, [r7, #15]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d17c      	bne.n	8006266 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800616c:	4b40      	ldr	r3, [pc, #256]	; (8006270 <RCCEx_PLLSAI1_Config+0x1e0>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a3f      	ldr	r2, [pc, #252]	; (8006270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006172:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006176:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006178:	f7fd f996 	bl	80034a8 <HAL_GetTick>
 800617c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800617e:	e009      	b.n	8006194 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006180:	f7fd f992 	bl	80034a8 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d902      	bls.n	8006194 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	73fb      	strb	r3, [r7, #15]
        break;
 8006192:	e005      	b.n	80061a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006194:	4b36      	ldr	r3, [pc, #216]	; (8006270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1ef      	bne.n	8006180 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d15f      	bne.n	8006266 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d110      	bne.n	80061ce <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061ac:	4b30      	ldr	r3, [pc, #192]	; (8006270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80061b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	6892      	ldr	r2, [r2, #8]
 80061bc:	0211      	lsls	r1, r2, #8
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	68d2      	ldr	r2, [r2, #12]
 80061c2:	06d2      	lsls	r2, r2, #27
 80061c4:	430a      	orrs	r2, r1
 80061c6:	492a      	ldr	r1, [pc, #168]	; (8006270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	610b      	str	r3, [r1, #16]
 80061cc:	e027      	b.n	800621e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d112      	bne.n	80061fa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061d4:	4b26      	ldr	r3, [pc, #152]	; (8006270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80061dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	6892      	ldr	r2, [r2, #8]
 80061e4:	0211      	lsls	r1, r2, #8
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	6912      	ldr	r2, [r2, #16]
 80061ea:	0852      	lsrs	r2, r2, #1
 80061ec:	3a01      	subs	r2, #1
 80061ee:	0552      	lsls	r2, r2, #21
 80061f0:	430a      	orrs	r2, r1
 80061f2:	491f      	ldr	r1, [pc, #124]	; (8006270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	610b      	str	r3, [r1, #16]
 80061f8:	e011      	b.n	800621e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061fa:	4b1d      	ldr	r3, [pc, #116]	; (8006270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006202:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	6892      	ldr	r2, [r2, #8]
 800620a:	0211      	lsls	r1, r2, #8
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	6952      	ldr	r2, [r2, #20]
 8006210:	0852      	lsrs	r2, r2, #1
 8006212:	3a01      	subs	r2, #1
 8006214:	0652      	lsls	r2, r2, #25
 8006216:	430a      	orrs	r2, r1
 8006218:	4915      	ldr	r1, [pc, #84]	; (8006270 <RCCEx_PLLSAI1_Config+0x1e0>)
 800621a:	4313      	orrs	r3, r2
 800621c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800621e:	4b14      	ldr	r3, [pc, #80]	; (8006270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a13      	ldr	r2, [pc, #76]	; (8006270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006224:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006228:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800622a:	f7fd f93d 	bl	80034a8 <HAL_GetTick>
 800622e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006230:	e009      	b.n	8006246 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006232:	f7fd f939 	bl	80034a8 <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d902      	bls.n	8006246 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	73fb      	strb	r3, [r7, #15]
          break;
 8006244:	e005      	b.n	8006252 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006246:	4b0a      	ldr	r3, [pc, #40]	; (8006270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0ef      	beq.n	8006232 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006252:	7bfb      	ldrb	r3, [r7, #15]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d106      	bne.n	8006266 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006258:	4b05      	ldr	r3, [pc, #20]	; (8006270 <RCCEx_PLLSAI1_Config+0x1e0>)
 800625a:	691a      	ldr	r2, [r3, #16]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	4903      	ldr	r1, [pc, #12]	; (8006270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006262:	4313      	orrs	r3, r2
 8006264:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006266:	7bfb      	ldrb	r3, [r7, #15]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	40021000 	.word	0x40021000

08006274 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e095      	b.n	80063b2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628a:	2b00      	cmp	r3, #0
 800628c:	d108      	bne.n	80062a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006296:	d009      	beq.n	80062ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	61da      	str	r2, [r3, #28]
 800629e:	e005      	b.n	80062ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d106      	bne.n	80062cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7fc febe 	bl	8003048 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2202      	movs	r2, #2
 80062d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062ec:	d902      	bls.n	80062f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80062ee:	2300      	movs	r3, #0
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	e002      	b.n	80062fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80062f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006302:	d007      	beq.n	8006314 <HAL_SPI_Init+0xa0>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800630c:	d002      	beq.n	8006314 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006324:	431a      	orrs	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	431a      	orrs	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	431a      	orrs	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800634c:	431a      	orrs	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006356:	ea42 0103 	orr.w	r1, r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	0c1b      	lsrs	r3, r3, #16
 8006370:	f003 0204 	and.w	r2, r3, #4
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	f003 0310 	and.w	r3, r3, #16
 800637c:	431a      	orrs	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006382:	f003 0308 	and.w	r3, r3, #8
 8006386:	431a      	orrs	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006390:	ea42 0103 	orr.w	r1, r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b088      	sub	sp, #32
 80063be:	af00      	add	r7, sp, #0
 80063c0:	60f8      	str	r0, [r7, #12]
 80063c2:	60b9      	str	r1, [r7, #8]
 80063c4:	603b      	str	r3, [r7, #0]
 80063c6:	4613      	mov	r3, r2
 80063c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063ca:	2300      	movs	r3, #0
 80063cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d101      	bne.n	80063dc <HAL_SPI_Transmit+0x22>
 80063d8:	2302      	movs	r3, #2
 80063da:	e158      	b.n	800668e <HAL_SPI_Transmit+0x2d4>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063e4:	f7fd f860 	bl	80034a8 <HAL_GetTick>
 80063e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80063ea:	88fb      	ldrh	r3, [r7, #6]
 80063ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d002      	beq.n	8006400 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063fa:	2302      	movs	r3, #2
 80063fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063fe:	e13d      	b.n	800667c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d002      	beq.n	800640c <HAL_SPI_Transmit+0x52>
 8006406:	88fb      	ldrh	r3, [r7, #6]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d102      	bne.n	8006412 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006410:	e134      	b.n	800667c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2203      	movs	r2, #3
 8006416:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	88fa      	ldrh	r2, [r7, #6]
 800642a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	88fa      	ldrh	r2, [r7, #6]
 8006430:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800645c:	d10f      	bne.n	800647e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800646c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800647c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006488:	2b40      	cmp	r3, #64	; 0x40
 800648a:	d007      	beq.n	800649c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800649a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064a4:	d94b      	bls.n	800653e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <HAL_SPI_Transmit+0xfa>
 80064ae:	8afb      	ldrh	r3, [r7, #22]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d13e      	bne.n	8006532 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b8:	881a      	ldrh	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c4:	1c9a      	adds	r2, r3, #2
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	3b01      	subs	r3, #1
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064d8:	e02b      	b.n	8006532 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f003 0302 	and.w	r3, r3, #2
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d112      	bne.n	800650e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ec:	881a      	ldrh	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f8:	1c9a      	adds	r2, r3, #2
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006502:	b29b      	uxth	r3, r3
 8006504:	3b01      	subs	r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800650c:	e011      	b.n	8006532 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800650e:	f7fc ffcb 	bl	80034a8 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	429a      	cmp	r2, r3
 800651c:	d803      	bhi.n	8006526 <HAL_SPI_Transmit+0x16c>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006524:	d102      	bne.n	800652c <HAL_SPI_Transmit+0x172>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d102      	bne.n	8006532 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006530:	e0a4      	b.n	800667c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006536:	b29b      	uxth	r3, r3
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1ce      	bne.n	80064da <HAL_SPI_Transmit+0x120>
 800653c:	e07c      	b.n	8006638 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <HAL_SPI_Transmit+0x192>
 8006546:	8afb      	ldrh	r3, [r7, #22]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d170      	bne.n	800662e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006550:	b29b      	uxth	r3, r3
 8006552:	2b01      	cmp	r3, #1
 8006554:	d912      	bls.n	800657c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655a:	881a      	ldrh	r2, [r3, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006566:	1c9a      	adds	r2, r3, #2
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006570:	b29b      	uxth	r3, r3
 8006572:	3b02      	subs	r3, #2
 8006574:	b29a      	uxth	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	87da      	strh	r2, [r3, #62]	; 0x3e
 800657a:	e058      	b.n	800662e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	330c      	adds	r3, #12
 8006586:	7812      	ldrb	r2, [r2, #0]
 8006588:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658e:	1c5a      	adds	r2, r3, #1
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006598:	b29b      	uxth	r3, r3
 800659a:	3b01      	subs	r3, #1
 800659c:	b29a      	uxth	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80065a2:	e044      	b.n	800662e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d12b      	bne.n	800660a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d912      	bls.n	80065e2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c0:	881a      	ldrh	r2, [r3, #0]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	1c9a      	adds	r2, r3, #2
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	3b02      	subs	r3, #2
 80065da:	b29a      	uxth	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065e0:	e025      	b.n	800662e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	330c      	adds	r3, #12
 80065ec:	7812      	ldrb	r2, [r2, #0]
 80065ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f4:	1c5a      	adds	r2, r3, #1
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065fe:	b29b      	uxth	r3, r3
 8006600:	3b01      	subs	r3, #1
 8006602:	b29a      	uxth	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006608:	e011      	b.n	800662e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800660a:	f7fc ff4d 	bl	80034a8 <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	429a      	cmp	r2, r3
 8006618:	d803      	bhi.n	8006622 <HAL_SPI_Transmit+0x268>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006620:	d102      	bne.n	8006628 <HAL_SPI_Transmit+0x26e>
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d102      	bne.n	800662e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800662c:	e026      	b.n	800667c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006632:	b29b      	uxth	r3, r3
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1b5      	bne.n	80065a4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006638:	69ba      	ldr	r2, [r7, #24]
 800663a:	6839      	ldr	r1, [r7, #0]
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f000 f949 	bl	80068d4 <SPI_EndRxTxTransaction>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d002      	beq.n	800664e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2220      	movs	r2, #32
 800664c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10a      	bne.n	800666c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006656:	2300      	movs	r3, #0
 8006658:	613b      	str	r3, [r7, #16]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	613b      	str	r3, [r7, #16]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	613b      	str	r3, [r7, #16]
 800666a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	77fb      	strb	r3, [r7, #31]
 8006678:	e000      	b.n	800667c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800667a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800668c:	7ffb      	ldrb	r3, [r7, #31]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3720      	adds	r7, #32
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
	...

08006698 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b088      	sub	sp, #32
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	603b      	str	r3, [r7, #0]
 80066a4:	4613      	mov	r3, r2
 80066a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066a8:	f7fc fefe 	bl	80034a8 <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b0:	1a9b      	subs	r3, r3, r2
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	4413      	add	r3, r2
 80066b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80066b8:	f7fc fef6 	bl	80034a8 <HAL_GetTick>
 80066bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80066be:	4b39      	ldr	r3, [pc, #228]	; (80067a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	015b      	lsls	r3, r3, #5
 80066c4:	0d1b      	lsrs	r3, r3, #20
 80066c6:	69fa      	ldr	r2, [r7, #28]
 80066c8:	fb02 f303 	mul.w	r3, r2, r3
 80066cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066ce:	e054      	b.n	800677a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d6:	d050      	beq.n	800677a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066d8:	f7fc fee6 	bl	80034a8 <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	69fa      	ldr	r2, [r7, #28]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d902      	bls.n	80066ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d13d      	bne.n	800676a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006706:	d111      	bne.n	800672c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006710:	d004      	beq.n	800671c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800671a:	d107      	bne.n	800672c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800672a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006734:	d10f      	bne.n	8006756 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006744:	601a      	str	r2, [r3, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006754:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e017      	b.n	800679a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006770:	2300      	movs	r3, #0
 8006772:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	3b01      	subs	r3, #1
 8006778:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	689a      	ldr	r2, [r3, #8]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	4013      	ands	r3, r2
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	429a      	cmp	r2, r3
 8006788:	bf0c      	ite	eq
 800678a:	2301      	moveq	r3, #1
 800678c:	2300      	movne	r3, #0
 800678e:	b2db      	uxtb	r3, r3
 8006790:	461a      	mov	r2, r3
 8006792:	79fb      	ldrb	r3, [r7, #7]
 8006794:	429a      	cmp	r2, r3
 8006796:	d19b      	bne.n	80066d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3720      	adds	r7, #32
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	200000b0 	.word	0x200000b0

080067a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08a      	sub	sp, #40	; 0x28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80067b6:	2300      	movs	r3, #0
 80067b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80067ba:	f7fc fe75 	bl	80034a8 <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c2:	1a9b      	subs	r3, r3, r2
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	4413      	add	r3, r2
 80067c8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80067ca:	f7fc fe6d 	bl	80034a8 <HAL_GetTick>
 80067ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	330c      	adds	r3, #12
 80067d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80067d8:	4b3d      	ldr	r3, [pc, #244]	; (80068d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	4613      	mov	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	00da      	lsls	r2, r3, #3
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	0d1b      	lsrs	r3, r3, #20
 80067e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ea:	fb02 f303 	mul.w	r3, r2, r3
 80067ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80067f0:	e060      	b.n	80068b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80067f8:	d107      	bne.n	800680a <SPI_WaitFifoStateUntilTimeout+0x62>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d104      	bne.n	800680a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	b2db      	uxtb	r3, r3
 8006806:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006808:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006810:	d050      	beq.n	80068b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006812:	f7fc fe49 	bl	80034a8 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800681e:	429a      	cmp	r2, r3
 8006820:	d902      	bls.n	8006828 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	2b00      	cmp	r3, #0
 8006826:	d13d      	bne.n	80068a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006836:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006840:	d111      	bne.n	8006866 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800684a:	d004      	beq.n	8006856 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006854:	d107      	bne.n	8006866 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006864:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800686e:	d10f      	bne.n	8006890 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800687e:	601a      	str	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800688e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	e010      	b.n	80068c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d101      	bne.n	80068ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	3b01      	subs	r3, #1
 80068b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689a      	ldr	r2, [r3, #8]
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	4013      	ands	r3, r2
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d196      	bne.n	80067f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3728      	adds	r7, #40	; 0x28
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	200000b0 	.word	0x200000b0

080068d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af02      	add	r7, sp, #8
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f7ff ff5b 	bl	80067a8 <SPI_WaitFifoStateUntilTimeout>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d007      	beq.n	8006908 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068fc:	f043 0220 	orr.w	r2, r3, #32
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e027      	b.n	8006958 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	2200      	movs	r2, #0
 8006910:	2180      	movs	r1, #128	; 0x80
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f7ff fec0 	bl	8006698 <SPI_WaitFlagStateUntilTimeout>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d007      	beq.n	800692e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006922:	f043 0220 	orr.w	r2, r3, #32
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e014      	b.n	8006958 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2200      	movs	r2, #0
 8006936:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f7ff ff34 	bl	80067a8 <SPI_WaitFifoStateUntilTimeout>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d007      	beq.n	8006956 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800694a:	f043 0220 	orr.w	r2, r3, #32
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e000      	b.n	8006958 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e049      	b.n	8006a06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d106      	bne.n	800698c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7fc fba2 	bl	80030d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2202      	movs	r2, #2
 8006990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	3304      	adds	r3, #4
 800699c:	4619      	mov	r1, r3
 800699e:	4610      	mov	r0, r2
 80069a0:	f000 fae6 	bl	8006f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
	...

08006a10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d001      	beq.n	8006a28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e033      	b.n	8006a90 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a19      	ldr	r2, [pc, #100]	; (8006a9c <HAL_TIM_Base_Start+0x8c>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d009      	beq.n	8006a4e <HAL_TIM_Base_Start+0x3e>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a42:	d004      	beq.n	8006a4e <HAL_TIM_Base_Start+0x3e>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a15      	ldr	r2, [pc, #84]	; (8006aa0 <HAL_TIM_Base_Start+0x90>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d115      	bne.n	8006a7a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689a      	ldr	r2, [r3, #8]
 8006a54:	4b13      	ldr	r3, [pc, #76]	; (8006aa4 <HAL_TIM_Base_Start+0x94>)
 8006a56:	4013      	ands	r3, r2
 8006a58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2b06      	cmp	r3, #6
 8006a5e:	d015      	beq.n	8006a8c <HAL_TIM_Base_Start+0x7c>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a66:	d011      	beq.n	8006a8c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f042 0201 	orr.w	r2, r2, #1
 8006a76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a78:	e008      	b.n	8006a8c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f042 0201 	orr.w	r2, r2, #1
 8006a88:	601a      	str	r2, [r3, #0]
 8006a8a:	e000      	b.n	8006a8e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	40012c00 	.word	0x40012c00
 8006aa0:	40014000 	.word	0x40014000
 8006aa4:	00010007 	.word	0x00010007

08006aa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d001      	beq.n	8006ac0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e03b      	b.n	8006b38 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0201 	orr.w	r2, r2, #1
 8006ad6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a19      	ldr	r2, [pc, #100]	; (8006b44 <HAL_TIM_Base_Start_IT+0x9c>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d009      	beq.n	8006af6 <HAL_TIM_Base_Start_IT+0x4e>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aea:	d004      	beq.n	8006af6 <HAL_TIM_Base_Start_IT+0x4e>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a15      	ldr	r2, [pc, #84]	; (8006b48 <HAL_TIM_Base_Start_IT+0xa0>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d115      	bne.n	8006b22 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	4b13      	ldr	r3, [pc, #76]	; (8006b4c <HAL_TIM_Base_Start_IT+0xa4>)
 8006afe:	4013      	ands	r3, r2
 8006b00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2b06      	cmp	r3, #6
 8006b06:	d015      	beq.n	8006b34 <HAL_TIM_Base_Start_IT+0x8c>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b0e:	d011      	beq.n	8006b34 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f042 0201 	orr.w	r2, r2, #1
 8006b1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b20:	e008      	b.n	8006b34 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f042 0201 	orr.w	r2, r2, #1
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	e000      	b.n	8006b36 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	40012c00 	.word	0x40012c00
 8006b48:	40014000 	.word	0x40014000
 8006b4c:	00010007 	.word	0x00010007

08006b50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d122      	bne.n	8006bac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f003 0302 	and.w	r3, r3, #2
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d11b      	bne.n	8006bac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f06f 0202 	mvn.w	r2, #2
 8006b7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	f003 0303 	and.w	r3, r3, #3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d003      	beq.n	8006b9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f9ce 	bl	8006f34 <HAL_TIM_IC_CaptureCallback>
 8006b98:	e005      	b.n	8006ba6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f9c0 	bl	8006f20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f9d1 	bl	8006f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	f003 0304 	and.w	r3, r3, #4
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d122      	bne.n	8006c00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f003 0304 	and.w	r3, r3, #4
 8006bc4:	2b04      	cmp	r3, #4
 8006bc6:	d11b      	bne.n	8006c00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f06f 0204 	mvn.w	r2, #4
 8006bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2202      	movs	r2, #2
 8006bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d003      	beq.n	8006bee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f9a4 	bl	8006f34 <HAL_TIM_IC_CaptureCallback>
 8006bec:	e005      	b.n	8006bfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f996 	bl	8006f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f9a7 	bl	8006f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	f003 0308 	and.w	r3, r3, #8
 8006c0a:	2b08      	cmp	r3, #8
 8006c0c:	d122      	bne.n	8006c54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	f003 0308 	and.w	r3, r3, #8
 8006c18:	2b08      	cmp	r3, #8
 8006c1a:	d11b      	bne.n	8006c54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f06f 0208 	mvn.w	r2, #8
 8006c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2204      	movs	r2, #4
 8006c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	f003 0303 	and.w	r3, r3, #3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f97a 	bl	8006f34 <HAL_TIM_IC_CaptureCallback>
 8006c40:	e005      	b.n	8006c4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f96c 	bl	8006f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f97d 	bl	8006f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	f003 0310 	and.w	r3, r3, #16
 8006c5e:	2b10      	cmp	r3, #16
 8006c60:	d122      	bne.n	8006ca8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f003 0310 	and.w	r3, r3, #16
 8006c6c:	2b10      	cmp	r3, #16
 8006c6e:	d11b      	bne.n	8006ca8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f06f 0210 	mvn.w	r2, #16
 8006c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2208      	movs	r2, #8
 8006c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	69db      	ldr	r3, [r3, #28]
 8006c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f950 	bl	8006f34 <HAL_TIM_IC_CaptureCallback>
 8006c94:	e005      	b.n	8006ca2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f942 	bl	8006f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f953 	bl	8006f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d10e      	bne.n	8006cd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d107      	bne.n	8006cd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f06f 0201 	mvn.w	r2, #1
 8006ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7fc f91a 	bl	8002f08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cde:	2b80      	cmp	r3, #128	; 0x80
 8006ce0:	d10e      	bne.n	8006d00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cec:	2b80      	cmp	r3, #128	; 0x80
 8006cee:	d107      	bne.n	8006d00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 faa6 	bl	800724c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d0e:	d10e      	bne.n	8006d2e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1a:	2b80      	cmp	r3, #128	; 0x80
 8006d1c:	d107      	bne.n	8006d2e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fa99 	bl	8007260 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d38:	2b40      	cmp	r3, #64	; 0x40
 8006d3a:	d10e      	bne.n	8006d5a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d46:	2b40      	cmp	r3, #64	; 0x40
 8006d48:	d107      	bne.n	8006d5a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f901 	bl	8006f5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	f003 0320 	and.w	r3, r3, #32
 8006d64:	2b20      	cmp	r3, #32
 8006d66:	d10e      	bne.n	8006d86 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	f003 0320 	and.w	r3, r3, #32
 8006d72:	2b20      	cmp	r3, #32
 8006d74:	d107      	bne.n	8006d86 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f06f 0220 	mvn.w	r2, #32
 8006d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fa59 	bl	8007238 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d86:	bf00      	nop
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b084      	sub	sp, #16
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d101      	bne.n	8006daa <HAL_TIM_ConfigClockSource+0x1c>
 8006da6:	2302      	movs	r3, #2
 8006da8:	e0b6      	b.n	8006f18 <HAL_TIM_ConfigClockSource+0x18a>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2202      	movs	r2, #2
 8006db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dc8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006dcc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dd4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006de6:	d03e      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0xd8>
 8006de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dec:	f200 8087 	bhi.w	8006efe <HAL_TIM_ConfigClockSource+0x170>
 8006df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df4:	f000 8086 	beq.w	8006f04 <HAL_TIM_ConfigClockSource+0x176>
 8006df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dfc:	d87f      	bhi.n	8006efe <HAL_TIM_ConfigClockSource+0x170>
 8006dfe:	2b70      	cmp	r3, #112	; 0x70
 8006e00:	d01a      	beq.n	8006e38 <HAL_TIM_ConfigClockSource+0xaa>
 8006e02:	2b70      	cmp	r3, #112	; 0x70
 8006e04:	d87b      	bhi.n	8006efe <HAL_TIM_ConfigClockSource+0x170>
 8006e06:	2b60      	cmp	r3, #96	; 0x60
 8006e08:	d050      	beq.n	8006eac <HAL_TIM_ConfigClockSource+0x11e>
 8006e0a:	2b60      	cmp	r3, #96	; 0x60
 8006e0c:	d877      	bhi.n	8006efe <HAL_TIM_ConfigClockSource+0x170>
 8006e0e:	2b50      	cmp	r3, #80	; 0x50
 8006e10:	d03c      	beq.n	8006e8c <HAL_TIM_ConfigClockSource+0xfe>
 8006e12:	2b50      	cmp	r3, #80	; 0x50
 8006e14:	d873      	bhi.n	8006efe <HAL_TIM_ConfigClockSource+0x170>
 8006e16:	2b40      	cmp	r3, #64	; 0x40
 8006e18:	d058      	beq.n	8006ecc <HAL_TIM_ConfigClockSource+0x13e>
 8006e1a:	2b40      	cmp	r3, #64	; 0x40
 8006e1c:	d86f      	bhi.n	8006efe <HAL_TIM_ConfigClockSource+0x170>
 8006e1e:	2b30      	cmp	r3, #48	; 0x30
 8006e20:	d064      	beq.n	8006eec <HAL_TIM_ConfigClockSource+0x15e>
 8006e22:	2b30      	cmp	r3, #48	; 0x30
 8006e24:	d86b      	bhi.n	8006efe <HAL_TIM_ConfigClockSource+0x170>
 8006e26:	2b20      	cmp	r3, #32
 8006e28:	d060      	beq.n	8006eec <HAL_TIM_ConfigClockSource+0x15e>
 8006e2a:	2b20      	cmp	r3, #32
 8006e2c:	d867      	bhi.n	8006efe <HAL_TIM_ConfigClockSource+0x170>
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d05c      	beq.n	8006eec <HAL_TIM_ConfigClockSource+0x15e>
 8006e32:	2b10      	cmp	r3, #16
 8006e34:	d05a      	beq.n	8006eec <HAL_TIM_ConfigClockSource+0x15e>
 8006e36:	e062      	b.n	8006efe <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6818      	ldr	r0, [r3, #0]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	6899      	ldr	r1, [r3, #8]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	f000 f970 	bl	800712c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e5a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	609a      	str	r2, [r3, #8]
      break;
 8006e64:	e04f      	b.n	8006f06 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6818      	ldr	r0, [r3, #0]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	6899      	ldr	r1, [r3, #8]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	f000 f959 	bl	800712c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e88:	609a      	str	r2, [r3, #8]
      break;
 8006e8a:	e03c      	b.n	8006f06 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6818      	ldr	r0, [r3, #0]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	6859      	ldr	r1, [r3, #4]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	461a      	mov	r2, r3
 8006e9a:	f000 f8cd 	bl	8007038 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2150      	movs	r1, #80	; 0x50
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f000 f926 	bl	80070f6 <TIM_ITRx_SetConfig>
      break;
 8006eaa:	e02c      	b.n	8006f06 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6818      	ldr	r0, [r3, #0]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	6859      	ldr	r1, [r3, #4]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	f000 f8ec 	bl	8007096 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2160      	movs	r1, #96	; 0x60
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 f916 	bl	80070f6 <TIM_ITRx_SetConfig>
      break;
 8006eca:	e01c      	b.n	8006f06 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6818      	ldr	r0, [r3, #0]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	6859      	ldr	r1, [r3, #4]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	461a      	mov	r2, r3
 8006eda:	f000 f8ad 	bl	8007038 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2140      	movs	r1, #64	; 0x40
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f000 f906 	bl	80070f6 <TIM_ITRx_SetConfig>
      break;
 8006eea:	e00c      	b.n	8006f06 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	4610      	mov	r0, r2
 8006ef8:	f000 f8fd 	bl	80070f6 <TIM_ITRx_SetConfig>
      break;
 8006efc:	e003      	b.n	8006f06 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	73fb      	strb	r3, [r7, #15]
      break;
 8006f02:	e000      	b.n	8006f06 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006f04:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a2a      	ldr	r2, [pc, #168]	; (800702c <TIM_Base_SetConfig+0xbc>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d003      	beq.n	8006f90 <TIM_Base_SetConfig+0x20>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f8e:	d108      	bne.n	8006fa2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a21      	ldr	r2, [pc, #132]	; (800702c <TIM_Base_SetConfig+0xbc>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d00b      	beq.n	8006fc2 <TIM_Base_SetConfig+0x52>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fb0:	d007      	beq.n	8006fc2 <TIM_Base_SetConfig+0x52>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a1e      	ldr	r2, [pc, #120]	; (8007030 <TIM_Base_SetConfig+0xc0>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d003      	beq.n	8006fc2 <TIM_Base_SetConfig+0x52>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a1d      	ldr	r2, [pc, #116]	; (8007034 <TIM_Base_SetConfig+0xc4>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d108      	bne.n	8006fd4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a0c      	ldr	r2, [pc, #48]	; (800702c <TIM_Base_SetConfig+0xbc>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d007      	beq.n	8007010 <TIM_Base_SetConfig+0xa0>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a0b      	ldr	r2, [pc, #44]	; (8007030 <TIM_Base_SetConfig+0xc0>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d003      	beq.n	8007010 <TIM_Base_SetConfig+0xa0>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a0a      	ldr	r2, [pc, #40]	; (8007034 <TIM_Base_SetConfig+0xc4>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d103      	bne.n	8007018 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	691a      	ldr	r2, [r3, #16]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	615a      	str	r2, [r3, #20]
}
 800701e:	bf00      	nop
 8007020:	3714      	adds	r7, #20
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	40012c00 	.word	0x40012c00
 8007030:	40014000 	.word	0x40014000
 8007034:	40014400 	.word	0x40014400

08007038 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007038:	b480      	push	{r7}
 800703a:	b087      	sub	sp, #28
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	f023 0201 	bic.w	r2, r3, #1
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	011b      	lsls	r3, r3, #4
 8007068:	693a      	ldr	r2, [r7, #16]
 800706a:	4313      	orrs	r3, r2
 800706c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f023 030a 	bic.w	r3, r3, #10
 8007074:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	4313      	orrs	r3, r2
 800707c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	621a      	str	r2, [r3, #32]
}
 800708a:	bf00      	nop
 800708c:	371c      	adds	r7, #28
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007096:	b480      	push	{r7}
 8007098:	b087      	sub	sp, #28
 800709a:	af00      	add	r7, sp, #0
 800709c:	60f8      	str	r0, [r7, #12]
 800709e:	60b9      	str	r1, [r7, #8]
 80070a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	f023 0210 	bic.w	r2, r3, #16
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6a1b      	ldr	r3, [r3, #32]
 80070b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	031b      	lsls	r3, r3, #12
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	011b      	lsls	r3, r3, #4
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	4313      	orrs	r3, r2
 80070dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	621a      	str	r2, [r3, #32]
}
 80070ea:	bf00      	nop
 80070ec:	371c      	adds	r7, #28
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b085      	sub	sp, #20
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800710c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800710e:	683a      	ldr	r2, [r7, #0]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4313      	orrs	r3, r2
 8007114:	f043 0307 	orr.w	r3, r3, #7
 8007118:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	609a      	str	r2, [r3, #8]
}
 8007120:	bf00      	nop
 8007122:	3714      	adds	r7, #20
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800712c:	b480      	push	{r7}
 800712e:	b087      	sub	sp, #28
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
 8007138:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007146:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	021a      	lsls	r2, r3, #8
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	431a      	orrs	r2, r3
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	4313      	orrs	r3, r2
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	4313      	orrs	r3, r2
 8007158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	609a      	str	r2, [r3, #8]
}
 8007160:	bf00      	nop
 8007162:	371c      	adds	r7, #28
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800717c:	2b01      	cmp	r3, #1
 800717e:	d101      	bne.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007180:	2302      	movs	r3, #2
 8007182:	e04f      	b.n	8007224 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2202      	movs	r2, #2
 8007190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a21      	ldr	r2, [pc, #132]	; (8007230 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d108      	bne.n	80071c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80071b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	4313      	orrs	r3, r2
 80071be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a14      	ldr	r2, [pc, #80]	; (8007230 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d009      	beq.n	80071f8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ec:	d004      	beq.n	80071f8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a10      	ldr	r2, [pc, #64]	; (8007234 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d10c      	bne.n	8007212 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	4313      	orrs	r3, r2
 8007208:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	40012c00 	.word	0x40012c00
 8007234:	40014000 	.word	0x40014000

08007238 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007268:	bf00      	nop
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <__errno>:
 8007274:	4b01      	ldr	r3, [pc, #4]	; (800727c <__errno+0x8>)
 8007276:	6818      	ldr	r0, [r3, #0]
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	200000bc 	.word	0x200000bc

08007280 <__libc_init_array>:
 8007280:	b570      	push	{r4, r5, r6, lr}
 8007282:	4d0d      	ldr	r5, [pc, #52]	; (80072b8 <__libc_init_array+0x38>)
 8007284:	4c0d      	ldr	r4, [pc, #52]	; (80072bc <__libc_init_array+0x3c>)
 8007286:	1b64      	subs	r4, r4, r5
 8007288:	10a4      	asrs	r4, r4, #2
 800728a:	2600      	movs	r6, #0
 800728c:	42a6      	cmp	r6, r4
 800728e:	d109      	bne.n	80072a4 <__libc_init_array+0x24>
 8007290:	4d0b      	ldr	r5, [pc, #44]	; (80072c0 <__libc_init_array+0x40>)
 8007292:	4c0c      	ldr	r4, [pc, #48]	; (80072c4 <__libc_init_array+0x44>)
 8007294:	f004 fe2e 	bl	800bef4 <_init>
 8007298:	1b64      	subs	r4, r4, r5
 800729a:	10a4      	asrs	r4, r4, #2
 800729c:	2600      	movs	r6, #0
 800729e:	42a6      	cmp	r6, r4
 80072a0:	d105      	bne.n	80072ae <__libc_init_array+0x2e>
 80072a2:	bd70      	pop	{r4, r5, r6, pc}
 80072a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80072a8:	4798      	blx	r3
 80072aa:	3601      	adds	r6, #1
 80072ac:	e7ee      	b.n	800728c <__libc_init_array+0xc>
 80072ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80072b2:	4798      	blx	r3
 80072b4:	3601      	adds	r6, #1
 80072b6:	e7f2      	b.n	800729e <__libc_init_array+0x1e>
 80072b8:	0800e004 	.word	0x0800e004
 80072bc:	0800e004 	.word	0x0800e004
 80072c0:	0800e004 	.word	0x0800e004
 80072c4:	0800e008 	.word	0x0800e008

080072c8 <memset>:
 80072c8:	4402      	add	r2, r0
 80072ca:	4603      	mov	r3, r0
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d100      	bne.n	80072d2 <memset+0xa>
 80072d0:	4770      	bx	lr
 80072d2:	f803 1b01 	strb.w	r1, [r3], #1
 80072d6:	e7f9      	b.n	80072cc <memset+0x4>

080072d8 <__cvt>:
 80072d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072dc:	b088      	sub	sp, #32
 80072de:	2b00      	cmp	r3, #0
 80072e0:	461d      	mov	r5, r3
 80072e2:	4614      	mov	r4, r2
 80072e4:	bfbc      	itt	lt
 80072e6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80072ea:	4614      	movlt	r4, r2
 80072ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072ee:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80072f0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80072f4:	bfb6      	itet	lt
 80072f6:	461d      	movlt	r5, r3
 80072f8:	2300      	movge	r3, #0
 80072fa:	232d      	movlt	r3, #45	; 0x2d
 80072fc:	7013      	strb	r3, [r2, #0]
 80072fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007300:	f023 0820 	bic.w	r8, r3, #32
 8007304:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007308:	d005      	beq.n	8007316 <__cvt+0x3e>
 800730a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800730e:	d100      	bne.n	8007312 <__cvt+0x3a>
 8007310:	3601      	adds	r6, #1
 8007312:	2302      	movs	r3, #2
 8007314:	e000      	b.n	8007318 <__cvt+0x40>
 8007316:	2303      	movs	r3, #3
 8007318:	aa07      	add	r2, sp, #28
 800731a:	9204      	str	r2, [sp, #16]
 800731c:	aa06      	add	r2, sp, #24
 800731e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007322:	e9cd 3600 	strd	r3, r6, [sp]
 8007326:	4622      	mov	r2, r4
 8007328:	462b      	mov	r3, r5
 800732a:	f001 fdb9 	bl	8008ea0 <_dtoa_r>
 800732e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007332:	4607      	mov	r7, r0
 8007334:	d102      	bne.n	800733c <__cvt+0x64>
 8007336:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007338:	07db      	lsls	r3, r3, #31
 800733a:	d522      	bpl.n	8007382 <__cvt+0xaa>
 800733c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007340:	eb07 0906 	add.w	r9, r7, r6
 8007344:	d110      	bne.n	8007368 <__cvt+0x90>
 8007346:	783b      	ldrb	r3, [r7, #0]
 8007348:	2b30      	cmp	r3, #48	; 0x30
 800734a:	d10a      	bne.n	8007362 <__cvt+0x8a>
 800734c:	2200      	movs	r2, #0
 800734e:	2300      	movs	r3, #0
 8007350:	4620      	mov	r0, r4
 8007352:	4629      	mov	r1, r5
 8007354:	f7f9 fbb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007358:	b918      	cbnz	r0, 8007362 <__cvt+0x8a>
 800735a:	f1c6 0601 	rsb	r6, r6, #1
 800735e:	f8ca 6000 	str.w	r6, [sl]
 8007362:	f8da 3000 	ldr.w	r3, [sl]
 8007366:	4499      	add	r9, r3
 8007368:	2200      	movs	r2, #0
 800736a:	2300      	movs	r3, #0
 800736c:	4620      	mov	r0, r4
 800736e:	4629      	mov	r1, r5
 8007370:	f7f9 fbaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8007374:	b108      	cbz	r0, 800737a <__cvt+0xa2>
 8007376:	f8cd 901c 	str.w	r9, [sp, #28]
 800737a:	2230      	movs	r2, #48	; 0x30
 800737c:	9b07      	ldr	r3, [sp, #28]
 800737e:	454b      	cmp	r3, r9
 8007380:	d307      	bcc.n	8007392 <__cvt+0xba>
 8007382:	9b07      	ldr	r3, [sp, #28]
 8007384:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007386:	1bdb      	subs	r3, r3, r7
 8007388:	4638      	mov	r0, r7
 800738a:	6013      	str	r3, [r2, #0]
 800738c:	b008      	add	sp, #32
 800738e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007392:	1c59      	adds	r1, r3, #1
 8007394:	9107      	str	r1, [sp, #28]
 8007396:	701a      	strb	r2, [r3, #0]
 8007398:	e7f0      	b.n	800737c <__cvt+0xa4>

0800739a <__exponent>:
 800739a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800739c:	4603      	mov	r3, r0
 800739e:	2900      	cmp	r1, #0
 80073a0:	bfb8      	it	lt
 80073a2:	4249      	neglt	r1, r1
 80073a4:	f803 2b02 	strb.w	r2, [r3], #2
 80073a8:	bfb4      	ite	lt
 80073aa:	222d      	movlt	r2, #45	; 0x2d
 80073ac:	222b      	movge	r2, #43	; 0x2b
 80073ae:	2909      	cmp	r1, #9
 80073b0:	7042      	strb	r2, [r0, #1]
 80073b2:	dd2a      	ble.n	800740a <__exponent+0x70>
 80073b4:	f10d 0407 	add.w	r4, sp, #7
 80073b8:	46a4      	mov	ip, r4
 80073ba:	270a      	movs	r7, #10
 80073bc:	46a6      	mov	lr, r4
 80073be:	460a      	mov	r2, r1
 80073c0:	fb91 f6f7 	sdiv	r6, r1, r7
 80073c4:	fb07 1516 	mls	r5, r7, r6, r1
 80073c8:	3530      	adds	r5, #48	; 0x30
 80073ca:	2a63      	cmp	r2, #99	; 0x63
 80073cc:	f104 34ff 	add.w	r4, r4, #4294967295
 80073d0:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80073d4:	4631      	mov	r1, r6
 80073d6:	dcf1      	bgt.n	80073bc <__exponent+0x22>
 80073d8:	3130      	adds	r1, #48	; 0x30
 80073da:	f1ae 0502 	sub.w	r5, lr, #2
 80073de:	f804 1c01 	strb.w	r1, [r4, #-1]
 80073e2:	1c44      	adds	r4, r0, #1
 80073e4:	4629      	mov	r1, r5
 80073e6:	4561      	cmp	r1, ip
 80073e8:	d30a      	bcc.n	8007400 <__exponent+0x66>
 80073ea:	f10d 0209 	add.w	r2, sp, #9
 80073ee:	eba2 020e 	sub.w	r2, r2, lr
 80073f2:	4565      	cmp	r5, ip
 80073f4:	bf88      	it	hi
 80073f6:	2200      	movhi	r2, #0
 80073f8:	4413      	add	r3, r2
 80073fa:	1a18      	subs	r0, r3, r0
 80073fc:	b003      	add	sp, #12
 80073fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007400:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007404:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007408:	e7ed      	b.n	80073e6 <__exponent+0x4c>
 800740a:	2330      	movs	r3, #48	; 0x30
 800740c:	3130      	adds	r1, #48	; 0x30
 800740e:	7083      	strb	r3, [r0, #2]
 8007410:	70c1      	strb	r1, [r0, #3]
 8007412:	1d03      	adds	r3, r0, #4
 8007414:	e7f1      	b.n	80073fa <__exponent+0x60>
	...

08007418 <_printf_float>:
 8007418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800741c:	ed2d 8b02 	vpush	{d8}
 8007420:	b091      	sub	sp, #68	; 0x44
 8007422:	460c      	mov	r4, r1
 8007424:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007428:	4616      	mov	r6, r2
 800742a:	461f      	mov	r7, r3
 800742c:	4605      	mov	r5, r0
 800742e:	f002 fe93 	bl	800a158 <_localeconv_r>
 8007432:	f8d0 a000 	ldr.w	sl, [r0]
 8007436:	4650      	mov	r0, sl
 8007438:	f7f8 feca 	bl	80001d0 <strlen>
 800743c:	2300      	movs	r3, #0
 800743e:	930e      	str	r3, [sp, #56]	; 0x38
 8007440:	6823      	ldr	r3, [r4, #0]
 8007442:	9309      	str	r3, [sp, #36]	; 0x24
 8007444:	f8d8 3000 	ldr.w	r3, [r8]
 8007448:	f894 b018 	ldrb.w	fp, [r4, #24]
 800744c:	3307      	adds	r3, #7
 800744e:	f023 0307 	bic.w	r3, r3, #7
 8007452:	f103 0208 	add.w	r2, r3, #8
 8007456:	f8c8 2000 	str.w	r2, [r8]
 800745a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007462:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007466:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800746a:	930b      	str	r3, [sp, #44]	; 0x2c
 800746c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8007470:	ee08 0a10 	vmov	s16, r0
 8007474:	4ba0      	ldr	r3, [pc, #640]	; (80076f8 <_printf_float+0x2e0>)
 8007476:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800747a:	f04f 32ff 	mov.w	r2, #4294967295
 800747e:	f7f9 fb55 	bl	8000b2c <__aeabi_dcmpun>
 8007482:	bb88      	cbnz	r0, 80074e8 <_printf_float+0xd0>
 8007484:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007488:	4b9b      	ldr	r3, [pc, #620]	; (80076f8 <_printf_float+0x2e0>)
 800748a:	f04f 32ff 	mov.w	r2, #4294967295
 800748e:	f7f9 fb2f 	bl	8000af0 <__aeabi_dcmple>
 8007492:	bb48      	cbnz	r0, 80074e8 <_printf_float+0xd0>
 8007494:	2200      	movs	r2, #0
 8007496:	2300      	movs	r3, #0
 8007498:	4640      	mov	r0, r8
 800749a:	4649      	mov	r1, r9
 800749c:	f7f9 fb1e 	bl	8000adc <__aeabi_dcmplt>
 80074a0:	b110      	cbz	r0, 80074a8 <_printf_float+0x90>
 80074a2:	232d      	movs	r3, #45	; 0x2d
 80074a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074a8:	4b94      	ldr	r3, [pc, #592]	; (80076fc <_printf_float+0x2e4>)
 80074aa:	4895      	ldr	r0, [pc, #596]	; (8007700 <_printf_float+0x2e8>)
 80074ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80074b0:	bf94      	ite	ls
 80074b2:	4698      	movls	r8, r3
 80074b4:	4680      	movhi	r8, r0
 80074b6:	2303      	movs	r3, #3
 80074b8:	6123      	str	r3, [r4, #16]
 80074ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074bc:	f023 0304 	bic.w	r3, r3, #4
 80074c0:	6023      	str	r3, [r4, #0]
 80074c2:	f04f 0900 	mov.w	r9, #0
 80074c6:	9700      	str	r7, [sp, #0]
 80074c8:	4633      	mov	r3, r6
 80074ca:	aa0f      	add	r2, sp, #60	; 0x3c
 80074cc:	4621      	mov	r1, r4
 80074ce:	4628      	mov	r0, r5
 80074d0:	f000 f9da 	bl	8007888 <_printf_common>
 80074d4:	3001      	adds	r0, #1
 80074d6:	f040 8092 	bne.w	80075fe <_printf_float+0x1e6>
 80074da:	f04f 30ff 	mov.w	r0, #4294967295
 80074de:	b011      	add	sp, #68	; 0x44
 80074e0:	ecbd 8b02 	vpop	{d8}
 80074e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e8:	4642      	mov	r2, r8
 80074ea:	464b      	mov	r3, r9
 80074ec:	4640      	mov	r0, r8
 80074ee:	4649      	mov	r1, r9
 80074f0:	f7f9 fb1c 	bl	8000b2c <__aeabi_dcmpun>
 80074f4:	b140      	cbz	r0, 8007508 <_printf_float+0xf0>
 80074f6:	464b      	mov	r3, r9
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	bfbc      	itt	lt
 80074fc:	232d      	movlt	r3, #45	; 0x2d
 80074fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007502:	4880      	ldr	r0, [pc, #512]	; (8007704 <_printf_float+0x2ec>)
 8007504:	4b80      	ldr	r3, [pc, #512]	; (8007708 <_printf_float+0x2f0>)
 8007506:	e7d1      	b.n	80074ac <_printf_float+0x94>
 8007508:	6863      	ldr	r3, [r4, #4]
 800750a:	1c5a      	adds	r2, r3, #1
 800750c:	f00b 01df 	and.w	r1, fp, #223	; 0xdf
 8007510:	d143      	bne.n	800759a <_printf_float+0x182>
 8007512:	2306      	movs	r3, #6
 8007514:	6063      	str	r3, [r4, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800751a:	9206      	str	r2, [sp, #24]
 800751c:	aa0e      	add	r2, sp, #56	; 0x38
 800751e:	e9cd b204 	strd	fp, r2, [sp, #16]
 8007522:	aa0d      	add	r2, sp, #52	; 0x34
 8007524:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007528:	9203      	str	r2, [sp, #12]
 800752a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800752e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007532:	6023      	str	r3, [r4, #0]
 8007534:	6863      	ldr	r3, [r4, #4]
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	4642      	mov	r2, r8
 800753a:	464b      	mov	r3, r9
 800753c:	4628      	mov	r0, r5
 800753e:	910a      	str	r1, [sp, #40]	; 0x28
 8007540:	f7ff feca 	bl	80072d8 <__cvt>
 8007544:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007546:	2947      	cmp	r1, #71	; 0x47
 8007548:	4680      	mov	r8, r0
 800754a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800754c:	d108      	bne.n	8007560 <_printf_float+0x148>
 800754e:	1cc8      	adds	r0, r1, #3
 8007550:	db02      	blt.n	8007558 <_printf_float+0x140>
 8007552:	6863      	ldr	r3, [r4, #4]
 8007554:	4299      	cmp	r1, r3
 8007556:	dd40      	ble.n	80075da <_printf_float+0x1c2>
 8007558:	f1ab 0b02 	sub.w	fp, fp, #2
 800755c:	fa5f fb8b 	uxtb.w	fp, fp
 8007560:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007564:	d81f      	bhi.n	80075a6 <_printf_float+0x18e>
 8007566:	3901      	subs	r1, #1
 8007568:	465a      	mov	r2, fp
 800756a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800756e:	910d      	str	r1, [sp, #52]	; 0x34
 8007570:	f7ff ff13 	bl	800739a <__exponent>
 8007574:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007576:	1813      	adds	r3, r2, r0
 8007578:	2a01      	cmp	r2, #1
 800757a:	4681      	mov	r9, r0
 800757c:	6123      	str	r3, [r4, #16]
 800757e:	dc02      	bgt.n	8007586 <_printf_float+0x16e>
 8007580:	6822      	ldr	r2, [r4, #0]
 8007582:	07d2      	lsls	r2, r2, #31
 8007584:	d501      	bpl.n	800758a <_printf_float+0x172>
 8007586:	3301      	adds	r3, #1
 8007588:	6123      	str	r3, [r4, #16]
 800758a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800758e:	2b00      	cmp	r3, #0
 8007590:	d099      	beq.n	80074c6 <_printf_float+0xae>
 8007592:	232d      	movs	r3, #45	; 0x2d
 8007594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007598:	e795      	b.n	80074c6 <_printf_float+0xae>
 800759a:	2947      	cmp	r1, #71	; 0x47
 800759c:	d1bb      	bne.n	8007516 <_printf_float+0xfe>
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1b9      	bne.n	8007516 <_printf_float+0xfe>
 80075a2:	2301      	movs	r3, #1
 80075a4:	e7b6      	b.n	8007514 <_printf_float+0xfc>
 80075a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80075aa:	d118      	bne.n	80075de <_printf_float+0x1c6>
 80075ac:	2900      	cmp	r1, #0
 80075ae:	6863      	ldr	r3, [r4, #4]
 80075b0:	dd0b      	ble.n	80075ca <_printf_float+0x1b2>
 80075b2:	6121      	str	r1, [r4, #16]
 80075b4:	b913      	cbnz	r3, 80075bc <_printf_float+0x1a4>
 80075b6:	6822      	ldr	r2, [r4, #0]
 80075b8:	07d0      	lsls	r0, r2, #31
 80075ba:	d502      	bpl.n	80075c2 <_printf_float+0x1aa>
 80075bc:	3301      	adds	r3, #1
 80075be:	440b      	add	r3, r1
 80075c0:	6123      	str	r3, [r4, #16]
 80075c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80075c4:	f04f 0900 	mov.w	r9, #0
 80075c8:	e7df      	b.n	800758a <_printf_float+0x172>
 80075ca:	b913      	cbnz	r3, 80075d2 <_printf_float+0x1ba>
 80075cc:	6822      	ldr	r2, [r4, #0]
 80075ce:	07d2      	lsls	r2, r2, #31
 80075d0:	d501      	bpl.n	80075d6 <_printf_float+0x1be>
 80075d2:	3302      	adds	r3, #2
 80075d4:	e7f4      	b.n	80075c0 <_printf_float+0x1a8>
 80075d6:	2301      	movs	r3, #1
 80075d8:	e7f2      	b.n	80075c0 <_printf_float+0x1a8>
 80075da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80075de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075e0:	4299      	cmp	r1, r3
 80075e2:	db05      	blt.n	80075f0 <_printf_float+0x1d8>
 80075e4:	6823      	ldr	r3, [r4, #0]
 80075e6:	6121      	str	r1, [r4, #16]
 80075e8:	07d8      	lsls	r0, r3, #31
 80075ea:	d5ea      	bpl.n	80075c2 <_printf_float+0x1aa>
 80075ec:	1c4b      	adds	r3, r1, #1
 80075ee:	e7e7      	b.n	80075c0 <_printf_float+0x1a8>
 80075f0:	2900      	cmp	r1, #0
 80075f2:	bfd4      	ite	le
 80075f4:	f1c1 0202 	rsble	r2, r1, #2
 80075f8:	2201      	movgt	r2, #1
 80075fa:	4413      	add	r3, r2
 80075fc:	e7e0      	b.n	80075c0 <_printf_float+0x1a8>
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	055a      	lsls	r2, r3, #21
 8007602:	d407      	bmi.n	8007614 <_printf_float+0x1fc>
 8007604:	6923      	ldr	r3, [r4, #16]
 8007606:	4642      	mov	r2, r8
 8007608:	4631      	mov	r1, r6
 800760a:	4628      	mov	r0, r5
 800760c:	47b8      	blx	r7
 800760e:	3001      	adds	r0, #1
 8007610:	d12c      	bne.n	800766c <_printf_float+0x254>
 8007612:	e762      	b.n	80074da <_printf_float+0xc2>
 8007614:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007618:	f240 80e0 	bls.w	80077dc <_printf_float+0x3c4>
 800761c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007620:	2200      	movs	r2, #0
 8007622:	2300      	movs	r3, #0
 8007624:	f7f9 fa50 	bl	8000ac8 <__aeabi_dcmpeq>
 8007628:	2800      	cmp	r0, #0
 800762a:	d034      	beq.n	8007696 <_printf_float+0x27e>
 800762c:	4a37      	ldr	r2, [pc, #220]	; (800770c <_printf_float+0x2f4>)
 800762e:	2301      	movs	r3, #1
 8007630:	4631      	mov	r1, r6
 8007632:	4628      	mov	r0, r5
 8007634:	47b8      	blx	r7
 8007636:	3001      	adds	r0, #1
 8007638:	f43f af4f 	beq.w	80074da <_printf_float+0xc2>
 800763c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007640:	429a      	cmp	r2, r3
 8007642:	db02      	blt.n	800764a <_printf_float+0x232>
 8007644:	6823      	ldr	r3, [r4, #0]
 8007646:	07d8      	lsls	r0, r3, #31
 8007648:	d510      	bpl.n	800766c <_printf_float+0x254>
 800764a:	ee18 3a10 	vmov	r3, s16
 800764e:	4652      	mov	r2, sl
 8007650:	4631      	mov	r1, r6
 8007652:	4628      	mov	r0, r5
 8007654:	47b8      	blx	r7
 8007656:	3001      	adds	r0, #1
 8007658:	f43f af3f 	beq.w	80074da <_printf_float+0xc2>
 800765c:	f04f 0800 	mov.w	r8, #0
 8007660:	f104 091a 	add.w	r9, r4, #26
 8007664:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007666:	3b01      	subs	r3, #1
 8007668:	4543      	cmp	r3, r8
 800766a:	dc09      	bgt.n	8007680 <_printf_float+0x268>
 800766c:	6823      	ldr	r3, [r4, #0]
 800766e:	079b      	lsls	r3, r3, #30
 8007670:	f100 8105 	bmi.w	800787e <_printf_float+0x466>
 8007674:	68e0      	ldr	r0, [r4, #12]
 8007676:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007678:	4298      	cmp	r0, r3
 800767a:	bfb8      	it	lt
 800767c:	4618      	movlt	r0, r3
 800767e:	e72e      	b.n	80074de <_printf_float+0xc6>
 8007680:	2301      	movs	r3, #1
 8007682:	464a      	mov	r2, r9
 8007684:	4631      	mov	r1, r6
 8007686:	4628      	mov	r0, r5
 8007688:	47b8      	blx	r7
 800768a:	3001      	adds	r0, #1
 800768c:	f43f af25 	beq.w	80074da <_printf_float+0xc2>
 8007690:	f108 0801 	add.w	r8, r8, #1
 8007694:	e7e6      	b.n	8007664 <_printf_float+0x24c>
 8007696:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007698:	2b00      	cmp	r3, #0
 800769a:	dc39      	bgt.n	8007710 <_printf_float+0x2f8>
 800769c:	4a1b      	ldr	r2, [pc, #108]	; (800770c <_printf_float+0x2f4>)
 800769e:	2301      	movs	r3, #1
 80076a0:	4631      	mov	r1, r6
 80076a2:	4628      	mov	r0, r5
 80076a4:	47b8      	blx	r7
 80076a6:	3001      	adds	r0, #1
 80076a8:	f43f af17 	beq.w	80074da <_printf_float+0xc2>
 80076ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80076b0:	4313      	orrs	r3, r2
 80076b2:	d102      	bne.n	80076ba <_printf_float+0x2a2>
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	07d9      	lsls	r1, r3, #31
 80076b8:	d5d8      	bpl.n	800766c <_printf_float+0x254>
 80076ba:	ee18 3a10 	vmov	r3, s16
 80076be:	4652      	mov	r2, sl
 80076c0:	4631      	mov	r1, r6
 80076c2:	4628      	mov	r0, r5
 80076c4:	47b8      	blx	r7
 80076c6:	3001      	adds	r0, #1
 80076c8:	f43f af07 	beq.w	80074da <_printf_float+0xc2>
 80076cc:	f04f 0900 	mov.w	r9, #0
 80076d0:	f104 0a1a 	add.w	sl, r4, #26
 80076d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076d6:	425b      	negs	r3, r3
 80076d8:	454b      	cmp	r3, r9
 80076da:	dc01      	bgt.n	80076e0 <_printf_float+0x2c8>
 80076dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076de:	e792      	b.n	8007606 <_printf_float+0x1ee>
 80076e0:	2301      	movs	r3, #1
 80076e2:	4652      	mov	r2, sl
 80076e4:	4631      	mov	r1, r6
 80076e6:	4628      	mov	r0, r5
 80076e8:	47b8      	blx	r7
 80076ea:	3001      	adds	r0, #1
 80076ec:	f43f aef5 	beq.w	80074da <_printf_float+0xc2>
 80076f0:	f109 0901 	add.w	r9, r9, #1
 80076f4:	e7ee      	b.n	80076d4 <_printf_float+0x2bc>
 80076f6:	bf00      	nop
 80076f8:	7fefffff 	.word	0x7fefffff
 80076fc:	0800db54 	.word	0x0800db54
 8007700:	0800db58 	.word	0x0800db58
 8007704:	0800db60 	.word	0x0800db60
 8007708:	0800db5c 	.word	0x0800db5c
 800770c:	0800db64 	.word	0x0800db64
 8007710:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007712:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007714:	429a      	cmp	r2, r3
 8007716:	bfa8      	it	ge
 8007718:	461a      	movge	r2, r3
 800771a:	2a00      	cmp	r2, #0
 800771c:	4691      	mov	r9, r2
 800771e:	dc37      	bgt.n	8007790 <_printf_float+0x378>
 8007720:	f04f 0b00 	mov.w	fp, #0
 8007724:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007728:	f104 021a 	add.w	r2, r4, #26
 800772c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800772e:	9309      	str	r3, [sp, #36]	; 0x24
 8007730:	eba3 0309 	sub.w	r3, r3, r9
 8007734:	455b      	cmp	r3, fp
 8007736:	dc33      	bgt.n	80077a0 <_printf_float+0x388>
 8007738:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800773c:	429a      	cmp	r2, r3
 800773e:	db3b      	blt.n	80077b8 <_printf_float+0x3a0>
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	07da      	lsls	r2, r3, #31
 8007744:	d438      	bmi.n	80077b8 <_printf_float+0x3a0>
 8007746:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800774a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	eba2 0901 	sub.w	r9, r2, r1
 8007752:	4599      	cmp	r9, r3
 8007754:	bfa8      	it	ge
 8007756:	4699      	movge	r9, r3
 8007758:	f1b9 0f00 	cmp.w	r9, #0
 800775c:	dc35      	bgt.n	80077ca <_printf_float+0x3b2>
 800775e:	f04f 0800 	mov.w	r8, #0
 8007762:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007766:	f104 0a1a 	add.w	sl, r4, #26
 800776a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800776e:	1a9b      	subs	r3, r3, r2
 8007770:	eba3 0309 	sub.w	r3, r3, r9
 8007774:	4543      	cmp	r3, r8
 8007776:	f77f af79 	ble.w	800766c <_printf_float+0x254>
 800777a:	2301      	movs	r3, #1
 800777c:	4652      	mov	r2, sl
 800777e:	4631      	mov	r1, r6
 8007780:	4628      	mov	r0, r5
 8007782:	47b8      	blx	r7
 8007784:	3001      	adds	r0, #1
 8007786:	f43f aea8 	beq.w	80074da <_printf_float+0xc2>
 800778a:	f108 0801 	add.w	r8, r8, #1
 800778e:	e7ec      	b.n	800776a <_printf_float+0x352>
 8007790:	4613      	mov	r3, r2
 8007792:	4631      	mov	r1, r6
 8007794:	4642      	mov	r2, r8
 8007796:	4628      	mov	r0, r5
 8007798:	47b8      	blx	r7
 800779a:	3001      	adds	r0, #1
 800779c:	d1c0      	bne.n	8007720 <_printf_float+0x308>
 800779e:	e69c      	b.n	80074da <_printf_float+0xc2>
 80077a0:	2301      	movs	r3, #1
 80077a2:	4631      	mov	r1, r6
 80077a4:	4628      	mov	r0, r5
 80077a6:	9209      	str	r2, [sp, #36]	; 0x24
 80077a8:	47b8      	blx	r7
 80077aa:	3001      	adds	r0, #1
 80077ac:	f43f ae95 	beq.w	80074da <_printf_float+0xc2>
 80077b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077b2:	f10b 0b01 	add.w	fp, fp, #1
 80077b6:	e7b9      	b.n	800772c <_printf_float+0x314>
 80077b8:	ee18 3a10 	vmov	r3, s16
 80077bc:	4652      	mov	r2, sl
 80077be:	4631      	mov	r1, r6
 80077c0:	4628      	mov	r0, r5
 80077c2:	47b8      	blx	r7
 80077c4:	3001      	adds	r0, #1
 80077c6:	d1be      	bne.n	8007746 <_printf_float+0x32e>
 80077c8:	e687      	b.n	80074da <_printf_float+0xc2>
 80077ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077cc:	464b      	mov	r3, r9
 80077ce:	4442      	add	r2, r8
 80077d0:	4631      	mov	r1, r6
 80077d2:	4628      	mov	r0, r5
 80077d4:	47b8      	blx	r7
 80077d6:	3001      	adds	r0, #1
 80077d8:	d1c1      	bne.n	800775e <_printf_float+0x346>
 80077da:	e67e      	b.n	80074da <_printf_float+0xc2>
 80077dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077de:	2a01      	cmp	r2, #1
 80077e0:	dc01      	bgt.n	80077e6 <_printf_float+0x3ce>
 80077e2:	07db      	lsls	r3, r3, #31
 80077e4:	d538      	bpl.n	8007858 <_printf_float+0x440>
 80077e6:	2301      	movs	r3, #1
 80077e8:	4642      	mov	r2, r8
 80077ea:	4631      	mov	r1, r6
 80077ec:	4628      	mov	r0, r5
 80077ee:	47b8      	blx	r7
 80077f0:	3001      	adds	r0, #1
 80077f2:	f43f ae72 	beq.w	80074da <_printf_float+0xc2>
 80077f6:	ee18 3a10 	vmov	r3, s16
 80077fa:	4652      	mov	r2, sl
 80077fc:	4631      	mov	r1, r6
 80077fe:	4628      	mov	r0, r5
 8007800:	47b8      	blx	r7
 8007802:	3001      	adds	r0, #1
 8007804:	f43f ae69 	beq.w	80074da <_printf_float+0xc2>
 8007808:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800780c:	2200      	movs	r2, #0
 800780e:	2300      	movs	r3, #0
 8007810:	f7f9 f95a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007814:	b9d8      	cbnz	r0, 800784e <_printf_float+0x436>
 8007816:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007818:	f108 0201 	add.w	r2, r8, #1
 800781c:	3b01      	subs	r3, #1
 800781e:	4631      	mov	r1, r6
 8007820:	4628      	mov	r0, r5
 8007822:	47b8      	blx	r7
 8007824:	3001      	adds	r0, #1
 8007826:	d10e      	bne.n	8007846 <_printf_float+0x42e>
 8007828:	e657      	b.n	80074da <_printf_float+0xc2>
 800782a:	2301      	movs	r3, #1
 800782c:	4652      	mov	r2, sl
 800782e:	4631      	mov	r1, r6
 8007830:	4628      	mov	r0, r5
 8007832:	47b8      	blx	r7
 8007834:	3001      	adds	r0, #1
 8007836:	f43f ae50 	beq.w	80074da <_printf_float+0xc2>
 800783a:	f108 0801 	add.w	r8, r8, #1
 800783e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007840:	3b01      	subs	r3, #1
 8007842:	4543      	cmp	r3, r8
 8007844:	dcf1      	bgt.n	800782a <_printf_float+0x412>
 8007846:	464b      	mov	r3, r9
 8007848:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800784c:	e6dc      	b.n	8007608 <_printf_float+0x1f0>
 800784e:	f04f 0800 	mov.w	r8, #0
 8007852:	f104 0a1a 	add.w	sl, r4, #26
 8007856:	e7f2      	b.n	800783e <_printf_float+0x426>
 8007858:	2301      	movs	r3, #1
 800785a:	4642      	mov	r2, r8
 800785c:	e7df      	b.n	800781e <_printf_float+0x406>
 800785e:	2301      	movs	r3, #1
 8007860:	464a      	mov	r2, r9
 8007862:	4631      	mov	r1, r6
 8007864:	4628      	mov	r0, r5
 8007866:	47b8      	blx	r7
 8007868:	3001      	adds	r0, #1
 800786a:	f43f ae36 	beq.w	80074da <_printf_float+0xc2>
 800786e:	f108 0801 	add.w	r8, r8, #1
 8007872:	68e3      	ldr	r3, [r4, #12]
 8007874:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007876:	1a5b      	subs	r3, r3, r1
 8007878:	4543      	cmp	r3, r8
 800787a:	dcf0      	bgt.n	800785e <_printf_float+0x446>
 800787c:	e6fa      	b.n	8007674 <_printf_float+0x25c>
 800787e:	f04f 0800 	mov.w	r8, #0
 8007882:	f104 0919 	add.w	r9, r4, #25
 8007886:	e7f4      	b.n	8007872 <_printf_float+0x45a>

08007888 <_printf_common>:
 8007888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800788c:	4616      	mov	r6, r2
 800788e:	4699      	mov	r9, r3
 8007890:	688a      	ldr	r2, [r1, #8]
 8007892:	690b      	ldr	r3, [r1, #16]
 8007894:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007898:	4293      	cmp	r3, r2
 800789a:	bfb8      	it	lt
 800789c:	4613      	movlt	r3, r2
 800789e:	6033      	str	r3, [r6, #0]
 80078a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078a4:	4607      	mov	r7, r0
 80078a6:	460c      	mov	r4, r1
 80078a8:	b10a      	cbz	r2, 80078ae <_printf_common+0x26>
 80078aa:	3301      	adds	r3, #1
 80078ac:	6033      	str	r3, [r6, #0]
 80078ae:	6823      	ldr	r3, [r4, #0]
 80078b0:	0699      	lsls	r1, r3, #26
 80078b2:	bf42      	ittt	mi
 80078b4:	6833      	ldrmi	r3, [r6, #0]
 80078b6:	3302      	addmi	r3, #2
 80078b8:	6033      	strmi	r3, [r6, #0]
 80078ba:	6825      	ldr	r5, [r4, #0]
 80078bc:	f015 0506 	ands.w	r5, r5, #6
 80078c0:	d106      	bne.n	80078d0 <_printf_common+0x48>
 80078c2:	f104 0a19 	add.w	sl, r4, #25
 80078c6:	68e3      	ldr	r3, [r4, #12]
 80078c8:	6832      	ldr	r2, [r6, #0]
 80078ca:	1a9b      	subs	r3, r3, r2
 80078cc:	42ab      	cmp	r3, r5
 80078ce:	dc26      	bgt.n	800791e <_printf_common+0x96>
 80078d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078d4:	1e13      	subs	r3, r2, #0
 80078d6:	6822      	ldr	r2, [r4, #0]
 80078d8:	bf18      	it	ne
 80078da:	2301      	movne	r3, #1
 80078dc:	0692      	lsls	r2, r2, #26
 80078de:	d42b      	bmi.n	8007938 <_printf_common+0xb0>
 80078e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078e4:	4649      	mov	r1, r9
 80078e6:	4638      	mov	r0, r7
 80078e8:	47c0      	blx	r8
 80078ea:	3001      	adds	r0, #1
 80078ec:	d01e      	beq.n	800792c <_printf_common+0xa4>
 80078ee:	6823      	ldr	r3, [r4, #0]
 80078f0:	68e5      	ldr	r5, [r4, #12]
 80078f2:	6832      	ldr	r2, [r6, #0]
 80078f4:	f003 0306 	and.w	r3, r3, #6
 80078f8:	2b04      	cmp	r3, #4
 80078fa:	bf08      	it	eq
 80078fc:	1aad      	subeq	r5, r5, r2
 80078fe:	68a3      	ldr	r3, [r4, #8]
 8007900:	6922      	ldr	r2, [r4, #16]
 8007902:	bf0c      	ite	eq
 8007904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007908:	2500      	movne	r5, #0
 800790a:	4293      	cmp	r3, r2
 800790c:	bfc4      	itt	gt
 800790e:	1a9b      	subgt	r3, r3, r2
 8007910:	18ed      	addgt	r5, r5, r3
 8007912:	2600      	movs	r6, #0
 8007914:	341a      	adds	r4, #26
 8007916:	42b5      	cmp	r5, r6
 8007918:	d11a      	bne.n	8007950 <_printf_common+0xc8>
 800791a:	2000      	movs	r0, #0
 800791c:	e008      	b.n	8007930 <_printf_common+0xa8>
 800791e:	2301      	movs	r3, #1
 8007920:	4652      	mov	r2, sl
 8007922:	4649      	mov	r1, r9
 8007924:	4638      	mov	r0, r7
 8007926:	47c0      	blx	r8
 8007928:	3001      	adds	r0, #1
 800792a:	d103      	bne.n	8007934 <_printf_common+0xac>
 800792c:	f04f 30ff 	mov.w	r0, #4294967295
 8007930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007934:	3501      	adds	r5, #1
 8007936:	e7c6      	b.n	80078c6 <_printf_common+0x3e>
 8007938:	18e1      	adds	r1, r4, r3
 800793a:	1c5a      	adds	r2, r3, #1
 800793c:	2030      	movs	r0, #48	; 0x30
 800793e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007942:	4422      	add	r2, r4
 8007944:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007948:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800794c:	3302      	adds	r3, #2
 800794e:	e7c7      	b.n	80078e0 <_printf_common+0x58>
 8007950:	2301      	movs	r3, #1
 8007952:	4622      	mov	r2, r4
 8007954:	4649      	mov	r1, r9
 8007956:	4638      	mov	r0, r7
 8007958:	47c0      	blx	r8
 800795a:	3001      	adds	r0, #1
 800795c:	d0e6      	beq.n	800792c <_printf_common+0xa4>
 800795e:	3601      	adds	r6, #1
 8007960:	e7d9      	b.n	8007916 <_printf_common+0x8e>
	...

08007964 <_printf_i>:
 8007964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007968:	460c      	mov	r4, r1
 800796a:	4691      	mov	r9, r2
 800796c:	7e27      	ldrb	r7, [r4, #24]
 800796e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007970:	2f78      	cmp	r7, #120	; 0x78
 8007972:	4680      	mov	r8, r0
 8007974:	469a      	mov	sl, r3
 8007976:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800797a:	d807      	bhi.n	800798c <_printf_i+0x28>
 800797c:	2f62      	cmp	r7, #98	; 0x62
 800797e:	d80a      	bhi.n	8007996 <_printf_i+0x32>
 8007980:	2f00      	cmp	r7, #0
 8007982:	f000 80d8 	beq.w	8007b36 <_printf_i+0x1d2>
 8007986:	2f58      	cmp	r7, #88	; 0x58
 8007988:	f000 80a3 	beq.w	8007ad2 <_printf_i+0x16e>
 800798c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007990:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007994:	e03a      	b.n	8007a0c <_printf_i+0xa8>
 8007996:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800799a:	2b15      	cmp	r3, #21
 800799c:	d8f6      	bhi.n	800798c <_printf_i+0x28>
 800799e:	a001      	add	r0, pc, #4	; (adr r0, 80079a4 <_printf_i+0x40>)
 80079a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80079a4:	080079fd 	.word	0x080079fd
 80079a8:	08007a11 	.word	0x08007a11
 80079ac:	0800798d 	.word	0x0800798d
 80079b0:	0800798d 	.word	0x0800798d
 80079b4:	0800798d 	.word	0x0800798d
 80079b8:	0800798d 	.word	0x0800798d
 80079bc:	08007a11 	.word	0x08007a11
 80079c0:	0800798d 	.word	0x0800798d
 80079c4:	0800798d 	.word	0x0800798d
 80079c8:	0800798d 	.word	0x0800798d
 80079cc:	0800798d 	.word	0x0800798d
 80079d0:	08007b1d 	.word	0x08007b1d
 80079d4:	08007a41 	.word	0x08007a41
 80079d8:	08007aff 	.word	0x08007aff
 80079dc:	0800798d 	.word	0x0800798d
 80079e0:	0800798d 	.word	0x0800798d
 80079e4:	08007b3f 	.word	0x08007b3f
 80079e8:	0800798d 	.word	0x0800798d
 80079ec:	08007a41 	.word	0x08007a41
 80079f0:	0800798d 	.word	0x0800798d
 80079f4:	0800798d 	.word	0x0800798d
 80079f8:	08007b07 	.word	0x08007b07
 80079fc:	680b      	ldr	r3, [r1, #0]
 80079fe:	1d1a      	adds	r2, r3, #4
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	600a      	str	r2, [r1, #0]
 8007a04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e0a3      	b.n	8007b58 <_printf_i+0x1f4>
 8007a10:	6825      	ldr	r5, [r4, #0]
 8007a12:	6808      	ldr	r0, [r1, #0]
 8007a14:	062e      	lsls	r6, r5, #24
 8007a16:	f100 0304 	add.w	r3, r0, #4
 8007a1a:	d50a      	bpl.n	8007a32 <_printf_i+0xce>
 8007a1c:	6805      	ldr	r5, [r0, #0]
 8007a1e:	600b      	str	r3, [r1, #0]
 8007a20:	2d00      	cmp	r5, #0
 8007a22:	da03      	bge.n	8007a2c <_printf_i+0xc8>
 8007a24:	232d      	movs	r3, #45	; 0x2d
 8007a26:	426d      	negs	r5, r5
 8007a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a2c:	485e      	ldr	r0, [pc, #376]	; (8007ba8 <_printf_i+0x244>)
 8007a2e:	230a      	movs	r3, #10
 8007a30:	e019      	b.n	8007a66 <_printf_i+0x102>
 8007a32:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007a36:	6805      	ldr	r5, [r0, #0]
 8007a38:	600b      	str	r3, [r1, #0]
 8007a3a:	bf18      	it	ne
 8007a3c:	b22d      	sxthne	r5, r5
 8007a3e:	e7ef      	b.n	8007a20 <_printf_i+0xbc>
 8007a40:	680b      	ldr	r3, [r1, #0]
 8007a42:	6825      	ldr	r5, [r4, #0]
 8007a44:	1d18      	adds	r0, r3, #4
 8007a46:	6008      	str	r0, [r1, #0]
 8007a48:	0628      	lsls	r0, r5, #24
 8007a4a:	d501      	bpl.n	8007a50 <_printf_i+0xec>
 8007a4c:	681d      	ldr	r5, [r3, #0]
 8007a4e:	e002      	b.n	8007a56 <_printf_i+0xf2>
 8007a50:	0669      	lsls	r1, r5, #25
 8007a52:	d5fb      	bpl.n	8007a4c <_printf_i+0xe8>
 8007a54:	881d      	ldrh	r5, [r3, #0]
 8007a56:	4854      	ldr	r0, [pc, #336]	; (8007ba8 <_printf_i+0x244>)
 8007a58:	2f6f      	cmp	r7, #111	; 0x6f
 8007a5a:	bf0c      	ite	eq
 8007a5c:	2308      	moveq	r3, #8
 8007a5e:	230a      	movne	r3, #10
 8007a60:	2100      	movs	r1, #0
 8007a62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a66:	6866      	ldr	r6, [r4, #4]
 8007a68:	60a6      	str	r6, [r4, #8]
 8007a6a:	2e00      	cmp	r6, #0
 8007a6c:	bfa2      	ittt	ge
 8007a6e:	6821      	ldrge	r1, [r4, #0]
 8007a70:	f021 0104 	bicge.w	r1, r1, #4
 8007a74:	6021      	strge	r1, [r4, #0]
 8007a76:	b90d      	cbnz	r5, 8007a7c <_printf_i+0x118>
 8007a78:	2e00      	cmp	r6, #0
 8007a7a:	d04d      	beq.n	8007b18 <_printf_i+0x1b4>
 8007a7c:	4616      	mov	r6, r2
 8007a7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a82:	fb03 5711 	mls	r7, r3, r1, r5
 8007a86:	5dc7      	ldrb	r7, [r0, r7]
 8007a88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a8c:	462f      	mov	r7, r5
 8007a8e:	42bb      	cmp	r3, r7
 8007a90:	460d      	mov	r5, r1
 8007a92:	d9f4      	bls.n	8007a7e <_printf_i+0x11a>
 8007a94:	2b08      	cmp	r3, #8
 8007a96:	d10b      	bne.n	8007ab0 <_printf_i+0x14c>
 8007a98:	6823      	ldr	r3, [r4, #0]
 8007a9a:	07df      	lsls	r7, r3, #31
 8007a9c:	d508      	bpl.n	8007ab0 <_printf_i+0x14c>
 8007a9e:	6923      	ldr	r3, [r4, #16]
 8007aa0:	6861      	ldr	r1, [r4, #4]
 8007aa2:	4299      	cmp	r1, r3
 8007aa4:	bfde      	ittt	le
 8007aa6:	2330      	movle	r3, #48	; 0x30
 8007aa8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007aac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ab0:	1b92      	subs	r2, r2, r6
 8007ab2:	6122      	str	r2, [r4, #16]
 8007ab4:	f8cd a000 	str.w	sl, [sp]
 8007ab8:	464b      	mov	r3, r9
 8007aba:	aa03      	add	r2, sp, #12
 8007abc:	4621      	mov	r1, r4
 8007abe:	4640      	mov	r0, r8
 8007ac0:	f7ff fee2 	bl	8007888 <_printf_common>
 8007ac4:	3001      	adds	r0, #1
 8007ac6:	d14c      	bne.n	8007b62 <_printf_i+0x1fe>
 8007ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8007acc:	b004      	add	sp, #16
 8007ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ad2:	4835      	ldr	r0, [pc, #212]	; (8007ba8 <_printf_i+0x244>)
 8007ad4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ad8:	6823      	ldr	r3, [r4, #0]
 8007ada:	680e      	ldr	r6, [r1, #0]
 8007adc:	061f      	lsls	r7, r3, #24
 8007ade:	f856 5b04 	ldr.w	r5, [r6], #4
 8007ae2:	600e      	str	r6, [r1, #0]
 8007ae4:	d514      	bpl.n	8007b10 <_printf_i+0x1ac>
 8007ae6:	07d9      	lsls	r1, r3, #31
 8007ae8:	bf44      	itt	mi
 8007aea:	f043 0320 	orrmi.w	r3, r3, #32
 8007aee:	6023      	strmi	r3, [r4, #0]
 8007af0:	b91d      	cbnz	r5, 8007afa <_printf_i+0x196>
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	f023 0320 	bic.w	r3, r3, #32
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	2310      	movs	r3, #16
 8007afc:	e7b0      	b.n	8007a60 <_printf_i+0xfc>
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	f043 0320 	orr.w	r3, r3, #32
 8007b04:	6023      	str	r3, [r4, #0]
 8007b06:	2378      	movs	r3, #120	; 0x78
 8007b08:	4828      	ldr	r0, [pc, #160]	; (8007bac <_printf_i+0x248>)
 8007b0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b0e:	e7e3      	b.n	8007ad8 <_printf_i+0x174>
 8007b10:	065e      	lsls	r6, r3, #25
 8007b12:	bf48      	it	mi
 8007b14:	b2ad      	uxthmi	r5, r5
 8007b16:	e7e6      	b.n	8007ae6 <_printf_i+0x182>
 8007b18:	4616      	mov	r6, r2
 8007b1a:	e7bb      	b.n	8007a94 <_printf_i+0x130>
 8007b1c:	680b      	ldr	r3, [r1, #0]
 8007b1e:	6826      	ldr	r6, [r4, #0]
 8007b20:	6960      	ldr	r0, [r4, #20]
 8007b22:	1d1d      	adds	r5, r3, #4
 8007b24:	600d      	str	r5, [r1, #0]
 8007b26:	0635      	lsls	r5, r6, #24
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	d501      	bpl.n	8007b30 <_printf_i+0x1cc>
 8007b2c:	6018      	str	r0, [r3, #0]
 8007b2e:	e002      	b.n	8007b36 <_printf_i+0x1d2>
 8007b30:	0671      	lsls	r1, r6, #25
 8007b32:	d5fb      	bpl.n	8007b2c <_printf_i+0x1c8>
 8007b34:	8018      	strh	r0, [r3, #0]
 8007b36:	2300      	movs	r3, #0
 8007b38:	6123      	str	r3, [r4, #16]
 8007b3a:	4616      	mov	r6, r2
 8007b3c:	e7ba      	b.n	8007ab4 <_printf_i+0x150>
 8007b3e:	680b      	ldr	r3, [r1, #0]
 8007b40:	1d1a      	adds	r2, r3, #4
 8007b42:	600a      	str	r2, [r1, #0]
 8007b44:	681e      	ldr	r6, [r3, #0]
 8007b46:	6862      	ldr	r2, [r4, #4]
 8007b48:	2100      	movs	r1, #0
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	f7f8 fb48 	bl	80001e0 <memchr>
 8007b50:	b108      	cbz	r0, 8007b56 <_printf_i+0x1f2>
 8007b52:	1b80      	subs	r0, r0, r6
 8007b54:	6060      	str	r0, [r4, #4]
 8007b56:	6863      	ldr	r3, [r4, #4]
 8007b58:	6123      	str	r3, [r4, #16]
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b60:	e7a8      	b.n	8007ab4 <_printf_i+0x150>
 8007b62:	6923      	ldr	r3, [r4, #16]
 8007b64:	4632      	mov	r2, r6
 8007b66:	4649      	mov	r1, r9
 8007b68:	4640      	mov	r0, r8
 8007b6a:	47d0      	blx	sl
 8007b6c:	3001      	adds	r0, #1
 8007b6e:	d0ab      	beq.n	8007ac8 <_printf_i+0x164>
 8007b70:	6823      	ldr	r3, [r4, #0]
 8007b72:	079b      	lsls	r3, r3, #30
 8007b74:	d413      	bmi.n	8007b9e <_printf_i+0x23a>
 8007b76:	68e0      	ldr	r0, [r4, #12]
 8007b78:	9b03      	ldr	r3, [sp, #12]
 8007b7a:	4298      	cmp	r0, r3
 8007b7c:	bfb8      	it	lt
 8007b7e:	4618      	movlt	r0, r3
 8007b80:	e7a4      	b.n	8007acc <_printf_i+0x168>
 8007b82:	2301      	movs	r3, #1
 8007b84:	4632      	mov	r2, r6
 8007b86:	4649      	mov	r1, r9
 8007b88:	4640      	mov	r0, r8
 8007b8a:	47d0      	blx	sl
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	d09b      	beq.n	8007ac8 <_printf_i+0x164>
 8007b90:	3501      	adds	r5, #1
 8007b92:	68e3      	ldr	r3, [r4, #12]
 8007b94:	9903      	ldr	r1, [sp, #12]
 8007b96:	1a5b      	subs	r3, r3, r1
 8007b98:	42ab      	cmp	r3, r5
 8007b9a:	dcf2      	bgt.n	8007b82 <_printf_i+0x21e>
 8007b9c:	e7eb      	b.n	8007b76 <_printf_i+0x212>
 8007b9e:	2500      	movs	r5, #0
 8007ba0:	f104 0619 	add.w	r6, r4, #25
 8007ba4:	e7f5      	b.n	8007b92 <_printf_i+0x22e>
 8007ba6:	bf00      	nop
 8007ba8:	0800db66 	.word	0x0800db66
 8007bac:	0800db77 	.word	0x0800db77

08007bb0 <_scanf_float>:
 8007bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb4:	b087      	sub	sp, #28
 8007bb6:	4617      	mov	r7, r2
 8007bb8:	9303      	str	r3, [sp, #12]
 8007bba:	688b      	ldr	r3, [r1, #8]
 8007bbc:	1e5a      	subs	r2, r3, #1
 8007bbe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007bc2:	bf83      	ittte	hi
 8007bc4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007bc8:	195b      	addhi	r3, r3, r5
 8007bca:	9302      	strhi	r3, [sp, #8]
 8007bcc:	2300      	movls	r3, #0
 8007bce:	bf86      	itte	hi
 8007bd0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007bd4:	608b      	strhi	r3, [r1, #8]
 8007bd6:	9302      	strls	r3, [sp, #8]
 8007bd8:	680b      	ldr	r3, [r1, #0]
 8007bda:	468b      	mov	fp, r1
 8007bdc:	2500      	movs	r5, #0
 8007bde:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007be2:	f84b 3b1c 	str.w	r3, [fp], #28
 8007be6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007bea:	4680      	mov	r8, r0
 8007bec:	460c      	mov	r4, r1
 8007bee:	465e      	mov	r6, fp
 8007bf0:	46aa      	mov	sl, r5
 8007bf2:	46a9      	mov	r9, r5
 8007bf4:	9501      	str	r5, [sp, #4]
 8007bf6:	68a2      	ldr	r2, [r4, #8]
 8007bf8:	b152      	cbz	r2, 8007c10 <_scanf_float+0x60>
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	2b4e      	cmp	r3, #78	; 0x4e
 8007c00:	d864      	bhi.n	8007ccc <_scanf_float+0x11c>
 8007c02:	2b40      	cmp	r3, #64	; 0x40
 8007c04:	d83c      	bhi.n	8007c80 <_scanf_float+0xd0>
 8007c06:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007c0a:	b2c8      	uxtb	r0, r1
 8007c0c:	280e      	cmp	r0, #14
 8007c0e:	d93a      	bls.n	8007c86 <_scanf_float+0xd6>
 8007c10:	f1b9 0f00 	cmp.w	r9, #0
 8007c14:	d003      	beq.n	8007c1e <_scanf_float+0x6e>
 8007c16:	6823      	ldr	r3, [r4, #0]
 8007c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c1c:	6023      	str	r3, [r4, #0]
 8007c1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c22:	f1ba 0f01 	cmp.w	sl, #1
 8007c26:	f200 8113 	bhi.w	8007e50 <_scanf_float+0x2a0>
 8007c2a:	455e      	cmp	r6, fp
 8007c2c:	f200 8105 	bhi.w	8007e3a <_scanf_float+0x28a>
 8007c30:	2501      	movs	r5, #1
 8007c32:	4628      	mov	r0, r5
 8007c34:	b007      	add	sp, #28
 8007c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c3a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007c3e:	2a0d      	cmp	r2, #13
 8007c40:	d8e6      	bhi.n	8007c10 <_scanf_float+0x60>
 8007c42:	a101      	add	r1, pc, #4	; (adr r1, 8007c48 <_scanf_float+0x98>)
 8007c44:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007c48:	08007d87 	.word	0x08007d87
 8007c4c:	08007c11 	.word	0x08007c11
 8007c50:	08007c11 	.word	0x08007c11
 8007c54:	08007c11 	.word	0x08007c11
 8007c58:	08007de7 	.word	0x08007de7
 8007c5c:	08007dbf 	.word	0x08007dbf
 8007c60:	08007c11 	.word	0x08007c11
 8007c64:	08007c11 	.word	0x08007c11
 8007c68:	08007d95 	.word	0x08007d95
 8007c6c:	08007c11 	.word	0x08007c11
 8007c70:	08007c11 	.word	0x08007c11
 8007c74:	08007c11 	.word	0x08007c11
 8007c78:	08007c11 	.word	0x08007c11
 8007c7c:	08007d4d 	.word	0x08007d4d
 8007c80:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007c84:	e7db      	b.n	8007c3e <_scanf_float+0x8e>
 8007c86:	290e      	cmp	r1, #14
 8007c88:	d8c2      	bhi.n	8007c10 <_scanf_float+0x60>
 8007c8a:	a001      	add	r0, pc, #4	; (adr r0, 8007c90 <_scanf_float+0xe0>)
 8007c8c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007c90:	08007d3f 	.word	0x08007d3f
 8007c94:	08007c11 	.word	0x08007c11
 8007c98:	08007d3f 	.word	0x08007d3f
 8007c9c:	08007dd3 	.word	0x08007dd3
 8007ca0:	08007c11 	.word	0x08007c11
 8007ca4:	08007ced 	.word	0x08007ced
 8007ca8:	08007d29 	.word	0x08007d29
 8007cac:	08007d29 	.word	0x08007d29
 8007cb0:	08007d29 	.word	0x08007d29
 8007cb4:	08007d29 	.word	0x08007d29
 8007cb8:	08007d29 	.word	0x08007d29
 8007cbc:	08007d29 	.word	0x08007d29
 8007cc0:	08007d29 	.word	0x08007d29
 8007cc4:	08007d29 	.word	0x08007d29
 8007cc8:	08007d29 	.word	0x08007d29
 8007ccc:	2b6e      	cmp	r3, #110	; 0x6e
 8007cce:	d809      	bhi.n	8007ce4 <_scanf_float+0x134>
 8007cd0:	2b60      	cmp	r3, #96	; 0x60
 8007cd2:	d8b2      	bhi.n	8007c3a <_scanf_float+0x8a>
 8007cd4:	2b54      	cmp	r3, #84	; 0x54
 8007cd6:	d077      	beq.n	8007dc8 <_scanf_float+0x218>
 8007cd8:	2b59      	cmp	r3, #89	; 0x59
 8007cda:	d199      	bne.n	8007c10 <_scanf_float+0x60>
 8007cdc:	2d07      	cmp	r5, #7
 8007cde:	d197      	bne.n	8007c10 <_scanf_float+0x60>
 8007ce0:	2508      	movs	r5, #8
 8007ce2:	e029      	b.n	8007d38 <_scanf_float+0x188>
 8007ce4:	2b74      	cmp	r3, #116	; 0x74
 8007ce6:	d06f      	beq.n	8007dc8 <_scanf_float+0x218>
 8007ce8:	2b79      	cmp	r3, #121	; 0x79
 8007cea:	e7f6      	b.n	8007cda <_scanf_float+0x12a>
 8007cec:	6821      	ldr	r1, [r4, #0]
 8007cee:	05c8      	lsls	r0, r1, #23
 8007cf0:	d51a      	bpl.n	8007d28 <_scanf_float+0x178>
 8007cf2:	9b02      	ldr	r3, [sp, #8]
 8007cf4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007cf8:	6021      	str	r1, [r4, #0]
 8007cfa:	f109 0901 	add.w	r9, r9, #1
 8007cfe:	b11b      	cbz	r3, 8007d08 <_scanf_float+0x158>
 8007d00:	3b01      	subs	r3, #1
 8007d02:	3201      	adds	r2, #1
 8007d04:	9302      	str	r3, [sp, #8]
 8007d06:	60a2      	str	r2, [r4, #8]
 8007d08:	68a3      	ldr	r3, [r4, #8]
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	60a3      	str	r3, [r4, #8]
 8007d0e:	6923      	ldr	r3, [r4, #16]
 8007d10:	3301      	adds	r3, #1
 8007d12:	6123      	str	r3, [r4, #16]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	3b01      	subs	r3, #1
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	607b      	str	r3, [r7, #4]
 8007d1c:	f340 8084 	ble.w	8007e28 <_scanf_float+0x278>
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	3301      	adds	r3, #1
 8007d24:	603b      	str	r3, [r7, #0]
 8007d26:	e766      	b.n	8007bf6 <_scanf_float+0x46>
 8007d28:	eb1a 0f05 	cmn.w	sl, r5
 8007d2c:	f47f af70 	bne.w	8007c10 <_scanf_float+0x60>
 8007d30:	6822      	ldr	r2, [r4, #0]
 8007d32:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007d36:	6022      	str	r2, [r4, #0]
 8007d38:	f806 3b01 	strb.w	r3, [r6], #1
 8007d3c:	e7e4      	b.n	8007d08 <_scanf_float+0x158>
 8007d3e:	6822      	ldr	r2, [r4, #0]
 8007d40:	0610      	lsls	r0, r2, #24
 8007d42:	f57f af65 	bpl.w	8007c10 <_scanf_float+0x60>
 8007d46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d4a:	e7f4      	b.n	8007d36 <_scanf_float+0x186>
 8007d4c:	f1ba 0f00 	cmp.w	sl, #0
 8007d50:	d10e      	bne.n	8007d70 <_scanf_float+0x1c0>
 8007d52:	f1b9 0f00 	cmp.w	r9, #0
 8007d56:	d10e      	bne.n	8007d76 <_scanf_float+0x1c6>
 8007d58:	6822      	ldr	r2, [r4, #0]
 8007d5a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007d5e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007d62:	d108      	bne.n	8007d76 <_scanf_float+0x1c6>
 8007d64:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007d68:	6022      	str	r2, [r4, #0]
 8007d6a:	f04f 0a01 	mov.w	sl, #1
 8007d6e:	e7e3      	b.n	8007d38 <_scanf_float+0x188>
 8007d70:	f1ba 0f02 	cmp.w	sl, #2
 8007d74:	d055      	beq.n	8007e22 <_scanf_float+0x272>
 8007d76:	2d01      	cmp	r5, #1
 8007d78:	d002      	beq.n	8007d80 <_scanf_float+0x1d0>
 8007d7a:	2d04      	cmp	r5, #4
 8007d7c:	f47f af48 	bne.w	8007c10 <_scanf_float+0x60>
 8007d80:	3501      	adds	r5, #1
 8007d82:	b2ed      	uxtb	r5, r5
 8007d84:	e7d8      	b.n	8007d38 <_scanf_float+0x188>
 8007d86:	f1ba 0f01 	cmp.w	sl, #1
 8007d8a:	f47f af41 	bne.w	8007c10 <_scanf_float+0x60>
 8007d8e:	f04f 0a02 	mov.w	sl, #2
 8007d92:	e7d1      	b.n	8007d38 <_scanf_float+0x188>
 8007d94:	b97d      	cbnz	r5, 8007db6 <_scanf_float+0x206>
 8007d96:	f1b9 0f00 	cmp.w	r9, #0
 8007d9a:	f47f af3c 	bne.w	8007c16 <_scanf_float+0x66>
 8007d9e:	6822      	ldr	r2, [r4, #0]
 8007da0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007da4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007da8:	f47f af39 	bne.w	8007c1e <_scanf_float+0x6e>
 8007dac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007db0:	6022      	str	r2, [r4, #0]
 8007db2:	2501      	movs	r5, #1
 8007db4:	e7c0      	b.n	8007d38 <_scanf_float+0x188>
 8007db6:	2d03      	cmp	r5, #3
 8007db8:	d0e2      	beq.n	8007d80 <_scanf_float+0x1d0>
 8007dba:	2d05      	cmp	r5, #5
 8007dbc:	e7de      	b.n	8007d7c <_scanf_float+0x1cc>
 8007dbe:	2d02      	cmp	r5, #2
 8007dc0:	f47f af26 	bne.w	8007c10 <_scanf_float+0x60>
 8007dc4:	2503      	movs	r5, #3
 8007dc6:	e7b7      	b.n	8007d38 <_scanf_float+0x188>
 8007dc8:	2d06      	cmp	r5, #6
 8007dca:	f47f af21 	bne.w	8007c10 <_scanf_float+0x60>
 8007dce:	2507      	movs	r5, #7
 8007dd0:	e7b2      	b.n	8007d38 <_scanf_float+0x188>
 8007dd2:	6822      	ldr	r2, [r4, #0]
 8007dd4:	0591      	lsls	r1, r2, #22
 8007dd6:	f57f af1b 	bpl.w	8007c10 <_scanf_float+0x60>
 8007dda:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007dde:	6022      	str	r2, [r4, #0]
 8007de0:	f8cd 9004 	str.w	r9, [sp, #4]
 8007de4:	e7a8      	b.n	8007d38 <_scanf_float+0x188>
 8007de6:	6822      	ldr	r2, [r4, #0]
 8007de8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007dec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007df0:	d006      	beq.n	8007e00 <_scanf_float+0x250>
 8007df2:	0550      	lsls	r0, r2, #21
 8007df4:	f57f af0c 	bpl.w	8007c10 <_scanf_float+0x60>
 8007df8:	f1b9 0f00 	cmp.w	r9, #0
 8007dfc:	f43f af0f 	beq.w	8007c1e <_scanf_float+0x6e>
 8007e00:	0591      	lsls	r1, r2, #22
 8007e02:	bf58      	it	pl
 8007e04:	9901      	ldrpl	r1, [sp, #4]
 8007e06:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007e0a:	bf58      	it	pl
 8007e0c:	eba9 0101 	subpl.w	r1, r9, r1
 8007e10:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007e14:	bf58      	it	pl
 8007e16:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007e1a:	6022      	str	r2, [r4, #0]
 8007e1c:	f04f 0900 	mov.w	r9, #0
 8007e20:	e78a      	b.n	8007d38 <_scanf_float+0x188>
 8007e22:	f04f 0a03 	mov.w	sl, #3
 8007e26:	e787      	b.n	8007d38 <_scanf_float+0x188>
 8007e28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007e2c:	4639      	mov	r1, r7
 8007e2e:	4640      	mov	r0, r8
 8007e30:	4798      	blx	r3
 8007e32:	2800      	cmp	r0, #0
 8007e34:	f43f aedf 	beq.w	8007bf6 <_scanf_float+0x46>
 8007e38:	e6ea      	b.n	8007c10 <_scanf_float+0x60>
 8007e3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e42:	463a      	mov	r2, r7
 8007e44:	4640      	mov	r0, r8
 8007e46:	4798      	blx	r3
 8007e48:	6923      	ldr	r3, [r4, #16]
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	6123      	str	r3, [r4, #16]
 8007e4e:	e6ec      	b.n	8007c2a <_scanf_float+0x7a>
 8007e50:	1e6b      	subs	r3, r5, #1
 8007e52:	2b06      	cmp	r3, #6
 8007e54:	d825      	bhi.n	8007ea2 <_scanf_float+0x2f2>
 8007e56:	2d02      	cmp	r5, #2
 8007e58:	d836      	bhi.n	8007ec8 <_scanf_float+0x318>
 8007e5a:	455e      	cmp	r6, fp
 8007e5c:	f67f aee8 	bls.w	8007c30 <_scanf_float+0x80>
 8007e60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e64:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e68:	463a      	mov	r2, r7
 8007e6a:	4640      	mov	r0, r8
 8007e6c:	4798      	blx	r3
 8007e6e:	6923      	ldr	r3, [r4, #16]
 8007e70:	3b01      	subs	r3, #1
 8007e72:	6123      	str	r3, [r4, #16]
 8007e74:	e7f1      	b.n	8007e5a <_scanf_float+0x2aa>
 8007e76:	9802      	ldr	r0, [sp, #8]
 8007e78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e7c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007e80:	9002      	str	r0, [sp, #8]
 8007e82:	463a      	mov	r2, r7
 8007e84:	4640      	mov	r0, r8
 8007e86:	4798      	blx	r3
 8007e88:	6923      	ldr	r3, [r4, #16]
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	6123      	str	r3, [r4, #16]
 8007e8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e92:	fa5f fa8a 	uxtb.w	sl, sl
 8007e96:	f1ba 0f02 	cmp.w	sl, #2
 8007e9a:	d1ec      	bne.n	8007e76 <_scanf_float+0x2c6>
 8007e9c:	3d03      	subs	r5, #3
 8007e9e:	b2ed      	uxtb	r5, r5
 8007ea0:	1b76      	subs	r6, r6, r5
 8007ea2:	6823      	ldr	r3, [r4, #0]
 8007ea4:	05da      	lsls	r2, r3, #23
 8007ea6:	d52f      	bpl.n	8007f08 <_scanf_float+0x358>
 8007ea8:	055b      	lsls	r3, r3, #21
 8007eaa:	d510      	bpl.n	8007ece <_scanf_float+0x31e>
 8007eac:	455e      	cmp	r6, fp
 8007eae:	f67f aebf 	bls.w	8007c30 <_scanf_float+0x80>
 8007eb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007eb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007eba:	463a      	mov	r2, r7
 8007ebc:	4640      	mov	r0, r8
 8007ebe:	4798      	blx	r3
 8007ec0:	6923      	ldr	r3, [r4, #16]
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	6123      	str	r3, [r4, #16]
 8007ec6:	e7f1      	b.n	8007eac <_scanf_float+0x2fc>
 8007ec8:	46aa      	mov	sl, r5
 8007eca:	9602      	str	r6, [sp, #8]
 8007ecc:	e7df      	b.n	8007e8e <_scanf_float+0x2de>
 8007ece:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007ed2:	6923      	ldr	r3, [r4, #16]
 8007ed4:	2965      	cmp	r1, #101	; 0x65
 8007ed6:	f103 33ff 	add.w	r3, r3, #4294967295
 8007eda:	f106 35ff 	add.w	r5, r6, #4294967295
 8007ede:	6123      	str	r3, [r4, #16]
 8007ee0:	d00c      	beq.n	8007efc <_scanf_float+0x34c>
 8007ee2:	2945      	cmp	r1, #69	; 0x45
 8007ee4:	d00a      	beq.n	8007efc <_scanf_float+0x34c>
 8007ee6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007eea:	463a      	mov	r2, r7
 8007eec:	4640      	mov	r0, r8
 8007eee:	4798      	blx	r3
 8007ef0:	6923      	ldr	r3, [r4, #16]
 8007ef2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	1eb5      	subs	r5, r6, #2
 8007efa:	6123      	str	r3, [r4, #16]
 8007efc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f00:	463a      	mov	r2, r7
 8007f02:	4640      	mov	r0, r8
 8007f04:	4798      	blx	r3
 8007f06:	462e      	mov	r6, r5
 8007f08:	6825      	ldr	r5, [r4, #0]
 8007f0a:	f015 0510 	ands.w	r5, r5, #16
 8007f0e:	d159      	bne.n	8007fc4 <_scanf_float+0x414>
 8007f10:	7035      	strb	r5, [r6, #0]
 8007f12:	6823      	ldr	r3, [r4, #0]
 8007f14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f1c:	d11c      	bne.n	8007f58 <_scanf_float+0x3a8>
 8007f1e:	9b01      	ldr	r3, [sp, #4]
 8007f20:	454b      	cmp	r3, r9
 8007f22:	eba3 0209 	sub.w	r2, r3, r9
 8007f26:	d124      	bne.n	8007f72 <_scanf_float+0x3c2>
 8007f28:	2200      	movs	r2, #0
 8007f2a:	4659      	mov	r1, fp
 8007f2c:	4640      	mov	r0, r8
 8007f2e:	f000 fe9d 	bl	8008c6c <_strtod_r>
 8007f32:	f8d4 c000 	ldr.w	ip, [r4]
 8007f36:	9b03      	ldr	r3, [sp, #12]
 8007f38:	f01c 0f02 	tst.w	ip, #2
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4606      	mov	r6, r0
 8007f40:	460f      	mov	r7, r1
 8007f42:	d021      	beq.n	8007f88 <_scanf_float+0x3d8>
 8007f44:	9903      	ldr	r1, [sp, #12]
 8007f46:	1d1a      	adds	r2, r3, #4
 8007f48:	600a      	str	r2, [r1, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	e9c3 6700 	strd	r6, r7, [r3]
 8007f50:	68e3      	ldr	r3, [r4, #12]
 8007f52:	3301      	adds	r3, #1
 8007f54:	60e3      	str	r3, [r4, #12]
 8007f56:	e66c      	b.n	8007c32 <_scanf_float+0x82>
 8007f58:	9b04      	ldr	r3, [sp, #16]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d0e4      	beq.n	8007f28 <_scanf_float+0x378>
 8007f5e:	9905      	ldr	r1, [sp, #20]
 8007f60:	230a      	movs	r3, #10
 8007f62:	462a      	mov	r2, r5
 8007f64:	3101      	adds	r1, #1
 8007f66:	4640      	mov	r0, r8
 8007f68:	f000 ff0a 	bl	8008d80 <_strtol_r>
 8007f6c:	9b04      	ldr	r3, [sp, #16]
 8007f6e:	9e05      	ldr	r6, [sp, #20]
 8007f70:	1ac2      	subs	r2, r0, r3
 8007f72:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007f76:	429e      	cmp	r6, r3
 8007f78:	bf28      	it	cs
 8007f7a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007f7e:	4912      	ldr	r1, [pc, #72]	; (8007fc8 <_scanf_float+0x418>)
 8007f80:	4630      	mov	r0, r6
 8007f82:	f000 f829 	bl	8007fd8 <siprintf>
 8007f86:	e7cf      	b.n	8007f28 <_scanf_float+0x378>
 8007f88:	f01c 0f04 	tst.w	ip, #4
 8007f8c:	f103 0e04 	add.w	lr, r3, #4
 8007f90:	d003      	beq.n	8007f9a <_scanf_float+0x3ea>
 8007f92:	9903      	ldr	r1, [sp, #12]
 8007f94:	f8c1 e000 	str.w	lr, [r1]
 8007f98:	e7d7      	b.n	8007f4a <_scanf_float+0x39a>
 8007f9a:	9a03      	ldr	r2, [sp, #12]
 8007f9c:	f8c2 e000 	str.w	lr, [r2]
 8007fa0:	f8d3 8000 	ldr.w	r8, [r3]
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	f7f8 fdc0 	bl	8000b2c <__aeabi_dcmpun>
 8007fac:	b128      	cbz	r0, 8007fba <_scanf_float+0x40a>
 8007fae:	4807      	ldr	r0, [pc, #28]	; (8007fcc <_scanf_float+0x41c>)
 8007fb0:	f000 f80e 	bl	8007fd0 <nanf>
 8007fb4:	f8c8 0000 	str.w	r0, [r8]
 8007fb8:	e7ca      	b.n	8007f50 <_scanf_float+0x3a0>
 8007fba:	4630      	mov	r0, r6
 8007fbc:	4639      	mov	r1, r7
 8007fbe:	f7f8 fe13 	bl	8000be8 <__aeabi_d2f>
 8007fc2:	e7f7      	b.n	8007fb4 <_scanf_float+0x404>
 8007fc4:	2500      	movs	r5, #0
 8007fc6:	e634      	b.n	8007c32 <_scanf_float+0x82>
 8007fc8:	0800db88 	.word	0x0800db88
 8007fcc:	0800dfa0 	.word	0x0800dfa0

08007fd0 <nanf>:
 8007fd0:	4800      	ldr	r0, [pc, #0]	; (8007fd4 <nanf+0x4>)
 8007fd2:	4770      	bx	lr
 8007fd4:	7fc00000 	.word	0x7fc00000

08007fd8 <siprintf>:
 8007fd8:	b40e      	push	{r1, r2, r3}
 8007fda:	b500      	push	{lr}
 8007fdc:	b09c      	sub	sp, #112	; 0x70
 8007fde:	ab1d      	add	r3, sp, #116	; 0x74
 8007fe0:	9002      	str	r0, [sp, #8]
 8007fe2:	9006      	str	r0, [sp, #24]
 8007fe4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007fe8:	4809      	ldr	r0, [pc, #36]	; (8008010 <siprintf+0x38>)
 8007fea:	9107      	str	r1, [sp, #28]
 8007fec:	9104      	str	r1, [sp, #16]
 8007fee:	4909      	ldr	r1, [pc, #36]	; (8008014 <siprintf+0x3c>)
 8007ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ff4:	9105      	str	r1, [sp, #20]
 8007ff6:	6800      	ldr	r0, [r0, #0]
 8007ff8:	9301      	str	r3, [sp, #4]
 8007ffa:	a902      	add	r1, sp, #8
 8007ffc:	f002 fea0 	bl	800ad40 <_svfiprintf_r>
 8008000:	9b02      	ldr	r3, [sp, #8]
 8008002:	2200      	movs	r2, #0
 8008004:	701a      	strb	r2, [r3, #0]
 8008006:	b01c      	add	sp, #112	; 0x70
 8008008:	f85d eb04 	ldr.w	lr, [sp], #4
 800800c:	b003      	add	sp, #12
 800800e:	4770      	bx	lr
 8008010:	200000bc 	.word	0x200000bc
 8008014:	ffff0208 	.word	0xffff0208

08008018 <sulp>:
 8008018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800801c:	460f      	mov	r7, r1
 800801e:	4690      	mov	r8, r2
 8008020:	f002 fc32 	bl	800a888 <__ulp>
 8008024:	4604      	mov	r4, r0
 8008026:	460d      	mov	r5, r1
 8008028:	f1b8 0f00 	cmp.w	r8, #0
 800802c:	d011      	beq.n	8008052 <sulp+0x3a>
 800802e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008032:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008036:	2b00      	cmp	r3, #0
 8008038:	dd0b      	ble.n	8008052 <sulp+0x3a>
 800803a:	051b      	lsls	r3, r3, #20
 800803c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008040:	2400      	movs	r4, #0
 8008042:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008046:	4622      	mov	r2, r4
 8008048:	462b      	mov	r3, r5
 800804a:	f7f8 fad5 	bl	80005f8 <__aeabi_dmul>
 800804e:	4604      	mov	r4, r0
 8008050:	460d      	mov	r5, r1
 8008052:	4620      	mov	r0, r4
 8008054:	4629      	mov	r1, r5
 8008056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800805a:	0000      	movs	r0, r0
 800805c:	0000      	movs	r0, r0
	...

08008060 <_strtod_l>:
 8008060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008064:	ed2d 8b02 	vpush	{d8}
 8008068:	b0a1      	sub	sp, #132	; 0x84
 800806a:	461f      	mov	r7, r3
 800806c:	2300      	movs	r3, #0
 800806e:	931c      	str	r3, [sp, #112]	; 0x70
 8008070:	4ba4      	ldr	r3, [pc, #656]	; (8008304 <_strtod_l+0x2a4>)
 8008072:	9217      	str	r2, [sp, #92]	; 0x5c
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	9305      	str	r3, [sp, #20]
 8008078:	4604      	mov	r4, r0
 800807a:	4618      	mov	r0, r3
 800807c:	4688      	mov	r8, r1
 800807e:	f7f8 f8a7 	bl	80001d0 <strlen>
 8008082:	f04f 0900 	mov.w	r9, #0
 8008086:	4605      	mov	r5, r0
 8008088:	f04f 0a00 	mov.w	sl, #0
 800808c:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
 8008090:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008092:	781a      	ldrb	r2, [r3, #0]
 8008094:	2a2b      	cmp	r2, #43	; 0x2b
 8008096:	d04c      	beq.n	8008132 <_strtod_l+0xd2>
 8008098:	d839      	bhi.n	800810e <_strtod_l+0xae>
 800809a:	2a0d      	cmp	r2, #13
 800809c:	d832      	bhi.n	8008104 <_strtod_l+0xa4>
 800809e:	2a08      	cmp	r2, #8
 80080a0:	d832      	bhi.n	8008108 <_strtod_l+0xa8>
 80080a2:	2a00      	cmp	r2, #0
 80080a4:	d03c      	beq.n	8008120 <_strtod_l+0xc0>
 80080a6:	2300      	movs	r3, #0
 80080a8:	930c      	str	r3, [sp, #48]	; 0x30
 80080aa:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80080ac:	7833      	ldrb	r3, [r6, #0]
 80080ae:	2b30      	cmp	r3, #48	; 0x30
 80080b0:	f040 80b4 	bne.w	800821c <_strtod_l+0x1bc>
 80080b4:	7873      	ldrb	r3, [r6, #1]
 80080b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80080ba:	2b58      	cmp	r3, #88	; 0x58
 80080bc:	d16c      	bne.n	8008198 <_strtod_l+0x138>
 80080be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080c0:	9301      	str	r3, [sp, #4]
 80080c2:	ab1c      	add	r3, sp, #112	; 0x70
 80080c4:	9702      	str	r7, [sp, #8]
 80080c6:	9300      	str	r3, [sp, #0]
 80080c8:	4a8f      	ldr	r2, [pc, #572]	; (8008308 <_strtod_l+0x2a8>)
 80080ca:	ab1d      	add	r3, sp, #116	; 0x74
 80080cc:	a91b      	add	r1, sp, #108	; 0x6c
 80080ce:	4620      	mov	r0, r4
 80080d0:	f001 fd3a 	bl	8009b48 <__gethex>
 80080d4:	f010 0707 	ands.w	r7, r0, #7
 80080d8:	4605      	mov	r5, r0
 80080da:	d005      	beq.n	80080e8 <_strtod_l+0x88>
 80080dc:	2f06      	cmp	r7, #6
 80080de:	d12a      	bne.n	8008136 <_strtod_l+0xd6>
 80080e0:	3601      	adds	r6, #1
 80080e2:	2300      	movs	r3, #0
 80080e4:	961b      	str	r6, [sp, #108]	; 0x6c
 80080e6:	930c      	str	r3, [sp, #48]	; 0x30
 80080e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	f040 8590 	bne.w	8008c10 <_strtod_l+0xbb0>
 80080f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080f2:	b1db      	cbz	r3, 800812c <_strtod_l+0xcc>
 80080f4:	4648      	mov	r0, r9
 80080f6:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 80080fa:	b021      	add	sp, #132	; 0x84
 80080fc:	ecbd 8b02 	vpop	{d8}
 8008100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008104:	2a20      	cmp	r2, #32
 8008106:	d1ce      	bne.n	80080a6 <_strtod_l+0x46>
 8008108:	3301      	adds	r3, #1
 800810a:	931b      	str	r3, [sp, #108]	; 0x6c
 800810c:	e7c0      	b.n	8008090 <_strtod_l+0x30>
 800810e:	2a2d      	cmp	r2, #45	; 0x2d
 8008110:	d1c9      	bne.n	80080a6 <_strtod_l+0x46>
 8008112:	2201      	movs	r2, #1
 8008114:	920c      	str	r2, [sp, #48]	; 0x30
 8008116:	1c5a      	adds	r2, r3, #1
 8008118:	921b      	str	r2, [sp, #108]	; 0x6c
 800811a:	785b      	ldrb	r3, [r3, #1]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1c4      	bne.n	80080aa <_strtod_l+0x4a>
 8008120:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008122:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
 8008126:	2b00      	cmp	r3, #0
 8008128:	f040 8570 	bne.w	8008c0c <_strtod_l+0xbac>
 800812c:	4648      	mov	r0, r9
 800812e:	4651      	mov	r1, sl
 8008130:	e7e3      	b.n	80080fa <_strtod_l+0x9a>
 8008132:	2200      	movs	r2, #0
 8008134:	e7ee      	b.n	8008114 <_strtod_l+0xb4>
 8008136:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008138:	b13a      	cbz	r2, 800814a <_strtod_l+0xea>
 800813a:	2135      	movs	r1, #53	; 0x35
 800813c:	a81e      	add	r0, sp, #120	; 0x78
 800813e:	f002 fca5 	bl	800aa8c <__copybits>
 8008142:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008144:	4620      	mov	r0, r4
 8008146:	f002 f873 	bl	800a230 <_Bfree>
 800814a:	3f01      	subs	r7, #1
 800814c:	2f05      	cmp	r7, #5
 800814e:	d807      	bhi.n	8008160 <_strtod_l+0x100>
 8008150:	e8df f007 	tbb	[pc, r7]
 8008154:	1d180b0e 	.word	0x1d180b0e
 8008158:	030e      	.short	0x030e
 800815a:	f04f 0a00 	mov.w	sl, #0
 800815e:	46d1      	mov	r9, sl
 8008160:	0728      	lsls	r0, r5, #28
 8008162:	d5c1      	bpl.n	80080e8 <_strtod_l+0x88>
 8008164:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8008168:	e7be      	b.n	80080e8 <_strtod_l+0x88>
 800816a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800816e:	e7f7      	b.n	8008160 <_strtod_l+0x100>
 8008170:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8008174:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008176:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800817a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800817e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8008182:	e7ed      	b.n	8008160 <_strtod_l+0x100>
 8008184:	f8df a184 	ldr.w	sl, [pc, #388]	; 800830c <_strtod_l+0x2ac>
 8008188:	f04f 0900 	mov.w	r9, #0
 800818c:	e7e8      	b.n	8008160 <_strtod_l+0x100>
 800818e:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8008192:	f04f 39ff 	mov.w	r9, #4294967295
 8008196:	e7e3      	b.n	8008160 <_strtod_l+0x100>
 8008198:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800819a:	1c5a      	adds	r2, r3, #1
 800819c:	921b      	str	r2, [sp, #108]	; 0x6c
 800819e:	785b      	ldrb	r3, [r3, #1]
 80081a0:	2b30      	cmp	r3, #48	; 0x30
 80081a2:	d0f9      	beq.n	8008198 <_strtod_l+0x138>
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d09f      	beq.n	80080e8 <_strtod_l+0x88>
 80081a8:	2301      	movs	r3, #1
 80081aa:	f04f 0b00 	mov.w	fp, #0
 80081ae:	9304      	str	r3, [sp, #16]
 80081b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081b2:	9308      	str	r3, [sp, #32]
 80081b4:	f8cd b01c 	str.w	fp, [sp, #28]
 80081b8:	465f      	mov	r7, fp
 80081ba:	220a      	movs	r2, #10
 80081bc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80081be:	7806      	ldrb	r6, [r0, #0]
 80081c0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80081c4:	b2d9      	uxtb	r1, r3
 80081c6:	2909      	cmp	r1, #9
 80081c8:	d92a      	bls.n	8008220 <_strtod_l+0x1c0>
 80081ca:	9905      	ldr	r1, [sp, #20]
 80081cc:	462a      	mov	r2, r5
 80081ce:	f002 fecd 	bl	800af6c <strncmp>
 80081d2:	b398      	cbz	r0, 800823c <_strtod_l+0x1dc>
 80081d4:	2000      	movs	r0, #0
 80081d6:	4633      	mov	r3, r6
 80081d8:	463d      	mov	r5, r7
 80081da:	9005      	str	r0, [sp, #20]
 80081dc:	4602      	mov	r2, r0
 80081de:	2b65      	cmp	r3, #101	; 0x65
 80081e0:	d001      	beq.n	80081e6 <_strtod_l+0x186>
 80081e2:	2b45      	cmp	r3, #69	; 0x45
 80081e4:	d118      	bne.n	8008218 <_strtod_l+0x1b8>
 80081e6:	b91d      	cbnz	r5, 80081f0 <_strtod_l+0x190>
 80081e8:	9b04      	ldr	r3, [sp, #16]
 80081ea:	4303      	orrs	r3, r0
 80081ec:	d098      	beq.n	8008120 <_strtod_l+0xc0>
 80081ee:	2500      	movs	r5, #0
 80081f0:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 80081f4:	f108 0301 	add.w	r3, r8, #1
 80081f8:	931b      	str	r3, [sp, #108]	; 0x6c
 80081fa:	f898 3001 	ldrb.w	r3, [r8, #1]
 80081fe:	2b2b      	cmp	r3, #43	; 0x2b
 8008200:	d075      	beq.n	80082ee <_strtod_l+0x28e>
 8008202:	2b2d      	cmp	r3, #45	; 0x2d
 8008204:	d07b      	beq.n	80082fe <_strtod_l+0x29e>
 8008206:	f04f 0c00 	mov.w	ip, #0
 800820a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800820e:	2909      	cmp	r1, #9
 8008210:	f240 8082 	bls.w	8008318 <_strtod_l+0x2b8>
 8008214:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
 8008218:	2600      	movs	r6, #0
 800821a:	e09d      	b.n	8008358 <_strtod_l+0x2f8>
 800821c:	2300      	movs	r3, #0
 800821e:	e7c4      	b.n	80081aa <_strtod_l+0x14a>
 8008220:	2f08      	cmp	r7, #8
 8008222:	bfd8      	it	le
 8008224:	9907      	ldrle	r1, [sp, #28]
 8008226:	f100 0001 	add.w	r0, r0, #1
 800822a:	bfda      	itte	le
 800822c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008230:	9307      	strle	r3, [sp, #28]
 8008232:	fb02 3b0b 	mlagt	fp, r2, fp, r3
 8008236:	3701      	adds	r7, #1
 8008238:	901b      	str	r0, [sp, #108]	; 0x6c
 800823a:	e7bf      	b.n	80081bc <_strtod_l+0x15c>
 800823c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800823e:	195a      	adds	r2, r3, r5
 8008240:	921b      	str	r2, [sp, #108]	; 0x6c
 8008242:	5d5b      	ldrb	r3, [r3, r5]
 8008244:	2f00      	cmp	r7, #0
 8008246:	d037      	beq.n	80082b8 <_strtod_l+0x258>
 8008248:	9005      	str	r0, [sp, #20]
 800824a:	463d      	mov	r5, r7
 800824c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008250:	2a09      	cmp	r2, #9
 8008252:	d912      	bls.n	800827a <_strtod_l+0x21a>
 8008254:	2201      	movs	r2, #1
 8008256:	e7c2      	b.n	80081de <_strtod_l+0x17e>
 8008258:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800825a:	1c5a      	adds	r2, r3, #1
 800825c:	921b      	str	r2, [sp, #108]	; 0x6c
 800825e:	785b      	ldrb	r3, [r3, #1]
 8008260:	3001      	adds	r0, #1
 8008262:	2b30      	cmp	r3, #48	; 0x30
 8008264:	d0f8      	beq.n	8008258 <_strtod_l+0x1f8>
 8008266:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800826a:	2a08      	cmp	r2, #8
 800826c:	f200 84d5 	bhi.w	8008c1a <_strtod_l+0xbba>
 8008270:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008272:	9005      	str	r0, [sp, #20]
 8008274:	2000      	movs	r0, #0
 8008276:	9208      	str	r2, [sp, #32]
 8008278:	4605      	mov	r5, r0
 800827a:	3b30      	subs	r3, #48	; 0x30
 800827c:	f100 0201 	add.w	r2, r0, #1
 8008280:	d014      	beq.n	80082ac <_strtod_l+0x24c>
 8008282:	9905      	ldr	r1, [sp, #20]
 8008284:	4411      	add	r1, r2
 8008286:	9105      	str	r1, [sp, #20]
 8008288:	462a      	mov	r2, r5
 800828a:	eb00 0e05 	add.w	lr, r0, r5
 800828e:	210a      	movs	r1, #10
 8008290:	4572      	cmp	r2, lr
 8008292:	d113      	bne.n	80082bc <_strtod_l+0x25c>
 8008294:	182a      	adds	r2, r5, r0
 8008296:	2a08      	cmp	r2, #8
 8008298:	f105 0501 	add.w	r5, r5, #1
 800829c:	4405      	add	r5, r0
 800829e:	dc1c      	bgt.n	80082da <_strtod_l+0x27a>
 80082a0:	9907      	ldr	r1, [sp, #28]
 80082a2:	220a      	movs	r2, #10
 80082a4:	fb02 3301 	mla	r3, r2, r1, r3
 80082a8:	9307      	str	r3, [sp, #28]
 80082aa:	2200      	movs	r2, #0
 80082ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80082ae:	1c59      	adds	r1, r3, #1
 80082b0:	911b      	str	r1, [sp, #108]	; 0x6c
 80082b2:	785b      	ldrb	r3, [r3, #1]
 80082b4:	4610      	mov	r0, r2
 80082b6:	e7c9      	b.n	800824c <_strtod_l+0x1ec>
 80082b8:	4638      	mov	r0, r7
 80082ba:	e7d2      	b.n	8008262 <_strtod_l+0x202>
 80082bc:	2a08      	cmp	r2, #8
 80082be:	dc04      	bgt.n	80082ca <_strtod_l+0x26a>
 80082c0:	9e07      	ldr	r6, [sp, #28]
 80082c2:	434e      	muls	r6, r1
 80082c4:	9607      	str	r6, [sp, #28]
 80082c6:	3201      	adds	r2, #1
 80082c8:	e7e2      	b.n	8008290 <_strtod_l+0x230>
 80082ca:	f102 0c01 	add.w	ip, r2, #1
 80082ce:	f1bc 0f10 	cmp.w	ip, #16
 80082d2:	bfd8      	it	le
 80082d4:	fb01 fb0b 	mulle.w	fp, r1, fp
 80082d8:	e7f5      	b.n	80082c6 <_strtod_l+0x266>
 80082da:	2d10      	cmp	r5, #16
 80082dc:	bfdc      	itt	le
 80082de:	220a      	movle	r2, #10
 80082e0:	fb02 3b0b 	mlale	fp, r2, fp, r3
 80082e4:	e7e1      	b.n	80082aa <_strtod_l+0x24a>
 80082e6:	2300      	movs	r3, #0
 80082e8:	9305      	str	r3, [sp, #20]
 80082ea:	2201      	movs	r2, #1
 80082ec:	e77c      	b.n	80081e8 <_strtod_l+0x188>
 80082ee:	f04f 0c00 	mov.w	ip, #0
 80082f2:	f108 0302 	add.w	r3, r8, #2
 80082f6:	931b      	str	r3, [sp, #108]	; 0x6c
 80082f8:	f898 3002 	ldrb.w	r3, [r8, #2]
 80082fc:	e785      	b.n	800820a <_strtod_l+0x1aa>
 80082fe:	f04f 0c01 	mov.w	ip, #1
 8008302:	e7f6      	b.n	80082f2 <_strtod_l+0x292>
 8008304:	0800dde0 	.word	0x0800dde0
 8008308:	0800db90 	.word	0x0800db90
 800830c:	7ff00000 	.word	0x7ff00000
 8008310:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008312:	1c59      	adds	r1, r3, #1
 8008314:	911b      	str	r1, [sp, #108]	; 0x6c
 8008316:	785b      	ldrb	r3, [r3, #1]
 8008318:	2b30      	cmp	r3, #48	; 0x30
 800831a:	d0f9      	beq.n	8008310 <_strtod_l+0x2b0>
 800831c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008320:	2908      	cmp	r1, #8
 8008322:	f63f af79 	bhi.w	8008218 <_strtod_l+0x1b8>
 8008326:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800832a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800832c:	9306      	str	r3, [sp, #24]
 800832e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008330:	1c59      	adds	r1, r3, #1
 8008332:	911b      	str	r1, [sp, #108]	; 0x6c
 8008334:	785b      	ldrb	r3, [r3, #1]
 8008336:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800833a:	2e09      	cmp	r6, #9
 800833c:	d937      	bls.n	80083ae <_strtod_l+0x34e>
 800833e:	9e06      	ldr	r6, [sp, #24]
 8008340:	1b89      	subs	r1, r1, r6
 8008342:	2908      	cmp	r1, #8
 8008344:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008348:	dc02      	bgt.n	8008350 <_strtod_l+0x2f0>
 800834a:	4576      	cmp	r6, lr
 800834c:	bfa8      	it	ge
 800834e:	4676      	movge	r6, lr
 8008350:	f1bc 0f00 	cmp.w	ip, #0
 8008354:	d000      	beq.n	8008358 <_strtod_l+0x2f8>
 8008356:	4276      	negs	r6, r6
 8008358:	2d00      	cmp	r5, #0
 800835a:	d14d      	bne.n	80083f8 <_strtod_l+0x398>
 800835c:	9904      	ldr	r1, [sp, #16]
 800835e:	4301      	orrs	r1, r0
 8008360:	f47f aec2 	bne.w	80080e8 <_strtod_l+0x88>
 8008364:	2a00      	cmp	r2, #0
 8008366:	f47f aedb 	bne.w	8008120 <_strtod_l+0xc0>
 800836a:	2b69      	cmp	r3, #105	; 0x69
 800836c:	d027      	beq.n	80083be <_strtod_l+0x35e>
 800836e:	dc24      	bgt.n	80083ba <_strtod_l+0x35a>
 8008370:	2b49      	cmp	r3, #73	; 0x49
 8008372:	d024      	beq.n	80083be <_strtod_l+0x35e>
 8008374:	2b4e      	cmp	r3, #78	; 0x4e
 8008376:	f47f aed3 	bne.w	8008120 <_strtod_l+0xc0>
 800837a:	49a0      	ldr	r1, [pc, #640]	; (80085fc <_strtod_l+0x59c>)
 800837c:	a81b      	add	r0, sp, #108	; 0x6c
 800837e:	f001 fe3b 	bl	8009ff8 <__match>
 8008382:	2800      	cmp	r0, #0
 8008384:	f43f aecc 	beq.w	8008120 <_strtod_l+0xc0>
 8008388:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	2b28      	cmp	r3, #40	; 0x28
 800838e:	d12d      	bne.n	80083ec <_strtod_l+0x38c>
 8008390:	499b      	ldr	r1, [pc, #620]	; (8008600 <_strtod_l+0x5a0>)
 8008392:	aa1e      	add	r2, sp, #120	; 0x78
 8008394:	a81b      	add	r0, sp, #108	; 0x6c
 8008396:	f001 fe43 	bl	800a020 <__hexnan>
 800839a:	2805      	cmp	r0, #5
 800839c:	d126      	bne.n	80083ec <_strtod_l+0x38c>
 800839e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80083a0:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80083a4:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80083a8:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80083ac:	e69c      	b.n	80080e8 <_strtod_l+0x88>
 80083ae:	210a      	movs	r1, #10
 80083b0:	fb01 3e0e 	mla	lr, r1, lr, r3
 80083b4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80083b8:	e7b9      	b.n	800832e <_strtod_l+0x2ce>
 80083ba:	2b6e      	cmp	r3, #110	; 0x6e
 80083bc:	e7db      	b.n	8008376 <_strtod_l+0x316>
 80083be:	4991      	ldr	r1, [pc, #580]	; (8008604 <_strtod_l+0x5a4>)
 80083c0:	a81b      	add	r0, sp, #108	; 0x6c
 80083c2:	f001 fe19 	bl	8009ff8 <__match>
 80083c6:	2800      	cmp	r0, #0
 80083c8:	f43f aeaa 	beq.w	8008120 <_strtod_l+0xc0>
 80083cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083ce:	498e      	ldr	r1, [pc, #568]	; (8008608 <_strtod_l+0x5a8>)
 80083d0:	3b01      	subs	r3, #1
 80083d2:	a81b      	add	r0, sp, #108	; 0x6c
 80083d4:	931b      	str	r3, [sp, #108]	; 0x6c
 80083d6:	f001 fe0f 	bl	8009ff8 <__match>
 80083da:	b910      	cbnz	r0, 80083e2 <_strtod_l+0x382>
 80083dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083de:	3301      	adds	r3, #1
 80083e0:	931b      	str	r3, [sp, #108]	; 0x6c
 80083e2:	f8df a234 	ldr.w	sl, [pc, #564]	; 8008618 <_strtod_l+0x5b8>
 80083e6:	f04f 0900 	mov.w	r9, #0
 80083ea:	e67d      	b.n	80080e8 <_strtod_l+0x88>
 80083ec:	4887      	ldr	r0, [pc, #540]	; (800860c <_strtod_l+0x5ac>)
 80083ee:	f002 fda7 	bl	800af40 <nan>
 80083f2:	4681      	mov	r9, r0
 80083f4:	468a      	mov	sl, r1
 80083f6:	e677      	b.n	80080e8 <_strtod_l+0x88>
 80083f8:	9b05      	ldr	r3, [sp, #20]
 80083fa:	9807      	ldr	r0, [sp, #28]
 80083fc:	1af3      	subs	r3, r6, r3
 80083fe:	2f00      	cmp	r7, #0
 8008400:	bf08      	it	eq
 8008402:	462f      	moveq	r7, r5
 8008404:	2d10      	cmp	r5, #16
 8008406:	9306      	str	r3, [sp, #24]
 8008408:	462b      	mov	r3, r5
 800840a:	bfa8      	it	ge
 800840c:	2310      	movge	r3, #16
 800840e:	9304      	str	r3, [sp, #16]
 8008410:	f7f8 f878 	bl	8000504 <__aeabi_ui2d>
 8008414:	2d09      	cmp	r5, #9
 8008416:	468a      	mov	sl, r1
 8008418:	4681      	mov	r9, r0
 800841a:	dd14      	ble.n	8008446 <_strtod_l+0x3e6>
 800841c:	9a04      	ldr	r2, [sp, #16]
 800841e:	4b7c      	ldr	r3, [pc, #496]	; (8008610 <_strtod_l+0x5b0>)
 8008420:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008424:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008428:	f7f8 f8e6 	bl	80005f8 <__aeabi_dmul>
 800842c:	4680      	mov	r8, r0
 800842e:	4658      	mov	r0, fp
 8008430:	4689      	mov	r9, r1
 8008432:	f7f8 f867 	bl	8000504 <__aeabi_ui2d>
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	4640      	mov	r0, r8
 800843c:	4649      	mov	r1, r9
 800843e:	f7f7 ff25 	bl	800028c <__adddf3>
 8008442:	4681      	mov	r9, r0
 8008444:	468a      	mov	sl, r1
 8008446:	2d0f      	cmp	r5, #15
 8008448:	dc36      	bgt.n	80084b8 <_strtod_l+0x458>
 800844a:	9b06      	ldr	r3, [sp, #24]
 800844c:	2b00      	cmp	r3, #0
 800844e:	f43f ae4b 	beq.w	80080e8 <_strtod_l+0x88>
 8008452:	dd22      	ble.n	800849a <_strtod_l+0x43a>
 8008454:	2b16      	cmp	r3, #22
 8008456:	dc09      	bgt.n	800846c <_strtod_l+0x40c>
 8008458:	4d6d      	ldr	r5, [pc, #436]	; (8008610 <_strtod_l+0x5b0>)
 800845a:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800845e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008462:	464a      	mov	r2, r9
 8008464:	4653      	mov	r3, sl
 8008466:	f7f8 f8c7 	bl	80005f8 <__aeabi_dmul>
 800846a:	e7c2      	b.n	80083f2 <_strtod_l+0x392>
 800846c:	9a06      	ldr	r2, [sp, #24]
 800846e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008472:	4293      	cmp	r3, r2
 8008474:	db20      	blt.n	80084b8 <_strtod_l+0x458>
 8008476:	4c66      	ldr	r4, [pc, #408]	; (8008610 <_strtod_l+0x5b0>)
 8008478:	f1c5 050f 	rsb	r5, r5, #15
 800847c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008480:	464a      	mov	r2, r9
 8008482:	4653      	mov	r3, sl
 8008484:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008488:	f7f8 f8b6 	bl	80005f8 <__aeabi_dmul>
 800848c:	9b06      	ldr	r3, [sp, #24]
 800848e:	1b5d      	subs	r5, r3, r5
 8008490:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008494:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008498:	e7e5      	b.n	8008466 <_strtod_l+0x406>
 800849a:	9b06      	ldr	r3, [sp, #24]
 800849c:	3316      	adds	r3, #22
 800849e:	db0b      	blt.n	80084b8 <_strtod_l+0x458>
 80084a0:	9b05      	ldr	r3, [sp, #20]
 80084a2:	4a5b      	ldr	r2, [pc, #364]	; (8008610 <_strtod_l+0x5b0>)
 80084a4:	1b9e      	subs	r6, r3, r6
 80084a6:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80084aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80084ae:	4648      	mov	r0, r9
 80084b0:	4651      	mov	r1, sl
 80084b2:	f7f8 f9cb 	bl	800084c <__aeabi_ddiv>
 80084b6:	e79c      	b.n	80083f2 <_strtod_l+0x392>
 80084b8:	9b04      	ldr	r3, [sp, #16]
 80084ba:	eba5 0b03 	sub.w	fp, r5, r3
 80084be:	9b06      	ldr	r3, [sp, #24]
 80084c0:	449b      	add	fp, r3
 80084c2:	f1bb 0f00 	cmp.w	fp, #0
 80084c6:	dd74      	ble.n	80085b2 <_strtod_l+0x552>
 80084c8:	f01b 030f 	ands.w	r3, fp, #15
 80084cc:	d00a      	beq.n	80084e4 <_strtod_l+0x484>
 80084ce:	4950      	ldr	r1, [pc, #320]	; (8008610 <_strtod_l+0x5b0>)
 80084d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80084d4:	464a      	mov	r2, r9
 80084d6:	4653      	mov	r3, sl
 80084d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084dc:	f7f8 f88c 	bl	80005f8 <__aeabi_dmul>
 80084e0:	4681      	mov	r9, r0
 80084e2:	468a      	mov	sl, r1
 80084e4:	f03b 080f 	bics.w	r8, fp, #15
 80084e8:	d050      	beq.n	800858c <_strtod_l+0x52c>
 80084ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80084ee:	dd25      	ble.n	800853c <_strtod_l+0x4dc>
 80084f0:	f04f 0b00 	mov.w	fp, #0
 80084f4:	465d      	mov	r5, fp
 80084f6:	f8cd b01c 	str.w	fp, [sp, #28]
 80084fa:	f8cd b014 	str.w	fp, [sp, #20]
 80084fe:	2322      	movs	r3, #34	; 0x22
 8008500:	f8df a114 	ldr.w	sl, [pc, #276]	; 8008618 <_strtod_l+0x5b8>
 8008504:	6023      	str	r3, [r4, #0]
 8008506:	f04f 0900 	mov.w	r9, #0
 800850a:	9b07      	ldr	r3, [sp, #28]
 800850c:	2b00      	cmp	r3, #0
 800850e:	f43f adeb 	beq.w	80080e8 <_strtod_l+0x88>
 8008512:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008514:	4620      	mov	r0, r4
 8008516:	f001 fe8b 	bl	800a230 <_Bfree>
 800851a:	9905      	ldr	r1, [sp, #20]
 800851c:	4620      	mov	r0, r4
 800851e:	f001 fe87 	bl	800a230 <_Bfree>
 8008522:	4629      	mov	r1, r5
 8008524:	4620      	mov	r0, r4
 8008526:	f001 fe83 	bl	800a230 <_Bfree>
 800852a:	9907      	ldr	r1, [sp, #28]
 800852c:	4620      	mov	r0, r4
 800852e:	f001 fe7f 	bl	800a230 <_Bfree>
 8008532:	4659      	mov	r1, fp
 8008534:	4620      	mov	r0, r4
 8008536:	f001 fe7b 	bl	800a230 <_Bfree>
 800853a:	e5d5      	b.n	80080e8 <_strtod_l+0x88>
 800853c:	2300      	movs	r3, #0
 800853e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008542:	4648      	mov	r0, r9
 8008544:	4651      	mov	r1, sl
 8008546:	469b      	mov	fp, r3
 8008548:	f1b8 0f01 	cmp.w	r8, #1
 800854c:	dc21      	bgt.n	8008592 <_strtod_l+0x532>
 800854e:	b10b      	cbz	r3, 8008554 <_strtod_l+0x4f4>
 8008550:	4681      	mov	r9, r0
 8008552:	468a      	mov	sl, r1
 8008554:	492f      	ldr	r1, [pc, #188]	; (8008614 <_strtod_l+0x5b4>)
 8008556:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800855a:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800855e:	464a      	mov	r2, r9
 8008560:	4653      	mov	r3, sl
 8008562:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008566:	f7f8 f847 	bl	80005f8 <__aeabi_dmul>
 800856a:	4b2b      	ldr	r3, [pc, #172]	; (8008618 <_strtod_l+0x5b8>)
 800856c:	460a      	mov	r2, r1
 800856e:	400b      	ands	r3, r1
 8008570:	492a      	ldr	r1, [pc, #168]	; (800861c <_strtod_l+0x5bc>)
 8008572:	428b      	cmp	r3, r1
 8008574:	4681      	mov	r9, r0
 8008576:	d8bb      	bhi.n	80084f0 <_strtod_l+0x490>
 8008578:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800857c:	428b      	cmp	r3, r1
 800857e:	bf86      	itte	hi
 8008580:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8008620 <_strtod_l+0x5c0>
 8008584:	f04f 39ff 	movhi.w	r9, #4294967295
 8008588:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800858c:	2300      	movs	r3, #0
 800858e:	9304      	str	r3, [sp, #16]
 8008590:	e084      	b.n	800869c <_strtod_l+0x63c>
 8008592:	f018 0f01 	tst.w	r8, #1
 8008596:	d007      	beq.n	80085a8 <_strtod_l+0x548>
 8008598:	4b1e      	ldr	r3, [pc, #120]	; (8008614 <_strtod_l+0x5b4>)
 800859a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800859e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a2:	f7f8 f829 	bl	80005f8 <__aeabi_dmul>
 80085a6:	2301      	movs	r3, #1
 80085a8:	f10b 0b01 	add.w	fp, fp, #1
 80085ac:	ea4f 0868 	mov.w	r8, r8, asr #1
 80085b0:	e7ca      	b.n	8008548 <_strtod_l+0x4e8>
 80085b2:	d0eb      	beq.n	800858c <_strtod_l+0x52c>
 80085b4:	f1cb 0b00 	rsb	fp, fp, #0
 80085b8:	f01b 020f 	ands.w	r2, fp, #15
 80085bc:	d00a      	beq.n	80085d4 <_strtod_l+0x574>
 80085be:	4b14      	ldr	r3, [pc, #80]	; (8008610 <_strtod_l+0x5b0>)
 80085c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085c4:	4648      	mov	r0, r9
 80085c6:	4651      	mov	r1, sl
 80085c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085cc:	f7f8 f93e 	bl	800084c <__aeabi_ddiv>
 80085d0:	4681      	mov	r9, r0
 80085d2:	468a      	mov	sl, r1
 80085d4:	ea5f 1b2b 	movs.w	fp, fp, asr #4
 80085d8:	d0d8      	beq.n	800858c <_strtod_l+0x52c>
 80085da:	f1bb 0f1f 	cmp.w	fp, #31
 80085de:	dd21      	ble.n	8008624 <_strtod_l+0x5c4>
 80085e0:	f04f 0b00 	mov.w	fp, #0
 80085e4:	465d      	mov	r5, fp
 80085e6:	f8cd b01c 	str.w	fp, [sp, #28]
 80085ea:	f8cd b014 	str.w	fp, [sp, #20]
 80085ee:	2322      	movs	r3, #34	; 0x22
 80085f0:	f04f 0900 	mov.w	r9, #0
 80085f4:	f04f 0a00 	mov.w	sl, #0
 80085f8:	6023      	str	r3, [r4, #0]
 80085fa:	e786      	b.n	800850a <_strtod_l+0x4aa>
 80085fc:	0800db61 	.word	0x0800db61
 8008600:	0800dba4 	.word	0x0800dba4
 8008604:	0800db59 	.word	0x0800db59
 8008608:	0800dce4 	.word	0x0800dce4
 800860c:	0800dfa0 	.word	0x0800dfa0
 8008610:	0800de80 	.word	0x0800de80
 8008614:	0800de58 	.word	0x0800de58
 8008618:	7ff00000 	.word	0x7ff00000
 800861c:	7ca00000 	.word	0x7ca00000
 8008620:	7fefffff 	.word	0x7fefffff
 8008624:	f01b 0310 	ands.w	r3, fp, #16
 8008628:	bf18      	it	ne
 800862a:	236a      	movne	r3, #106	; 0x6a
 800862c:	f8df 83ac 	ldr.w	r8, [pc, #940]	; 80089dc <_strtod_l+0x97c>
 8008630:	9304      	str	r3, [sp, #16]
 8008632:	4648      	mov	r0, r9
 8008634:	4651      	mov	r1, sl
 8008636:	2300      	movs	r3, #0
 8008638:	f01b 0f01 	tst.w	fp, #1
 800863c:	d004      	beq.n	8008648 <_strtod_l+0x5e8>
 800863e:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008642:	f7f7 ffd9 	bl	80005f8 <__aeabi_dmul>
 8008646:	2301      	movs	r3, #1
 8008648:	ea5f 0b6b 	movs.w	fp, fp, asr #1
 800864c:	f108 0808 	add.w	r8, r8, #8
 8008650:	d1f2      	bne.n	8008638 <_strtod_l+0x5d8>
 8008652:	b10b      	cbz	r3, 8008658 <_strtod_l+0x5f8>
 8008654:	4681      	mov	r9, r0
 8008656:	468a      	mov	sl, r1
 8008658:	9b04      	ldr	r3, [sp, #16]
 800865a:	b1bb      	cbz	r3, 800868c <_strtod_l+0x62c>
 800865c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8008660:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008664:	2b00      	cmp	r3, #0
 8008666:	4651      	mov	r1, sl
 8008668:	dd10      	ble.n	800868c <_strtod_l+0x62c>
 800866a:	2b1f      	cmp	r3, #31
 800866c:	f340 8125 	ble.w	80088ba <_strtod_l+0x85a>
 8008670:	2b34      	cmp	r3, #52	; 0x34
 8008672:	bfde      	ittt	le
 8008674:	3b20      	suble	r3, #32
 8008676:	f04f 32ff 	movle.w	r2, #4294967295
 800867a:	fa02 f303 	lslle.w	r3, r2, r3
 800867e:	f04f 0900 	mov.w	r9, #0
 8008682:	bfcc      	ite	gt
 8008684:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8008688:	ea03 0a01 	andle.w	sl, r3, r1
 800868c:	2200      	movs	r2, #0
 800868e:	2300      	movs	r3, #0
 8008690:	4648      	mov	r0, r9
 8008692:	4651      	mov	r1, sl
 8008694:	f7f8 fa18 	bl	8000ac8 <__aeabi_dcmpeq>
 8008698:	2800      	cmp	r0, #0
 800869a:	d1a1      	bne.n	80085e0 <_strtod_l+0x580>
 800869c:	9b07      	ldr	r3, [sp, #28]
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	9908      	ldr	r1, [sp, #32]
 80086a2:	462b      	mov	r3, r5
 80086a4:	463a      	mov	r2, r7
 80086a6:	4620      	mov	r0, r4
 80086a8:	f001 fe2e 	bl	800a308 <__s2b>
 80086ac:	9007      	str	r0, [sp, #28]
 80086ae:	2800      	cmp	r0, #0
 80086b0:	f43f af1e 	beq.w	80084f0 <_strtod_l+0x490>
 80086b4:	9b05      	ldr	r3, [sp, #20]
 80086b6:	1b9e      	subs	r6, r3, r6
 80086b8:	9b06      	ldr	r3, [sp, #24]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	bfb4      	ite	lt
 80086be:	4633      	movlt	r3, r6
 80086c0:	2300      	movge	r3, #0
 80086c2:	930e      	str	r3, [sp, #56]	; 0x38
 80086c4:	9b06      	ldr	r3, [sp, #24]
 80086c6:	f04f 0b00 	mov.w	fp, #0
 80086ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80086ce:	9316      	str	r3, [sp, #88]	; 0x58
 80086d0:	465d      	mov	r5, fp
 80086d2:	9b07      	ldr	r3, [sp, #28]
 80086d4:	4620      	mov	r0, r4
 80086d6:	6859      	ldr	r1, [r3, #4]
 80086d8:	f001 fd6a 	bl	800a1b0 <_Balloc>
 80086dc:	9005      	str	r0, [sp, #20]
 80086de:	2800      	cmp	r0, #0
 80086e0:	f43f af0d 	beq.w	80084fe <_strtod_l+0x49e>
 80086e4:	9b07      	ldr	r3, [sp, #28]
 80086e6:	691a      	ldr	r2, [r3, #16]
 80086e8:	3202      	adds	r2, #2
 80086ea:	f103 010c 	add.w	r1, r3, #12
 80086ee:	0092      	lsls	r2, r2, #2
 80086f0:	300c      	adds	r0, #12
 80086f2:	f001 fd4f 	bl	800a194 <memcpy>
 80086f6:	ab1e      	add	r3, sp, #120	; 0x78
 80086f8:	9301      	str	r3, [sp, #4]
 80086fa:	ab1d      	add	r3, sp, #116	; 0x74
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	464a      	mov	r2, r9
 8008700:	4653      	mov	r3, sl
 8008702:	4620      	mov	r0, r4
 8008704:	e9cd 9a08 	strd	r9, sl, [sp, #32]
 8008708:	f002 f938 	bl	800a97c <__d2b>
 800870c:	901c      	str	r0, [sp, #112]	; 0x70
 800870e:	2800      	cmp	r0, #0
 8008710:	f43f aef5 	beq.w	80084fe <_strtod_l+0x49e>
 8008714:	2101      	movs	r1, #1
 8008716:	4620      	mov	r0, r4
 8008718:	f001 fe90 	bl	800a43c <__i2b>
 800871c:	4605      	mov	r5, r0
 800871e:	2800      	cmp	r0, #0
 8008720:	f43f aeed 	beq.w	80084fe <_strtod_l+0x49e>
 8008724:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008726:	9904      	ldr	r1, [sp, #16]
 8008728:	2b00      	cmp	r3, #0
 800872a:	bfab      	itete	ge
 800872c:	9a0e      	ldrge	r2, [sp, #56]	; 0x38
 800872e:	9a16      	ldrlt	r2, [sp, #88]	; 0x58
 8008730:	9e16      	ldrge	r6, [sp, #88]	; 0x58
 8008732:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8008734:	bfac      	ite	ge
 8008736:	189f      	addge	r7, r3, r2
 8008738:	1ad6      	sublt	r6, r2, r3
 800873a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800873c:	1a5b      	subs	r3, r3, r1
 800873e:	4413      	add	r3, r2
 8008740:	1e58      	subs	r0, r3, #1
 8008742:	4ba0      	ldr	r3, [pc, #640]	; (80089c4 <_strtod_l+0x964>)
 8008744:	4298      	cmp	r0, r3
 8008746:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800874a:	f280 80c4 	bge.w	80088d6 <_strtod_l+0x876>
 800874e:	1a1b      	subs	r3, r3, r0
 8008750:	2b1f      	cmp	r3, #31
 8008752:	eba2 0203 	sub.w	r2, r2, r3
 8008756:	f04f 0101 	mov.w	r1, #1
 800875a:	f300 80b5 	bgt.w	80088c8 <_strtod_l+0x868>
 800875e:	fa01 f303 	lsl.w	r3, r1, r3
 8008762:	930f      	str	r3, [sp, #60]	; 0x3c
 8008764:	2300      	movs	r3, #0
 8008766:	930a      	str	r3, [sp, #40]	; 0x28
 8008768:	eb07 0802 	add.w	r8, r7, r2
 800876c:	9b04      	ldr	r3, [sp, #16]
 800876e:	4547      	cmp	r7, r8
 8008770:	4416      	add	r6, r2
 8008772:	441e      	add	r6, r3
 8008774:	463b      	mov	r3, r7
 8008776:	bfa8      	it	ge
 8008778:	4643      	movge	r3, r8
 800877a:	42b3      	cmp	r3, r6
 800877c:	bfa8      	it	ge
 800877e:	4633      	movge	r3, r6
 8008780:	2b00      	cmp	r3, #0
 8008782:	bfc2      	ittt	gt
 8008784:	eba8 0803 	subgt.w	r8, r8, r3
 8008788:	1af6      	subgt	r6, r6, r3
 800878a:	1aff      	subgt	r7, r7, r3
 800878c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800878e:	2b00      	cmp	r3, #0
 8008790:	dd17      	ble.n	80087c2 <_strtod_l+0x762>
 8008792:	4629      	mov	r1, r5
 8008794:	461a      	mov	r2, r3
 8008796:	4620      	mov	r0, r4
 8008798:	f001 ff0c 	bl	800a5b4 <__pow5mult>
 800879c:	4605      	mov	r5, r0
 800879e:	2800      	cmp	r0, #0
 80087a0:	f43f aead 	beq.w	80084fe <_strtod_l+0x49e>
 80087a4:	4601      	mov	r1, r0
 80087a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80087a8:	4620      	mov	r0, r4
 80087aa:	f001 fe5d 	bl	800a468 <__multiply>
 80087ae:	900d      	str	r0, [sp, #52]	; 0x34
 80087b0:	2800      	cmp	r0, #0
 80087b2:	f43f aea4 	beq.w	80084fe <_strtod_l+0x49e>
 80087b6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80087b8:	4620      	mov	r0, r4
 80087ba:	f001 fd39 	bl	800a230 <_Bfree>
 80087be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087c0:	931c      	str	r3, [sp, #112]	; 0x70
 80087c2:	f1b8 0f00 	cmp.w	r8, #0
 80087c6:	f300 808b 	bgt.w	80088e0 <_strtod_l+0x880>
 80087ca:	9b06      	ldr	r3, [sp, #24]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	dd08      	ble.n	80087e2 <_strtod_l+0x782>
 80087d0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80087d2:	9905      	ldr	r1, [sp, #20]
 80087d4:	4620      	mov	r0, r4
 80087d6:	f001 feed 	bl	800a5b4 <__pow5mult>
 80087da:	9005      	str	r0, [sp, #20]
 80087dc:	2800      	cmp	r0, #0
 80087de:	f43f ae8e 	beq.w	80084fe <_strtod_l+0x49e>
 80087e2:	2e00      	cmp	r6, #0
 80087e4:	dd08      	ble.n	80087f8 <_strtod_l+0x798>
 80087e6:	9905      	ldr	r1, [sp, #20]
 80087e8:	4632      	mov	r2, r6
 80087ea:	4620      	mov	r0, r4
 80087ec:	f001 ff3c 	bl	800a668 <__lshift>
 80087f0:	9005      	str	r0, [sp, #20]
 80087f2:	2800      	cmp	r0, #0
 80087f4:	f43f ae83 	beq.w	80084fe <_strtod_l+0x49e>
 80087f8:	2f00      	cmp	r7, #0
 80087fa:	dd08      	ble.n	800880e <_strtod_l+0x7ae>
 80087fc:	4629      	mov	r1, r5
 80087fe:	463a      	mov	r2, r7
 8008800:	4620      	mov	r0, r4
 8008802:	f001 ff31 	bl	800a668 <__lshift>
 8008806:	4605      	mov	r5, r0
 8008808:	2800      	cmp	r0, #0
 800880a:	f43f ae78 	beq.w	80084fe <_strtod_l+0x49e>
 800880e:	9a05      	ldr	r2, [sp, #20]
 8008810:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008812:	4620      	mov	r0, r4
 8008814:	f001 ffb0 	bl	800a778 <__mdiff>
 8008818:	4683      	mov	fp, r0
 800881a:	2800      	cmp	r0, #0
 800881c:	f43f ae6f 	beq.w	80084fe <_strtod_l+0x49e>
 8008820:	68c3      	ldr	r3, [r0, #12]
 8008822:	930d      	str	r3, [sp, #52]	; 0x34
 8008824:	2300      	movs	r3, #0
 8008826:	60c3      	str	r3, [r0, #12]
 8008828:	4629      	mov	r1, r5
 800882a:	f001 ff89 	bl	800a740 <__mcmp>
 800882e:	2800      	cmp	r0, #0
 8008830:	da60      	bge.n	80088f4 <_strtod_l+0x894>
 8008832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008834:	ea53 0309 	orrs.w	r3, r3, r9
 8008838:	f040 8084 	bne.w	8008944 <_strtod_l+0x8e4>
 800883c:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8008840:	2b00      	cmp	r3, #0
 8008842:	d17f      	bne.n	8008944 <_strtod_l+0x8e4>
 8008844:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008848:	0d1b      	lsrs	r3, r3, #20
 800884a:	051b      	lsls	r3, r3, #20
 800884c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008850:	d978      	bls.n	8008944 <_strtod_l+0x8e4>
 8008852:	f8db 3014 	ldr.w	r3, [fp, #20]
 8008856:	b91b      	cbnz	r3, 8008860 <_strtod_l+0x800>
 8008858:	f8db 3010 	ldr.w	r3, [fp, #16]
 800885c:	2b01      	cmp	r3, #1
 800885e:	dd71      	ble.n	8008944 <_strtod_l+0x8e4>
 8008860:	4659      	mov	r1, fp
 8008862:	2201      	movs	r2, #1
 8008864:	4620      	mov	r0, r4
 8008866:	f001 feff 	bl	800a668 <__lshift>
 800886a:	4629      	mov	r1, r5
 800886c:	4683      	mov	fp, r0
 800886e:	f001 ff67 	bl	800a740 <__mcmp>
 8008872:	2800      	cmp	r0, #0
 8008874:	dd66      	ble.n	8008944 <_strtod_l+0x8e4>
 8008876:	9904      	ldr	r1, [sp, #16]
 8008878:	4a53      	ldr	r2, [pc, #332]	; (80089c8 <_strtod_l+0x968>)
 800887a:	4653      	mov	r3, sl
 800887c:	2900      	cmp	r1, #0
 800887e:	f000 8082 	beq.w	8008986 <_strtod_l+0x926>
 8008882:	ea02 010a 	and.w	r1, r2, sl
 8008886:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800888a:	dc7c      	bgt.n	8008986 <_strtod_l+0x926>
 800888c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008890:	f77f aead 	ble.w	80085ee <_strtod_l+0x58e>
 8008894:	4a4d      	ldr	r2, [pc, #308]	; (80089cc <_strtod_l+0x96c>)
 8008896:	2300      	movs	r3, #0
 8008898:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800889c:	4648      	mov	r0, r9
 800889e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80088a2:	4651      	mov	r1, sl
 80088a4:	f7f7 fea8 	bl	80005f8 <__aeabi_dmul>
 80088a8:	460b      	mov	r3, r1
 80088aa:	4303      	orrs	r3, r0
 80088ac:	bf08      	it	eq
 80088ae:	2322      	moveq	r3, #34	; 0x22
 80088b0:	4681      	mov	r9, r0
 80088b2:	468a      	mov	sl, r1
 80088b4:	bf08      	it	eq
 80088b6:	6023      	streq	r3, [r4, #0]
 80088b8:	e62b      	b.n	8008512 <_strtod_l+0x4b2>
 80088ba:	f04f 32ff 	mov.w	r2, #4294967295
 80088be:	fa02 f303 	lsl.w	r3, r2, r3
 80088c2:	ea03 0909 	and.w	r9, r3, r9
 80088c6:	e6e1      	b.n	800868c <_strtod_l+0x62c>
 80088c8:	4b41      	ldr	r3, [pc, #260]	; (80089d0 <_strtod_l+0x970>)
 80088ca:	910f      	str	r1, [sp, #60]	; 0x3c
 80088cc:	1a1b      	subs	r3, r3, r0
 80088ce:	fa01 f303 	lsl.w	r3, r1, r3
 80088d2:	930a      	str	r3, [sp, #40]	; 0x28
 80088d4:	e748      	b.n	8008768 <_strtod_l+0x708>
 80088d6:	2300      	movs	r3, #0
 80088d8:	930a      	str	r3, [sp, #40]	; 0x28
 80088da:	2301      	movs	r3, #1
 80088dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80088de:	e743      	b.n	8008768 <_strtod_l+0x708>
 80088e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80088e2:	4642      	mov	r2, r8
 80088e4:	4620      	mov	r0, r4
 80088e6:	f001 febf 	bl	800a668 <__lshift>
 80088ea:	901c      	str	r0, [sp, #112]	; 0x70
 80088ec:	2800      	cmp	r0, #0
 80088ee:	f47f af6c 	bne.w	80087ca <_strtod_l+0x76a>
 80088f2:	e604      	b.n	80084fe <_strtod_l+0x49e>
 80088f4:	46d0      	mov	r8, sl
 80088f6:	d173      	bne.n	80089e0 <_strtod_l+0x980>
 80088f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088fa:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80088fe:	b352      	cbz	r2, 8008956 <_strtod_l+0x8f6>
 8008900:	4a34      	ldr	r2, [pc, #208]	; (80089d4 <_strtod_l+0x974>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d12a      	bne.n	800895c <_strtod_l+0x8fc>
 8008906:	9b04      	ldr	r3, [sp, #16]
 8008908:	4648      	mov	r0, r9
 800890a:	b1fb      	cbz	r3, 800894c <_strtod_l+0x8ec>
 800890c:	4a2e      	ldr	r2, [pc, #184]	; (80089c8 <_strtod_l+0x968>)
 800890e:	ea0a 0202 	and.w	r2, sl, r2
 8008912:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008916:	f04f 31ff 	mov.w	r1, #4294967295
 800891a:	d81a      	bhi.n	8008952 <_strtod_l+0x8f2>
 800891c:	0d12      	lsrs	r2, r2, #20
 800891e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008922:	fa01 f303 	lsl.w	r3, r1, r3
 8008926:	4298      	cmp	r0, r3
 8008928:	d118      	bne.n	800895c <_strtod_l+0x8fc>
 800892a:	4b2b      	ldr	r3, [pc, #172]	; (80089d8 <_strtod_l+0x978>)
 800892c:	4598      	cmp	r8, r3
 800892e:	d102      	bne.n	8008936 <_strtod_l+0x8d6>
 8008930:	3001      	adds	r0, #1
 8008932:	f43f ade4 	beq.w	80084fe <_strtod_l+0x49e>
 8008936:	4b24      	ldr	r3, [pc, #144]	; (80089c8 <_strtod_l+0x968>)
 8008938:	ea08 0303 	and.w	r3, r8, r3
 800893c:	f503 1a80 	add.w	sl, r3, #1048576	; 0x100000
 8008940:	f04f 0900 	mov.w	r9, #0
 8008944:	9b04      	ldr	r3, [sp, #16]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1a4      	bne.n	8008894 <_strtod_l+0x834>
 800894a:	e5e2      	b.n	8008512 <_strtod_l+0x4b2>
 800894c:	f04f 33ff 	mov.w	r3, #4294967295
 8008950:	e7e9      	b.n	8008926 <_strtod_l+0x8c6>
 8008952:	460b      	mov	r3, r1
 8008954:	e7e7      	b.n	8008926 <_strtod_l+0x8c6>
 8008956:	ea53 0309 	orrs.w	r3, r3, r9
 800895a:	d08c      	beq.n	8008876 <_strtod_l+0x816>
 800895c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800895e:	b1e3      	cbz	r3, 800899a <_strtod_l+0x93a>
 8008960:	ea13 0f08 	tst.w	r3, r8
 8008964:	d0ee      	beq.n	8008944 <_strtod_l+0x8e4>
 8008966:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008968:	9a04      	ldr	r2, [sp, #16]
 800896a:	4648      	mov	r0, r9
 800896c:	4651      	mov	r1, sl
 800896e:	b1c3      	cbz	r3, 80089a2 <_strtod_l+0x942>
 8008970:	f7ff fb52 	bl	8008018 <sulp>
 8008974:	4602      	mov	r2, r0
 8008976:	460b      	mov	r3, r1
 8008978:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800897c:	f7f7 fc86 	bl	800028c <__adddf3>
 8008980:	4681      	mov	r9, r0
 8008982:	468a      	mov	sl, r1
 8008984:	e7de      	b.n	8008944 <_strtod_l+0x8e4>
 8008986:	4013      	ands	r3, r2
 8008988:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800898c:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8008990:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8008994:	f04f 39ff 	mov.w	r9, #4294967295
 8008998:	e7d4      	b.n	8008944 <_strtod_l+0x8e4>
 800899a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800899c:	ea13 0f09 	tst.w	r3, r9
 80089a0:	e7e0      	b.n	8008964 <_strtod_l+0x904>
 80089a2:	f7ff fb39 	bl	8008018 <sulp>
 80089a6:	4602      	mov	r2, r0
 80089a8:	460b      	mov	r3, r1
 80089aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80089ae:	f7f7 fc6b 	bl	8000288 <__aeabi_dsub>
 80089b2:	2200      	movs	r2, #0
 80089b4:	2300      	movs	r3, #0
 80089b6:	468a      	mov	sl, r1
 80089b8:	4681      	mov	r9, r0
 80089ba:	f7f8 f885 	bl	8000ac8 <__aeabi_dcmpeq>
 80089be:	2800      	cmp	r0, #0
 80089c0:	d0c0      	beq.n	8008944 <_strtod_l+0x8e4>
 80089c2:	e614      	b.n	80085ee <_strtod_l+0x58e>
 80089c4:	fffffc02 	.word	0xfffffc02
 80089c8:	7ff00000 	.word	0x7ff00000
 80089cc:	39500000 	.word	0x39500000
 80089d0:	fffffbe2 	.word	0xfffffbe2
 80089d4:	000fffff 	.word	0x000fffff
 80089d8:	7fefffff 	.word	0x7fefffff
 80089dc:	0800dbb8 	.word	0x0800dbb8
 80089e0:	4629      	mov	r1, r5
 80089e2:	4658      	mov	r0, fp
 80089e4:	f002 f824 	bl	800aa30 <__ratio>
 80089e8:	2200      	movs	r2, #0
 80089ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80089ee:	4606      	mov	r6, r0
 80089f0:	460f      	mov	r7, r1
 80089f2:	f7f8 f87d 	bl	8000af0 <__aeabi_dcmple>
 80089f6:	2800      	cmp	r0, #0
 80089f8:	d07b      	beq.n	8008af2 <_strtod_l+0xa92>
 80089fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d04d      	beq.n	8008a9c <_strtod_l+0xa3c>
 8008a00:	4b93      	ldr	r3, [pc, #588]	; (8008c50 <_strtod_l+0xbf0>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008a08:	4f91      	ldr	r7, [pc, #580]	; (8008c50 <_strtod_l+0xbf0>)
 8008a0a:	2600      	movs	r6, #0
 8008a0c:	4b91      	ldr	r3, [pc, #580]	; (8008c54 <_strtod_l+0xbf4>)
 8008a0e:	ea08 0303 	and.w	r3, r8, r3
 8008a12:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a16:	4b90      	ldr	r3, [pc, #576]	; (8008c58 <_strtod_l+0xbf8>)
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	f040 80b2 	bne.w	8008b82 <_strtod_l+0xb22>
 8008a1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008a22:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8008a26:	f1a8 7a54 	sub.w	sl, r8, #55574528	; 0x3500000
 8008a2a:	4648      	mov	r0, r9
 8008a2c:	4651      	mov	r1, sl
 8008a2e:	eeb0 8a47 	vmov.f32	s16, s14
 8008a32:	eef0 8a67 	vmov.f32	s17, s15
 8008a36:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008a3a:	f001 ff25 	bl	800a888 <__ulp>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	460b      	mov	r3, r1
 8008a42:	ec51 0b18 	vmov	r0, r1, d8
 8008a46:	f7f7 fdd7 	bl	80005f8 <__aeabi_dmul>
 8008a4a:	464a      	mov	r2, r9
 8008a4c:	4653      	mov	r3, sl
 8008a4e:	f7f7 fc1d 	bl	800028c <__adddf3>
 8008a52:	460b      	mov	r3, r1
 8008a54:	497f      	ldr	r1, [pc, #508]	; (8008c54 <_strtod_l+0xbf4>)
 8008a56:	4a81      	ldr	r2, [pc, #516]	; (8008c5c <_strtod_l+0xbfc>)
 8008a58:	4019      	ands	r1, r3
 8008a5a:	4291      	cmp	r1, r2
 8008a5c:	4681      	mov	r9, r0
 8008a5e:	d95c      	bls.n	8008b1a <_strtod_l+0xaba>
 8008a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a62:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d103      	bne.n	8008a72 <_strtod_l+0xa12>
 8008a6a:	9b08      	ldr	r3, [sp, #32]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	f43f ad46 	beq.w	80084fe <_strtod_l+0x49e>
 8008a72:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 8008c68 <_strtod_l+0xc08>
 8008a76:	f04f 39ff 	mov.w	r9, #4294967295
 8008a7a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f001 fbd7 	bl	800a230 <_Bfree>
 8008a82:	9905      	ldr	r1, [sp, #20]
 8008a84:	4620      	mov	r0, r4
 8008a86:	f001 fbd3 	bl	800a230 <_Bfree>
 8008a8a:	4629      	mov	r1, r5
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	f001 fbcf 	bl	800a230 <_Bfree>
 8008a92:	4659      	mov	r1, fp
 8008a94:	4620      	mov	r0, r4
 8008a96:	f001 fbcb 	bl	800a230 <_Bfree>
 8008a9a:	e61a      	b.n	80086d2 <_strtod_l+0x672>
 8008a9c:	f1b9 0f00 	cmp.w	r9, #0
 8008aa0:	d11a      	bne.n	8008ad8 <_strtod_l+0xa78>
 8008aa2:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8008aa6:	b9f3      	cbnz	r3, 8008ae6 <_strtod_l+0xa86>
 8008aa8:	4b69      	ldr	r3, [pc, #420]	; (8008c50 <_strtod_l+0xbf0>)
 8008aaa:	2200      	movs	r2, #0
 8008aac:	4630      	mov	r0, r6
 8008aae:	4639      	mov	r1, r7
 8008ab0:	f7f8 f814 	bl	8000adc <__aeabi_dcmplt>
 8008ab4:	b9d0      	cbnz	r0, 8008aec <_strtod_l+0xa8c>
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	4639      	mov	r1, r7
 8008aba:	4b69      	ldr	r3, [pc, #420]	; (8008c60 <_strtod_l+0xc00>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	f7f7 fd9b 	bl	80005f8 <__aeabi_dmul>
 8008ac2:	4606      	mov	r6, r0
 8008ac4:	460f      	mov	r7, r1
 8008ac6:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008aca:	9618      	str	r6, [sp, #96]	; 0x60
 8008acc:	9319      	str	r3, [sp, #100]	; 0x64
 8008ace:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8008ad2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008ad6:	e799      	b.n	8008a0c <_strtod_l+0x9ac>
 8008ad8:	f1b9 0f01 	cmp.w	r9, #1
 8008adc:	d103      	bne.n	8008ae6 <_strtod_l+0xa86>
 8008ade:	f1ba 0f00 	cmp.w	sl, #0
 8008ae2:	f43f ad84 	beq.w	80085ee <_strtod_l+0x58e>
 8008ae6:	4b5f      	ldr	r3, [pc, #380]	; (8008c64 <_strtod_l+0xc04>)
 8008ae8:	2200      	movs	r2, #0
 8008aea:	e78b      	b.n	8008a04 <_strtod_l+0x9a4>
 8008aec:	4f5c      	ldr	r7, [pc, #368]	; (8008c60 <_strtod_l+0xc00>)
 8008aee:	2600      	movs	r6, #0
 8008af0:	e7e9      	b.n	8008ac6 <_strtod_l+0xa66>
 8008af2:	4b5b      	ldr	r3, [pc, #364]	; (8008c60 <_strtod_l+0xc00>)
 8008af4:	4630      	mov	r0, r6
 8008af6:	4639      	mov	r1, r7
 8008af8:	2200      	movs	r2, #0
 8008afa:	f7f7 fd7d 	bl	80005f8 <__aeabi_dmul>
 8008afe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b00:	4606      	mov	r6, r0
 8008b02:	460f      	mov	r7, r1
 8008b04:	b933      	cbnz	r3, 8008b14 <_strtod_l+0xab4>
 8008b06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b0a:	9010      	str	r0, [sp, #64]	; 0x40
 8008b0c:	9311      	str	r3, [sp, #68]	; 0x44
 8008b0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b12:	e7de      	b.n	8008ad2 <_strtod_l+0xa72>
 8008b14:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008b18:	e7f9      	b.n	8008b0e <_strtod_l+0xaae>
 8008b1a:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8008b1e:	9b04      	ldr	r3, [sp, #16]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d1aa      	bne.n	8008a7a <_strtod_l+0xa1a>
 8008b24:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008b28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b2a:	0d1b      	lsrs	r3, r3, #20
 8008b2c:	051b      	lsls	r3, r3, #20
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d1a3      	bne.n	8008a7a <_strtod_l+0xa1a>
 8008b32:	4630      	mov	r0, r6
 8008b34:	4639      	mov	r1, r7
 8008b36:	f7f8 f8a7 	bl	8000c88 <__aeabi_d2lz>
 8008b3a:	f7f7 fd2f 	bl	800059c <__aeabi_l2d>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	460b      	mov	r3, r1
 8008b42:	4630      	mov	r0, r6
 8008b44:	4639      	mov	r1, r7
 8008b46:	f7f7 fb9f 	bl	8000288 <__aeabi_dsub>
 8008b4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b4c:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8008b50:	ea43 0309 	orr.w	r3, r3, r9
 8008b54:	4313      	orrs	r3, r2
 8008b56:	4606      	mov	r6, r0
 8008b58:	460f      	mov	r7, r1
 8008b5a:	d051      	beq.n	8008c00 <_strtod_l+0xba0>
 8008b5c:	a334      	add	r3, pc, #208	; (adr r3, 8008c30 <_strtod_l+0xbd0>)
 8008b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b62:	f7f7 ffbb 	bl	8000adc <__aeabi_dcmplt>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	f47f acd3 	bne.w	8008512 <_strtod_l+0x4b2>
 8008b6c:	a332      	add	r3, pc, #200	; (adr r3, 8008c38 <_strtod_l+0xbd8>)
 8008b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b72:	4630      	mov	r0, r6
 8008b74:	4639      	mov	r1, r7
 8008b76:	f7f7 ffcf 	bl	8000b18 <__aeabi_dcmpgt>
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	f43f af7d 	beq.w	8008a7a <_strtod_l+0xa1a>
 8008b80:	e4c7      	b.n	8008512 <_strtod_l+0x4b2>
 8008b82:	9b04      	ldr	r3, [sp, #16]
 8008b84:	b333      	cbz	r3, 8008bd4 <_strtod_l+0xb74>
 8008b86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b88:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008b8c:	d822      	bhi.n	8008bd4 <_strtod_l+0xb74>
 8008b8e:	a32c      	add	r3, pc, #176	; (adr r3, 8008c40 <_strtod_l+0xbe0>)
 8008b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b94:	4630      	mov	r0, r6
 8008b96:	4639      	mov	r1, r7
 8008b98:	f7f7 ffaa 	bl	8000af0 <__aeabi_dcmple>
 8008b9c:	b1a0      	cbz	r0, 8008bc8 <_strtod_l+0xb68>
 8008b9e:	4639      	mov	r1, r7
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	f7f8 f801 	bl	8000ba8 <__aeabi_d2uiz>
 8008ba6:	2801      	cmp	r0, #1
 8008ba8:	bf38      	it	cc
 8008baa:	2001      	movcc	r0, #1
 8008bac:	f7f7 fcaa 	bl	8000504 <__aeabi_ui2d>
 8008bb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bb2:	4606      	mov	r6, r0
 8008bb4:	460f      	mov	r7, r1
 8008bb6:	bb03      	cbnz	r3, 8008bfa <_strtod_l+0xb9a>
 8008bb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bbc:	9012      	str	r0, [sp, #72]	; 0x48
 8008bbe:	9313      	str	r3, [sp, #76]	; 0x4c
 8008bc0:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008bc4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008bc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008bcc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008bd0:	1a9b      	subs	r3, r3, r2
 8008bd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bd4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008bd8:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 8008bdc:	f001 fe54 	bl	800a888 <__ulp>
 8008be0:	4602      	mov	r2, r0
 8008be2:	460b      	mov	r3, r1
 8008be4:	4640      	mov	r0, r8
 8008be6:	4649      	mov	r1, r9
 8008be8:	f7f7 fd06 	bl	80005f8 <__aeabi_dmul>
 8008bec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008bf0:	f7f7 fb4c 	bl	800028c <__adddf3>
 8008bf4:	4681      	mov	r9, r0
 8008bf6:	468a      	mov	sl, r1
 8008bf8:	e791      	b.n	8008b1e <_strtod_l+0xabe>
 8008bfa:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8008bfe:	e7df      	b.n	8008bc0 <_strtod_l+0xb60>
 8008c00:	a311      	add	r3, pc, #68	; (adr r3, 8008c48 <_strtod_l+0xbe8>)
 8008c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c06:	f7f7 ff69 	bl	8000adc <__aeabi_dcmplt>
 8008c0a:	e7b6      	b.n	8008b7a <_strtod_l+0xb1a>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	930c      	str	r3, [sp, #48]	; 0x30
 8008c10:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c14:	6013      	str	r3, [r2, #0]
 8008c16:	f7ff ba6b 	b.w	80080f0 <_strtod_l+0x90>
 8008c1a:	2b65      	cmp	r3, #101	; 0x65
 8008c1c:	f43f ab63 	beq.w	80082e6 <_strtod_l+0x286>
 8008c20:	2b45      	cmp	r3, #69	; 0x45
 8008c22:	f43f ab60 	beq.w	80082e6 <_strtod_l+0x286>
 8008c26:	2201      	movs	r2, #1
 8008c28:	f7ff bb98 	b.w	800835c <_strtod_l+0x2fc>
 8008c2c:	f3af 8000 	nop.w
 8008c30:	94a03595 	.word	0x94a03595
 8008c34:	3fdfffff 	.word	0x3fdfffff
 8008c38:	35afe535 	.word	0x35afe535
 8008c3c:	3fe00000 	.word	0x3fe00000
 8008c40:	ffc00000 	.word	0xffc00000
 8008c44:	41dfffff 	.word	0x41dfffff
 8008c48:	94a03595 	.word	0x94a03595
 8008c4c:	3fcfffff 	.word	0x3fcfffff
 8008c50:	3ff00000 	.word	0x3ff00000
 8008c54:	7ff00000 	.word	0x7ff00000
 8008c58:	7fe00000 	.word	0x7fe00000
 8008c5c:	7c9fffff 	.word	0x7c9fffff
 8008c60:	3fe00000 	.word	0x3fe00000
 8008c64:	bff00000 	.word	0xbff00000
 8008c68:	7fefffff 	.word	0x7fefffff

08008c6c <_strtod_r>:
 8008c6c:	4b01      	ldr	r3, [pc, #4]	; (8008c74 <_strtod_r+0x8>)
 8008c6e:	f7ff b9f7 	b.w	8008060 <_strtod_l>
 8008c72:	bf00      	nop
 8008c74:	20000124 	.word	0x20000124

08008c78 <_strtol_l.isra.0>:
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c7e:	d001      	beq.n	8008c84 <_strtol_l.isra.0+0xc>
 8008c80:	2b24      	cmp	r3, #36	; 0x24
 8008c82:	d906      	bls.n	8008c92 <_strtol_l.isra.0+0x1a>
 8008c84:	f7fe faf6 	bl	8007274 <__errno>
 8008c88:	2316      	movs	r3, #22
 8008c8a:	6003      	str	r3, [r0, #0]
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c92:	4f3a      	ldr	r7, [pc, #232]	; (8008d7c <_strtol_l.isra.0+0x104>)
 8008c94:	468e      	mov	lr, r1
 8008c96:	4676      	mov	r6, lr
 8008c98:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008c9c:	5de5      	ldrb	r5, [r4, r7]
 8008c9e:	f015 0508 	ands.w	r5, r5, #8
 8008ca2:	d1f8      	bne.n	8008c96 <_strtol_l.isra.0+0x1e>
 8008ca4:	2c2d      	cmp	r4, #45	; 0x2d
 8008ca6:	d134      	bne.n	8008d12 <_strtol_l.isra.0+0x9a>
 8008ca8:	f89e 4000 	ldrb.w	r4, [lr]
 8008cac:	f04f 0801 	mov.w	r8, #1
 8008cb0:	f106 0e02 	add.w	lr, r6, #2
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d05c      	beq.n	8008d72 <_strtol_l.isra.0+0xfa>
 8008cb8:	2b10      	cmp	r3, #16
 8008cba:	d10c      	bne.n	8008cd6 <_strtol_l.isra.0+0x5e>
 8008cbc:	2c30      	cmp	r4, #48	; 0x30
 8008cbe:	d10a      	bne.n	8008cd6 <_strtol_l.isra.0+0x5e>
 8008cc0:	f89e 4000 	ldrb.w	r4, [lr]
 8008cc4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008cc8:	2c58      	cmp	r4, #88	; 0x58
 8008cca:	d14d      	bne.n	8008d68 <_strtol_l.isra.0+0xf0>
 8008ccc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008cd0:	2310      	movs	r3, #16
 8008cd2:	f10e 0e02 	add.w	lr, lr, #2
 8008cd6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008cda:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008cde:	2600      	movs	r6, #0
 8008ce0:	fbbc f9f3 	udiv	r9, ip, r3
 8008ce4:	4635      	mov	r5, r6
 8008ce6:	fb03 ca19 	mls	sl, r3, r9, ip
 8008cea:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008cee:	2f09      	cmp	r7, #9
 8008cf0:	d818      	bhi.n	8008d24 <_strtol_l.isra.0+0xac>
 8008cf2:	463c      	mov	r4, r7
 8008cf4:	42a3      	cmp	r3, r4
 8008cf6:	dd24      	ble.n	8008d42 <_strtol_l.isra.0+0xca>
 8008cf8:	2e00      	cmp	r6, #0
 8008cfa:	db1f      	blt.n	8008d3c <_strtol_l.isra.0+0xc4>
 8008cfc:	45a9      	cmp	r9, r5
 8008cfe:	d31d      	bcc.n	8008d3c <_strtol_l.isra.0+0xc4>
 8008d00:	d101      	bne.n	8008d06 <_strtol_l.isra.0+0x8e>
 8008d02:	45a2      	cmp	sl, r4
 8008d04:	db1a      	blt.n	8008d3c <_strtol_l.isra.0+0xc4>
 8008d06:	fb05 4503 	mla	r5, r5, r3, r4
 8008d0a:	2601      	movs	r6, #1
 8008d0c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008d10:	e7eb      	b.n	8008cea <_strtol_l.isra.0+0x72>
 8008d12:	2c2b      	cmp	r4, #43	; 0x2b
 8008d14:	bf08      	it	eq
 8008d16:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008d1a:	46a8      	mov	r8, r5
 8008d1c:	bf08      	it	eq
 8008d1e:	f106 0e02 	addeq.w	lr, r6, #2
 8008d22:	e7c7      	b.n	8008cb4 <_strtol_l.isra.0+0x3c>
 8008d24:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008d28:	2f19      	cmp	r7, #25
 8008d2a:	d801      	bhi.n	8008d30 <_strtol_l.isra.0+0xb8>
 8008d2c:	3c37      	subs	r4, #55	; 0x37
 8008d2e:	e7e1      	b.n	8008cf4 <_strtol_l.isra.0+0x7c>
 8008d30:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008d34:	2f19      	cmp	r7, #25
 8008d36:	d804      	bhi.n	8008d42 <_strtol_l.isra.0+0xca>
 8008d38:	3c57      	subs	r4, #87	; 0x57
 8008d3a:	e7db      	b.n	8008cf4 <_strtol_l.isra.0+0x7c>
 8008d3c:	f04f 36ff 	mov.w	r6, #4294967295
 8008d40:	e7e4      	b.n	8008d0c <_strtol_l.isra.0+0x94>
 8008d42:	2e00      	cmp	r6, #0
 8008d44:	da05      	bge.n	8008d52 <_strtol_l.isra.0+0xda>
 8008d46:	2322      	movs	r3, #34	; 0x22
 8008d48:	6003      	str	r3, [r0, #0]
 8008d4a:	4665      	mov	r5, ip
 8008d4c:	b942      	cbnz	r2, 8008d60 <_strtol_l.isra.0+0xe8>
 8008d4e:	4628      	mov	r0, r5
 8008d50:	e79d      	b.n	8008c8e <_strtol_l.isra.0+0x16>
 8008d52:	f1b8 0f00 	cmp.w	r8, #0
 8008d56:	d000      	beq.n	8008d5a <_strtol_l.isra.0+0xe2>
 8008d58:	426d      	negs	r5, r5
 8008d5a:	2a00      	cmp	r2, #0
 8008d5c:	d0f7      	beq.n	8008d4e <_strtol_l.isra.0+0xd6>
 8008d5e:	b10e      	cbz	r6, 8008d64 <_strtol_l.isra.0+0xec>
 8008d60:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008d64:	6011      	str	r1, [r2, #0]
 8008d66:	e7f2      	b.n	8008d4e <_strtol_l.isra.0+0xd6>
 8008d68:	2430      	movs	r4, #48	; 0x30
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1b3      	bne.n	8008cd6 <_strtol_l.isra.0+0x5e>
 8008d6e:	2308      	movs	r3, #8
 8008d70:	e7b1      	b.n	8008cd6 <_strtol_l.isra.0+0x5e>
 8008d72:	2c30      	cmp	r4, #48	; 0x30
 8008d74:	d0a4      	beq.n	8008cc0 <_strtol_l.isra.0+0x48>
 8008d76:	230a      	movs	r3, #10
 8008d78:	e7ad      	b.n	8008cd6 <_strtol_l.isra.0+0x5e>
 8008d7a:	bf00      	nop
 8008d7c:	0800dbe1 	.word	0x0800dbe1

08008d80 <_strtol_r>:
 8008d80:	f7ff bf7a 	b.w	8008c78 <_strtol_l.isra.0>

08008d84 <quorem>:
 8008d84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d88:	6903      	ldr	r3, [r0, #16]
 8008d8a:	690c      	ldr	r4, [r1, #16]
 8008d8c:	42a3      	cmp	r3, r4
 8008d8e:	4607      	mov	r7, r0
 8008d90:	f2c0 8081 	blt.w	8008e96 <quorem+0x112>
 8008d94:	3c01      	subs	r4, #1
 8008d96:	f101 0814 	add.w	r8, r1, #20
 8008d9a:	f100 0514 	add.w	r5, r0, #20
 8008d9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008da2:	9301      	str	r3, [sp, #4]
 8008da4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008da8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008dac:	3301      	adds	r3, #1
 8008dae:	429a      	cmp	r2, r3
 8008db0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008db4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008db8:	fbb2 f6f3 	udiv	r6, r2, r3
 8008dbc:	d331      	bcc.n	8008e22 <quorem+0x9e>
 8008dbe:	f04f 0e00 	mov.w	lr, #0
 8008dc2:	4640      	mov	r0, r8
 8008dc4:	46ac      	mov	ip, r5
 8008dc6:	46f2      	mov	sl, lr
 8008dc8:	f850 2b04 	ldr.w	r2, [r0], #4
 8008dcc:	b293      	uxth	r3, r2
 8008dce:	fb06 e303 	mla	r3, r6, r3, lr
 8008dd2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	ebaa 0303 	sub.w	r3, sl, r3
 8008ddc:	0c12      	lsrs	r2, r2, #16
 8008dde:	f8dc a000 	ldr.w	sl, [ip]
 8008de2:	fb06 e202 	mla	r2, r6, r2, lr
 8008de6:	fa13 f38a 	uxtah	r3, r3, sl
 8008dea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008dee:	fa1f fa82 	uxth.w	sl, r2
 8008df2:	f8dc 2000 	ldr.w	r2, [ip]
 8008df6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008dfa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e04:	4581      	cmp	r9, r0
 8008e06:	f84c 3b04 	str.w	r3, [ip], #4
 8008e0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008e0e:	d2db      	bcs.n	8008dc8 <quorem+0x44>
 8008e10:	f855 300b 	ldr.w	r3, [r5, fp]
 8008e14:	b92b      	cbnz	r3, 8008e22 <quorem+0x9e>
 8008e16:	9b01      	ldr	r3, [sp, #4]
 8008e18:	3b04      	subs	r3, #4
 8008e1a:	429d      	cmp	r5, r3
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	d32e      	bcc.n	8008e7e <quorem+0xfa>
 8008e20:	613c      	str	r4, [r7, #16]
 8008e22:	4638      	mov	r0, r7
 8008e24:	f001 fc8c 	bl	800a740 <__mcmp>
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	db24      	blt.n	8008e76 <quorem+0xf2>
 8008e2c:	3601      	adds	r6, #1
 8008e2e:	4628      	mov	r0, r5
 8008e30:	f04f 0c00 	mov.w	ip, #0
 8008e34:	f858 2b04 	ldr.w	r2, [r8], #4
 8008e38:	f8d0 e000 	ldr.w	lr, [r0]
 8008e3c:	b293      	uxth	r3, r2
 8008e3e:	ebac 0303 	sub.w	r3, ip, r3
 8008e42:	0c12      	lsrs	r2, r2, #16
 8008e44:	fa13 f38e 	uxtah	r3, r3, lr
 8008e48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008e4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e56:	45c1      	cmp	r9, r8
 8008e58:	f840 3b04 	str.w	r3, [r0], #4
 8008e5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008e60:	d2e8      	bcs.n	8008e34 <quorem+0xb0>
 8008e62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e6a:	b922      	cbnz	r2, 8008e76 <quorem+0xf2>
 8008e6c:	3b04      	subs	r3, #4
 8008e6e:	429d      	cmp	r5, r3
 8008e70:	461a      	mov	r2, r3
 8008e72:	d30a      	bcc.n	8008e8a <quorem+0x106>
 8008e74:	613c      	str	r4, [r7, #16]
 8008e76:	4630      	mov	r0, r6
 8008e78:	b003      	add	sp, #12
 8008e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e7e:	6812      	ldr	r2, [r2, #0]
 8008e80:	3b04      	subs	r3, #4
 8008e82:	2a00      	cmp	r2, #0
 8008e84:	d1cc      	bne.n	8008e20 <quorem+0x9c>
 8008e86:	3c01      	subs	r4, #1
 8008e88:	e7c7      	b.n	8008e1a <quorem+0x96>
 8008e8a:	6812      	ldr	r2, [r2, #0]
 8008e8c:	3b04      	subs	r3, #4
 8008e8e:	2a00      	cmp	r2, #0
 8008e90:	d1f0      	bne.n	8008e74 <quorem+0xf0>
 8008e92:	3c01      	subs	r4, #1
 8008e94:	e7eb      	b.n	8008e6e <quorem+0xea>
 8008e96:	2000      	movs	r0, #0
 8008e98:	e7ee      	b.n	8008e78 <quorem+0xf4>
 8008e9a:	0000      	movs	r0, r0
 8008e9c:	0000      	movs	r0, r0
	...

08008ea0 <_dtoa_r>:
 8008ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea4:	ed2d 8b02 	vpush	{d8}
 8008ea8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008eaa:	b095      	sub	sp, #84	; 0x54
 8008eac:	4616      	mov	r6, r2
 8008eae:	461f      	mov	r7, r3
 8008eb0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008eb4:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 8008eb8:	4604      	mov	r4, r0
 8008eba:	b975      	cbnz	r5, 8008eda <_dtoa_r+0x3a>
 8008ebc:	2010      	movs	r0, #16
 8008ebe:	f001 f94f 	bl	800a160 <malloc>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	6260      	str	r0, [r4, #36]	; 0x24
 8008ec6:	b920      	cbnz	r0, 8008ed2 <_dtoa_r+0x32>
 8008ec8:	4bb1      	ldr	r3, [pc, #708]	; (8009190 <_dtoa_r+0x2f0>)
 8008eca:	21ea      	movs	r1, #234	; 0xea
 8008ecc:	48b1      	ldr	r0, [pc, #708]	; (8009194 <_dtoa_r+0x2f4>)
 8008ece:	f002 f86d 	bl	800afac <__assert_func>
 8008ed2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008ed6:	6005      	str	r5, [r0, #0]
 8008ed8:	60c5      	str	r5, [r0, #12]
 8008eda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008edc:	6819      	ldr	r1, [r3, #0]
 8008ede:	b151      	cbz	r1, 8008ef6 <_dtoa_r+0x56>
 8008ee0:	685a      	ldr	r2, [r3, #4]
 8008ee2:	604a      	str	r2, [r1, #4]
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	4093      	lsls	r3, r2
 8008ee8:	608b      	str	r3, [r1, #8]
 8008eea:	4620      	mov	r0, r4
 8008eec:	f001 f9a0 	bl	800a230 <_Bfree>
 8008ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	601a      	str	r2, [r3, #0]
 8008ef6:	1e3b      	subs	r3, r7, #0
 8008ef8:	bfb9      	ittee	lt
 8008efa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008efe:	9305      	strlt	r3, [sp, #20]
 8008f00:	2300      	movge	r3, #0
 8008f02:	f8c8 3000 	strge.w	r3, [r8]
 8008f06:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008f0a:	4ba3      	ldr	r3, [pc, #652]	; (8009198 <_dtoa_r+0x2f8>)
 8008f0c:	bfbc      	itt	lt
 8008f0e:	2201      	movlt	r2, #1
 8008f10:	f8c8 2000 	strlt.w	r2, [r8]
 8008f14:	ea33 0309 	bics.w	r3, r3, r9
 8008f18:	d11b      	bne.n	8008f52 <_dtoa_r+0xb2>
 8008f1a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008f1c:	f242 730f 	movw	r3, #9999	; 0x270f
 8008f20:	6013      	str	r3, [r2, #0]
 8008f22:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f26:	4333      	orrs	r3, r6
 8008f28:	f000 857d 	beq.w	8009a26 <_dtoa_r+0xb86>
 8008f2c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008f2e:	b963      	cbnz	r3, 8008f4a <_dtoa_r+0xaa>
 8008f30:	4b9a      	ldr	r3, [pc, #616]	; (800919c <_dtoa_r+0x2fc>)
 8008f32:	e024      	b.n	8008f7e <_dtoa_r+0xde>
 8008f34:	4b9a      	ldr	r3, [pc, #616]	; (80091a0 <_dtoa_r+0x300>)
 8008f36:	9303      	str	r3, [sp, #12]
 8008f38:	3308      	adds	r3, #8
 8008f3a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f3c:	6013      	str	r3, [r2, #0]
 8008f3e:	9803      	ldr	r0, [sp, #12]
 8008f40:	b015      	add	sp, #84	; 0x54
 8008f42:	ecbd 8b02 	vpop	{d8}
 8008f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f4a:	4b94      	ldr	r3, [pc, #592]	; (800919c <_dtoa_r+0x2fc>)
 8008f4c:	9303      	str	r3, [sp, #12]
 8008f4e:	3303      	adds	r3, #3
 8008f50:	e7f3      	b.n	8008f3a <_dtoa_r+0x9a>
 8008f52:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008f56:	2200      	movs	r2, #0
 8008f58:	ec51 0b17 	vmov	r0, r1, d7
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008f62:	f7f7 fdb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f66:	4680      	mov	r8, r0
 8008f68:	b158      	cbz	r0, 8008f82 <_dtoa_r+0xe2>
 8008f6a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	6013      	str	r3, [r2, #0]
 8008f70:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f000 8554 	beq.w	8009a20 <_dtoa_r+0xb80>
 8008f78:	488a      	ldr	r0, [pc, #552]	; (80091a4 <_dtoa_r+0x304>)
 8008f7a:	6018      	str	r0, [r3, #0]
 8008f7c:	1e43      	subs	r3, r0, #1
 8008f7e:	9303      	str	r3, [sp, #12]
 8008f80:	e7dd      	b.n	8008f3e <_dtoa_r+0x9e>
 8008f82:	ab12      	add	r3, sp, #72	; 0x48
 8008f84:	9301      	str	r3, [sp, #4]
 8008f86:	ab13      	add	r3, sp, #76	; 0x4c
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008f90:	f001 fcf4 	bl	800a97c <__d2b>
 8008f94:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008f98:	4683      	mov	fp, r0
 8008f9a:	2d00      	cmp	r5, #0
 8008f9c:	d07c      	beq.n	8009098 <_dtoa_r+0x1f8>
 8008f9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fa0:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fa8:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008fac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008fb0:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008fb4:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008fb8:	4b7b      	ldr	r3, [pc, #492]	; (80091a8 <_dtoa_r+0x308>)
 8008fba:	2200      	movs	r2, #0
 8008fbc:	4630      	mov	r0, r6
 8008fbe:	4639      	mov	r1, r7
 8008fc0:	f7f7 f962 	bl	8000288 <__aeabi_dsub>
 8008fc4:	a36c      	add	r3, pc, #432	; (adr r3, 8009178 <_dtoa_r+0x2d8>)
 8008fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fca:	f7f7 fb15 	bl	80005f8 <__aeabi_dmul>
 8008fce:	a36c      	add	r3, pc, #432	; (adr r3, 8009180 <_dtoa_r+0x2e0>)
 8008fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd4:	f7f7 f95a 	bl	800028c <__adddf3>
 8008fd8:	4606      	mov	r6, r0
 8008fda:	4628      	mov	r0, r5
 8008fdc:	460f      	mov	r7, r1
 8008fde:	f7f7 faa1 	bl	8000524 <__aeabi_i2d>
 8008fe2:	a369      	add	r3, pc, #420	; (adr r3, 8009188 <_dtoa_r+0x2e8>)
 8008fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe8:	f7f7 fb06 	bl	80005f8 <__aeabi_dmul>
 8008fec:	4602      	mov	r2, r0
 8008fee:	460b      	mov	r3, r1
 8008ff0:	4630      	mov	r0, r6
 8008ff2:	4639      	mov	r1, r7
 8008ff4:	f7f7 f94a 	bl	800028c <__adddf3>
 8008ff8:	4606      	mov	r6, r0
 8008ffa:	460f      	mov	r7, r1
 8008ffc:	f7f7 fdac 	bl	8000b58 <__aeabi_d2iz>
 8009000:	2200      	movs	r2, #0
 8009002:	4682      	mov	sl, r0
 8009004:	2300      	movs	r3, #0
 8009006:	4630      	mov	r0, r6
 8009008:	4639      	mov	r1, r7
 800900a:	f7f7 fd67 	bl	8000adc <__aeabi_dcmplt>
 800900e:	b148      	cbz	r0, 8009024 <_dtoa_r+0x184>
 8009010:	4650      	mov	r0, sl
 8009012:	f7f7 fa87 	bl	8000524 <__aeabi_i2d>
 8009016:	4632      	mov	r2, r6
 8009018:	463b      	mov	r3, r7
 800901a:	f7f7 fd55 	bl	8000ac8 <__aeabi_dcmpeq>
 800901e:	b908      	cbnz	r0, 8009024 <_dtoa_r+0x184>
 8009020:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009024:	f1ba 0f16 	cmp.w	sl, #22
 8009028:	d854      	bhi.n	80090d4 <_dtoa_r+0x234>
 800902a:	4b60      	ldr	r3, [pc, #384]	; (80091ac <_dtoa_r+0x30c>)
 800902c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009034:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009038:	f7f7 fd50 	bl	8000adc <__aeabi_dcmplt>
 800903c:	2800      	cmp	r0, #0
 800903e:	d04b      	beq.n	80090d8 <_dtoa_r+0x238>
 8009040:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009044:	2300      	movs	r3, #0
 8009046:	930f      	str	r3, [sp, #60]	; 0x3c
 8009048:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800904a:	1b5d      	subs	r5, r3, r5
 800904c:	1e6b      	subs	r3, r5, #1
 800904e:	9307      	str	r3, [sp, #28]
 8009050:	bf43      	ittte	mi
 8009052:	2300      	movmi	r3, #0
 8009054:	f1c5 0801 	rsbmi	r8, r5, #1
 8009058:	9307      	strmi	r3, [sp, #28]
 800905a:	f04f 0800 	movpl.w	r8, #0
 800905e:	f1ba 0f00 	cmp.w	sl, #0
 8009062:	db3b      	blt.n	80090dc <_dtoa_r+0x23c>
 8009064:	9b07      	ldr	r3, [sp, #28]
 8009066:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800906a:	4453      	add	r3, sl
 800906c:	9307      	str	r3, [sp, #28]
 800906e:	2300      	movs	r3, #0
 8009070:	9308      	str	r3, [sp, #32]
 8009072:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009074:	2b09      	cmp	r3, #9
 8009076:	d869      	bhi.n	800914c <_dtoa_r+0x2ac>
 8009078:	2b05      	cmp	r3, #5
 800907a:	bfc4      	itt	gt
 800907c:	3b04      	subgt	r3, #4
 800907e:	9320      	strgt	r3, [sp, #128]	; 0x80
 8009080:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009082:	f1a3 0302 	sub.w	r3, r3, #2
 8009086:	bfcc      	ite	gt
 8009088:	2500      	movgt	r5, #0
 800908a:	2501      	movle	r5, #1
 800908c:	2b03      	cmp	r3, #3
 800908e:	d869      	bhi.n	8009164 <_dtoa_r+0x2c4>
 8009090:	e8df f003 	tbb	[pc, r3]
 8009094:	5a4c4e2c 	.word	0x5a4c4e2c
 8009098:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800909c:	441d      	add	r5, r3
 800909e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80090a2:	2b20      	cmp	r3, #32
 80090a4:	bfc1      	itttt	gt
 80090a6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80090aa:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80090ae:	fa09 f303 	lslgt.w	r3, r9, r3
 80090b2:	fa26 f000 	lsrgt.w	r0, r6, r0
 80090b6:	bfda      	itte	le
 80090b8:	f1c3 0320 	rsble	r3, r3, #32
 80090bc:	fa06 f003 	lslle.w	r0, r6, r3
 80090c0:	4318      	orrgt	r0, r3
 80090c2:	f7f7 fa1f 	bl	8000504 <__aeabi_ui2d>
 80090c6:	2301      	movs	r3, #1
 80090c8:	4606      	mov	r6, r0
 80090ca:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80090ce:	3d01      	subs	r5, #1
 80090d0:	9310      	str	r3, [sp, #64]	; 0x40
 80090d2:	e771      	b.n	8008fb8 <_dtoa_r+0x118>
 80090d4:	2301      	movs	r3, #1
 80090d6:	e7b6      	b.n	8009046 <_dtoa_r+0x1a6>
 80090d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80090da:	e7b5      	b.n	8009048 <_dtoa_r+0x1a8>
 80090dc:	f1ca 0300 	rsb	r3, sl, #0
 80090e0:	9308      	str	r3, [sp, #32]
 80090e2:	2300      	movs	r3, #0
 80090e4:	eba8 080a 	sub.w	r8, r8, sl
 80090e8:	930e      	str	r3, [sp, #56]	; 0x38
 80090ea:	e7c2      	b.n	8009072 <_dtoa_r+0x1d2>
 80090ec:	2300      	movs	r3, #0
 80090ee:	930c      	str	r3, [sp, #48]	; 0x30
 80090f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	dc39      	bgt.n	800916a <_dtoa_r+0x2ca>
 80090f6:	f04f 0901 	mov.w	r9, #1
 80090fa:	f8cd 9018 	str.w	r9, [sp, #24]
 80090fe:	464b      	mov	r3, r9
 8009100:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
 8009104:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009106:	2200      	movs	r2, #0
 8009108:	6042      	str	r2, [r0, #4]
 800910a:	2204      	movs	r2, #4
 800910c:	f102 0614 	add.w	r6, r2, #20
 8009110:	429e      	cmp	r6, r3
 8009112:	6841      	ldr	r1, [r0, #4]
 8009114:	d94e      	bls.n	80091b4 <_dtoa_r+0x314>
 8009116:	4620      	mov	r0, r4
 8009118:	f001 f84a 	bl	800a1b0 <_Balloc>
 800911c:	9003      	str	r0, [sp, #12]
 800911e:	2800      	cmp	r0, #0
 8009120:	d14c      	bne.n	80091bc <_dtoa_r+0x31c>
 8009122:	4b23      	ldr	r3, [pc, #140]	; (80091b0 <_dtoa_r+0x310>)
 8009124:	4602      	mov	r2, r0
 8009126:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800912a:	e6cf      	b.n	8008ecc <_dtoa_r+0x2c>
 800912c:	2301      	movs	r3, #1
 800912e:	e7de      	b.n	80090ee <_dtoa_r+0x24e>
 8009130:	2300      	movs	r3, #0
 8009132:	930c      	str	r3, [sp, #48]	; 0x30
 8009134:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009136:	eb0a 0903 	add.w	r9, sl, r3
 800913a:	f109 0301 	add.w	r3, r9, #1
 800913e:	2b01      	cmp	r3, #1
 8009140:	9306      	str	r3, [sp, #24]
 8009142:	bfb8      	it	lt
 8009144:	2301      	movlt	r3, #1
 8009146:	e7dd      	b.n	8009104 <_dtoa_r+0x264>
 8009148:	2301      	movs	r3, #1
 800914a:	e7f2      	b.n	8009132 <_dtoa_r+0x292>
 800914c:	2501      	movs	r5, #1
 800914e:	2300      	movs	r3, #0
 8009150:	9320      	str	r3, [sp, #128]	; 0x80
 8009152:	950c      	str	r5, [sp, #48]	; 0x30
 8009154:	f04f 39ff 	mov.w	r9, #4294967295
 8009158:	2200      	movs	r2, #0
 800915a:	f8cd 9018 	str.w	r9, [sp, #24]
 800915e:	2312      	movs	r3, #18
 8009160:	9221      	str	r2, [sp, #132]	; 0x84
 8009162:	e7cf      	b.n	8009104 <_dtoa_r+0x264>
 8009164:	2301      	movs	r3, #1
 8009166:	930c      	str	r3, [sp, #48]	; 0x30
 8009168:	e7f4      	b.n	8009154 <_dtoa_r+0x2b4>
 800916a:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
 800916e:	f8cd 9018 	str.w	r9, [sp, #24]
 8009172:	464b      	mov	r3, r9
 8009174:	e7c6      	b.n	8009104 <_dtoa_r+0x264>
 8009176:	bf00      	nop
 8009178:	636f4361 	.word	0x636f4361
 800917c:	3fd287a7 	.word	0x3fd287a7
 8009180:	8b60c8b3 	.word	0x8b60c8b3
 8009184:	3fc68a28 	.word	0x3fc68a28
 8009188:	509f79fb 	.word	0x509f79fb
 800918c:	3fd34413 	.word	0x3fd34413
 8009190:	0800dcee 	.word	0x0800dcee
 8009194:	0800dd05 	.word	0x0800dd05
 8009198:	7ff00000 	.word	0x7ff00000
 800919c:	0800dcea 	.word	0x0800dcea
 80091a0:	0800dce1 	.word	0x0800dce1
 80091a4:	0800db65 	.word	0x0800db65
 80091a8:	3ff80000 	.word	0x3ff80000
 80091ac:	0800de80 	.word	0x0800de80
 80091b0:	0800dd64 	.word	0x0800dd64
 80091b4:	3101      	adds	r1, #1
 80091b6:	6041      	str	r1, [r0, #4]
 80091b8:	0052      	lsls	r2, r2, #1
 80091ba:	e7a7      	b.n	800910c <_dtoa_r+0x26c>
 80091bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091be:	9a03      	ldr	r2, [sp, #12]
 80091c0:	601a      	str	r2, [r3, #0]
 80091c2:	9b06      	ldr	r3, [sp, #24]
 80091c4:	2b0e      	cmp	r3, #14
 80091c6:	f200 80ad 	bhi.w	8009324 <_dtoa_r+0x484>
 80091ca:	2d00      	cmp	r5, #0
 80091cc:	f000 80aa 	beq.w	8009324 <_dtoa_r+0x484>
 80091d0:	f1ba 0f00 	cmp.w	sl, #0
 80091d4:	dd36      	ble.n	8009244 <_dtoa_r+0x3a4>
 80091d6:	4ac3      	ldr	r2, [pc, #780]	; (80094e4 <_dtoa_r+0x644>)
 80091d8:	f00a 030f 	and.w	r3, sl, #15
 80091dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80091e0:	ed93 7b00 	vldr	d7, [r3]
 80091e4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80091e8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80091ec:	eeb0 8a47 	vmov.f32	s16, s14
 80091f0:	eef0 8a67 	vmov.f32	s17, s15
 80091f4:	d016      	beq.n	8009224 <_dtoa_r+0x384>
 80091f6:	4bbc      	ldr	r3, [pc, #752]	; (80094e8 <_dtoa_r+0x648>)
 80091f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80091fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009200:	f7f7 fb24 	bl	800084c <__aeabi_ddiv>
 8009204:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009208:	f007 070f 	and.w	r7, r7, #15
 800920c:	2503      	movs	r5, #3
 800920e:	4eb6      	ldr	r6, [pc, #728]	; (80094e8 <_dtoa_r+0x648>)
 8009210:	b957      	cbnz	r7, 8009228 <_dtoa_r+0x388>
 8009212:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009216:	ec53 2b18 	vmov	r2, r3, d8
 800921a:	f7f7 fb17 	bl	800084c <__aeabi_ddiv>
 800921e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009222:	e029      	b.n	8009278 <_dtoa_r+0x3d8>
 8009224:	2502      	movs	r5, #2
 8009226:	e7f2      	b.n	800920e <_dtoa_r+0x36e>
 8009228:	07f9      	lsls	r1, r7, #31
 800922a:	d508      	bpl.n	800923e <_dtoa_r+0x39e>
 800922c:	ec51 0b18 	vmov	r0, r1, d8
 8009230:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009234:	f7f7 f9e0 	bl	80005f8 <__aeabi_dmul>
 8009238:	ec41 0b18 	vmov	d8, r0, r1
 800923c:	3501      	adds	r5, #1
 800923e:	107f      	asrs	r7, r7, #1
 8009240:	3608      	adds	r6, #8
 8009242:	e7e5      	b.n	8009210 <_dtoa_r+0x370>
 8009244:	f000 80a6 	beq.w	8009394 <_dtoa_r+0x4f4>
 8009248:	f1ca 0600 	rsb	r6, sl, #0
 800924c:	4ba5      	ldr	r3, [pc, #660]	; (80094e4 <_dtoa_r+0x644>)
 800924e:	4fa6      	ldr	r7, [pc, #664]	; (80094e8 <_dtoa_r+0x648>)
 8009250:	f006 020f 	and.w	r2, r6, #15
 8009254:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009260:	f7f7 f9ca 	bl	80005f8 <__aeabi_dmul>
 8009264:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009268:	1136      	asrs	r6, r6, #4
 800926a:	2300      	movs	r3, #0
 800926c:	2502      	movs	r5, #2
 800926e:	2e00      	cmp	r6, #0
 8009270:	f040 8085 	bne.w	800937e <_dtoa_r+0x4de>
 8009274:	2b00      	cmp	r3, #0
 8009276:	d1d2      	bne.n	800921e <_dtoa_r+0x37e>
 8009278:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800927a:	2b00      	cmp	r3, #0
 800927c:	f000 808c 	beq.w	8009398 <_dtoa_r+0x4f8>
 8009280:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8009284:	4b99      	ldr	r3, [pc, #612]	; (80094ec <_dtoa_r+0x64c>)
 8009286:	2200      	movs	r2, #0
 8009288:	4630      	mov	r0, r6
 800928a:	4639      	mov	r1, r7
 800928c:	f7f7 fc26 	bl	8000adc <__aeabi_dcmplt>
 8009290:	2800      	cmp	r0, #0
 8009292:	f000 8081 	beq.w	8009398 <_dtoa_r+0x4f8>
 8009296:	9b06      	ldr	r3, [sp, #24]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d07d      	beq.n	8009398 <_dtoa_r+0x4f8>
 800929c:	f1b9 0f00 	cmp.w	r9, #0
 80092a0:	dd3c      	ble.n	800931c <_dtoa_r+0x47c>
 80092a2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80092a6:	9309      	str	r3, [sp, #36]	; 0x24
 80092a8:	2200      	movs	r2, #0
 80092aa:	4b91      	ldr	r3, [pc, #580]	; (80094f0 <_dtoa_r+0x650>)
 80092ac:	4630      	mov	r0, r6
 80092ae:	4639      	mov	r1, r7
 80092b0:	f7f7 f9a2 	bl	80005f8 <__aeabi_dmul>
 80092b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092b8:	3501      	adds	r5, #1
 80092ba:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80092be:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80092c2:	4628      	mov	r0, r5
 80092c4:	f7f7 f92e 	bl	8000524 <__aeabi_i2d>
 80092c8:	4632      	mov	r2, r6
 80092ca:	463b      	mov	r3, r7
 80092cc:	f7f7 f994 	bl	80005f8 <__aeabi_dmul>
 80092d0:	4b88      	ldr	r3, [pc, #544]	; (80094f4 <_dtoa_r+0x654>)
 80092d2:	2200      	movs	r2, #0
 80092d4:	f7f6 ffda 	bl	800028c <__adddf3>
 80092d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80092dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092e0:	9305      	str	r3, [sp, #20]
 80092e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d15c      	bne.n	80093a2 <_dtoa_r+0x502>
 80092e8:	4b83      	ldr	r3, [pc, #524]	; (80094f8 <_dtoa_r+0x658>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	4630      	mov	r0, r6
 80092ee:	4639      	mov	r1, r7
 80092f0:	f7f6 ffca 	bl	8000288 <__aeabi_dsub>
 80092f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092f8:	4606      	mov	r6, r0
 80092fa:	460f      	mov	r7, r1
 80092fc:	f7f7 fc0c 	bl	8000b18 <__aeabi_dcmpgt>
 8009300:	2800      	cmp	r0, #0
 8009302:	f040 8296 	bne.w	8009832 <_dtoa_r+0x992>
 8009306:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800930a:	4630      	mov	r0, r6
 800930c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009310:	4639      	mov	r1, r7
 8009312:	f7f7 fbe3 	bl	8000adc <__aeabi_dcmplt>
 8009316:	2800      	cmp	r0, #0
 8009318:	f040 8288 	bne.w	800982c <_dtoa_r+0x98c>
 800931c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009320:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009324:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009326:	2b00      	cmp	r3, #0
 8009328:	f2c0 8158 	blt.w	80095dc <_dtoa_r+0x73c>
 800932c:	f1ba 0f0e 	cmp.w	sl, #14
 8009330:	f300 8154 	bgt.w	80095dc <_dtoa_r+0x73c>
 8009334:	4b6b      	ldr	r3, [pc, #428]	; (80094e4 <_dtoa_r+0x644>)
 8009336:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800933a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800933e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009340:	2b00      	cmp	r3, #0
 8009342:	f280 80e3 	bge.w	800950c <_dtoa_r+0x66c>
 8009346:	9b06      	ldr	r3, [sp, #24]
 8009348:	2b00      	cmp	r3, #0
 800934a:	f300 80df 	bgt.w	800950c <_dtoa_r+0x66c>
 800934e:	f040 826d 	bne.w	800982c <_dtoa_r+0x98c>
 8009352:	4b69      	ldr	r3, [pc, #420]	; (80094f8 <_dtoa_r+0x658>)
 8009354:	2200      	movs	r2, #0
 8009356:	4640      	mov	r0, r8
 8009358:	4649      	mov	r1, r9
 800935a:	f7f7 f94d 	bl	80005f8 <__aeabi_dmul>
 800935e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009362:	f7f7 fbcf 	bl	8000b04 <__aeabi_dcmpge>
 8009366:	9e06      	ldr	r6, [sp, #24]
 8009368:	4637      	mov	r7, r6
 800936a:	2800      	cmp	r0, #0
 800936c:	f040 8243 	bne.w	80097f6 <_dtoa_r+0x956>
 8009370:	9d03      	ldr	r5, [sp, #12]
 8009372:	2331      	movs	r3, #49	; 0x31
 8009374:	f805 3b01 	strb.w	r3, [r5], #1
 8009378:	f10a 0a01 	add.w	sl, sl, #1
 800937c:	e23f      	b.n	80097fe <_dtoa_r+0x95e>
 800937e:	07f2      	lsls	r2, r6, #31
 8009380:	d505      	bpl.n	800938e <_dtoa_r+0x4ee>
 8009382:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009386:	f7f7 f937 	bl	80005f8 <__aeabi_dmul>
 800938a:	3501      	adds	r5, #1
 800938c:	2301      	movs	r3, #1
 800938e:	1076      	asrs	r6, r6, #1
 8009390:	3708      	adds	r7, #8
 8009392:	e76c      	b.n	800926e <_dtoa_r+0x3ce>
 8009394:	2502      	movs	r5, #2
 8009396:	e76f      	b.n	8009278 <_dtoa_r+0x3d8>
 8009398:	9b06      	ldr	r3, [sp, #24]
 800939a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800939e:	930d      	str	r3, [sp, #52]	; 0x34
 80093a0:	e78d      	b.n	80092be <_dtoa_r+0x41e>
 80093a2:	9903      	ldr	r1, [sp, #12]
 80093a4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80093a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093a8:	4b4e      	ldr	r3, [pc, #312]	; (80094e4 <_dtoa_r+0x644>)
 80093aa:	ed9d 7b04 	vldr	d7, [sp, #16]
 80093ae:	4401      	add	r1, r0
 80093b0:	9104      	str	r1, [sp, #16]
 80093b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80093b4:	eeb0 8a47 	vmov.f32	s16, s14
 80093b8:	eef0 8a67 	vmov.f32	s17, s15
 80093bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80093c4:	2900      	cmp	r1, #0
 80093c6:	d045      	beq.n	8009454 <_dtoa_r+0x5b4>
 80093c8:	494c      	ldr	r1, [pc, #304]	; (80094fc <_dtoa_r+0x65c>)
 80093ca:	2000      	movs	r0, #0
 80093cc:	f7f7 fa3e 	bl	800084c <__aeabi_ddiv>
 80093d0:	ec53 2b18 	vmov	r2, r3, d8
 80093d4:	f7f6 ff58 	bl	8000288 <__aeabi_dsub>
 80093d8:	9d03      	ldr	r5, [sp, #12]
 80093da:	ec41 0b18 	vmov	d8, r0, r1
 80093de:	4639      	mov	r1, r7
 80093e0:	4630      	mov	r0, r6
 80093e2:	f7f7 fbb9 	bl	8000b58 <__aeabi_d2iz>
 80093e6:	900d      	str	r0, [sp, #52]	; 0x34
 80093e8:	f7f7 f89c 	bl	8000524 <__aeabi_i2d>
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	4630      	mov	r0, r6
 80093f2:	4639      	mov	r1, r7
 80093f4:	f7f6 ff48 	bl	8000288 <__aeabi_dsub>
 80093f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093fa:	3330      	adds	r3, #48	; 0x30
 80093fc:	f805 3b01 	strb.w	r3, [r5], #1
 8009400:	ec53 2b18 	vmov	r2, r3, d8
 8009404:	4606      	mov	r6, r0
 8009406:	460f      	mov	r7, r1
 8009408:	f7f7 fb68 	bl	8000adc <__aeabi_dcmplt>
 800940c:	2800      	cmp	r0, #0
 800940e:	d165      	bne.n	80094dc <_dtoa_r+0x63c>
 8009410:	4632      	mov	r2, r6
 8009412:	463b      	mov	r3, r7
 8009414:	4935      	ldr	r1, [pc, #212]	; (80094ec <_dtoa_r+0x64c>)
 8009416:	2000      	movs	r0, #0
 8009418:	f7f6 ff36 	bl	8000288 <__aeabi_dsub>
 800941c:	ec53 2b18 	vmov	r2, r3, d8
 8009420:	f7f7 fb5c 	bl	8000adc <__aeabi_dcmplt>
 8009424:	2800      	cmp	r0, #0
 8009426:	f040 80b9 	bne.w	800959c <_dtoa_r+0x6fc>
 800942a:	9b04      	ldr	r3, [sp, #16]
 800942c:	429d      	cmp	r5, r3
 800942e:	f43f af75 	beq.w	800931c <_dtoa_r+0x47c>
 8009432:	4b2f      	ldr	r3, [pc, #188]	; (80094f0 <_dtoa_r+0x650>)
 8009434:	ec51 0b18 	vmov	r0, r1, d8
 8009438:	2200      	movs	r2, #0
 800943a:	f7f7 f8dd 	bl	80005f8 <__aeabi_dmul>
 800943e:	4b2c      	ldr	r3, [pc, #176]	; (80094f0 <_dtoa_r+0x650>)
 8009440:	ec41 0b18 	vmov	d8, r0, r1
 8009444:	2200      	movs	r2, #0
 8009446:	4630      	mov	r0, r6
 8009448:	4639      	mov	r1, r7
 800944a:	f7f7 f8d5 	bl	80005f8 <__aeabi_dmul>
 800944e:	4606      	mov	r6, r0
 8009450:	460f      	mov	r7, r1
 8009452:	e7c4      	b.n	80093de <_dtoa_r+0x53e>
 8009454:	ec51 0b17 	vmov	r0, r1, d7
 8009458:	f7f7 f8ce 	bl	80005f8 <__aeabi_dmul>
 800945c:	9b04      	ldr	r3, [sp, #16]
 800945e:	9d03      	ldr	r5, [sp, #12]
 8009460:	930d      	str	r3, [sp, #52]	; 0x34
 8009462:	ec41 0b18 	vmov	d8, r0, r1
 8009466:	4639      	mov	r1, r7
 8009468:	4630      	mov	r0, r6
 800946a:	f7f7 fb75 	bl	8000b58 <__aeabi_d2iz>
 800946e:	9011      	str	r0, [sp, #68]	; 0x44
 8009470:	f7f7 f858 	bl	8000524 <__aeabi_i2d>
 8009474:	4602      	mov	r2, r0
 8009476:	460b      	mov	r3, r1
 8009478:	4630      	mov	r0, r6
 800947a:	4639      	mov	r1, r7
 800947c:	f7f6 ff04 	bl	8000288 <__aeabi_dsub>
 8009480:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009482:	3330      	adds	r3, #48	; 0x30
 8009484:	f805 3b01 	strb.w	r3, [r5], #1
 8009488:	9b04      	ldr	r3, [sp, #16]
 800948a:	429d      	cmp	r5, r3
 800948c:	4606      	mov	r6, r0
 800948e:	460f      	mov	r7, r1
 8009490:	f04f 0200 	mov.w	r2, #0
 8009494:	d134      	bne.n	8009500 <_dtoa_r+0x660>
 8009496:	4b19      	ldr	r3, [pc, #100]	; (80094fc <_dtoa_r+0x65c>)
 8009498:	ec51 0b18 	vmov	r0, r1, d8
 800949c:	f7f6 fef6 	bl	800028c <__adddf3>
 80094a0:	4602      	mov	r2, r0
 80094a2:	460b      	mov	r3, r1
 80094a4:	4630      	mov	r0, r6
 80094a6:	4639      	mov	r1, r7
 80094a8:	f7f7 fb36 	bl	8000b18 <__aeabi_dcmpgt>
 80094ac:	2800      	cmp	r0, #0
 80094ae:	d175      	bne.n	800959c <_dtoa_r+0x6fc>
 80094b0:	ec53 2b18 	vmov	r2, r3, d8
 80094b4:	4911      	ldr	r1, [pc, #68]	; (80094fc <_dtoa_r+0x65c>)
 80094b6:	2000      	movs	r0, #0
 80094b8:	f7f6 fee6 	bl	8000288 <__aeabi_dsub>
 80094bc:	4602      	mov	r2, r0
 80094be:	460b      	mov	r3, r1
 80094c0:	4630      	mov	r0, r6
 80094c2:	4639      	mov	r1, r7
 80094c4:	f7f7 fb0a 	bl	8000adc <__aeabi_dcmplt>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	f43f af27 	beq.w	800931c <_dtoa_r+0x47c>
 80094ce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80094d0:	1e6b      	subs	r3, r5, #1
 80094d2:	930d      	str	r3, [sp, #52]	; 0x34
 80094d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80094d8:	2b30      	cmp	r3, #48	; 0x30
 80094da:	d0f8      	beq.n	80094ce <_dtoa_r+0x62e>
 80094dc:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80094e0:	e04a      	b.n	8009578 <_dtoa_r+0x6d8>
 80094e2:	bf00      	nop
 80094e4:	0800de80 	.word	0x0800de80
 80094e8:	0800de58 	.word	0x0800de58
 80094ec:	3ff00000 	.word	0x3ff00000
 80094f0:	40240000 	.word	0x40240000
 80094f4:	401c0000 	.word	0x401c0000
 80094f8:	40140000 	.word	0x40140000
 80094fc:	3fe00000 	.word	0x3fe00000
 8009500:	4baf      	ldr	r3, [pc, #700]	; (80097c0 <_dtoa_r+0x920>)
 8009502:	f7f7 f879 	bl	80005f8 <__aeabi_dmul>
 8009506:	4606      	mov	r6, r0
 8009508:	460f      	mov	r7, r1
 800950a:	e7ac      	b.n	8009466 <_dtoa_r+0x5c6>
 800950c:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8009510:	9d03      	ldr	r5, [sp, #12]
 8009512:	4642      	mov	r2, r8
 8009514:	464b      	mov	r3, r9
 8009516:	4630      	mov	r0, r6
 8009518:	4639      	mov	r1, r7
 800951a:	f7f7 f997 	bl	800084c <__aeabi_ddiv>
 800951e:	f7f7 fb1b 	bl	8000b58 <__aeabi_d2iz>
 8009522:	9004      	str	r0, [sp, #16]
 8009524:	f7f6 fffe 	bl	8000524 <__aeabi_i2d>
 8009528:	4642      	mov	r2, r8
 800952a:	464b      	mov	r3, r9
 800952c:	f7f7 f864 	bl	80005f8 <__aeabi_dmul>
 8009530:	4602      	mov	r2, r0
 8009532:	460b      	mov	r3, r1
 8009534:	4630      	mov	r0, r6
 8009536:	4639      	mov	r1, r7
 8009538:	f7f6 fea6 	bl	8000288 <__aeabi_dsub>
 800953c:	9e04      	ldr	r6, [sp, #16]
 800953e:	9f06      	ldr	r7, [sp, #24]
 8009540:	3630      	adds	r6, #48	; 0x30
 8009542:	f805 6b01 	strb.w	r6, [r5], #1
 8009546:	9e03      	ldr	r6, [sp, #12]
 8009548:	1bae      	subs	r6, r5, r6
 800954a:	42b7      	cmp	r7, r6
 800954c:	4602      	mov	r2, r0
 800954e:	460b      	mov	r3, r1
 8009550:	d137      	bne.n	80095c2 <_dtoa_r+0x722>
 8009552:	f7f6 fe9b 	bl	800028c <__adddf3>
 8009556:	4642      	mov	r2, r8
 8009558:	464b      	mov	r3, r9
 800955a:	4606      	mov	r6, r0
 800955c:	460f      	mov	r7, r1
 800955e:	f7f7 fadb 	bl	8000b18 <__aeabi_dcmpgt>
 8009562:	b9c8      	cbnz	r0, 8009598 <_dtoa_r+0x6f8>
 8009564:	4642      	mov	r2, r8
 8009566:	464b      	mov	r3, r9
 8009568:	4630      	mov	r0, r6
 800956a:	4639      	mov	r1, r7
 800956c:	f7f7 faac 	bl	8000ac8 <__aeabi_dcmpeq>
 8009570:	b110      	cbz	r0, 8009578 <_dtoa_r+0x6d8>
 8009572:	9b04      	ldr	r3, [sp, #16]
 8009574:	07d9      	lsls	r1, r3, #31
 8009576:	d40f      	bmi.n	8009598 <_dtoa_r+0x6f8>
 8009578:	4620      	mov	r0, r4
 800957a:	4659      	mov	r1, fp
 800957c:	f000 fe58 	bl	800a230 <_Bfree>
 8009580:	2300      	movs	r3, #0
 8009582:	702b      	strb	r3, [r5, #0]
 8009584:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009586:	f10a 0001 	add.w	r0, sl, #1
 800958a:	6018      	str	r0, [r3, #0]
 800958c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800958e:	2b00      	cmp	r3, #0
 8009590:	f43f acd5 	beq.w	8008f3e <_dtoa_r+0x9e>
 8009594:	601d      	str	r5, [r3, #0]
 8009596:	e4d2      	b.n	8008f3e <_dtoa_r+0x9e>
 8009598:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800959c:	462b      	mov	r3, r5
 800959e:	461d      	mov	r5, r3
 80095a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095a4:	2a39      	cmp	r2, #57	; 0x39
 80095a6:	d108      	bne.n	80095ba <_dtoa_r+0x71a>
 80095a8:	9a03      	ldr	r2, [sp, #12]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d1f7      	bne.n	800959e <_dtoa_r+0x6fe>
 80095ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095b0:	9903      	ldr	r1, [sp, #12]
 80095b2:	3201      	adds	r2, #1
 80095b4:	9209      	str	r2, [sp, #36]	; 0x24
 80095b6:	2230      	movs	r2, #48	; 0x30
 80095b8:	700a      	strb	r2, [r1, #0]
 80095ba:	781a      	ldrb	r2, [r3, #0]
 80095bc:	3201      	adds	r2, #1
 80095be:	701a      	strb	r2, [r3, #0]
 80095c0:	e78c      	b.n	80094dc <_dtoa_r+0x63c>
 80095c2:	4b7f      	ldr	r3, [pc, #508]	; (80097c0 <_dtoa_r+0x920>)
 80095c4:	2200      	movs	r2, #0
 80095c6:	f7f7 f817 	bl	80005f8 <__aeabi_dmul>
 80095ca:	2200      	movs	r2, #0
 80095cc:	2300      	movs	r3, #0
 80095ce:	4606      	mov	r6, r0
 80095d0:	460f      	mov	r7, r1
 80095d2:	f7f7 fa79 	bl	8000ac8 <__aeabi_dcmpeq>
 80095d6:	2800      	cmp	r0, #0
 80095d8:	d09b      	beq.n	8009512 <_dtoa_r+0x672>
 80095da:	e7cd      	b.n	8009578 <_dtoa_r+0x6d8>
 80095dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095de:	2a00      	cmp	r2, #0
 80095e0:	f000 80c4 	beq.w	800976c <_dtoa_r+0x8cc>
 80095e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80095e6:	2a01      	cmp	r2, #1
 80095e8:	f300 80a8 	bgt.w	800973c <_dtoa_r+0x89c>
 80095ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80095ee:	2a00      	cmp	r2, #0
 80095f0:	f000 80a0 	beq.w	8009734 <_dtoa_r+0x894>
 80095f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80095f8:	9e08      	ldr	r6, [sp, #32]
 80095fa:	4645      	mov	r5, r8
 80095fc:	9a07      	ldr	r2, [sp, #28]
 80095fe:	2101      	movs	r1, #1
 8009600:	441a      	add	r2, r3
 8009602:	4620      	mov	r0, r4
 8009604:	4498      	add	r8, r3
 8009606:	9207      	str	r2, [sp, #28]
 8009608:	f000 ff18 	bl	800a43c <__i2b>
 800960c:	4607      	mov	r7, r0
 800960e:	2d00      	cmp	r5, #0
 8009610:	dd0b      	ble.n	800962a <_dtoa_r+0x78a>
 8009612:	9b07      	ldr	r3, [sp, #28]
 8009614:	2b00      	cmp	r3, #0
 8009616:	dd08      	ble.n	800962a <_dtoa_r+0x78a>
 8009618:	42ab      	cmp	r3, r5
 800961a:	9a07      	ldr	r2, [sp, #28]
 800961c:	bfa8      	it	ge
 800961e:	462b      	movge	r3, r5
 8009620:	eba8 0803 	sub.w	r8, r8, r3
 8009624:	1aed      	subs	r5, r5, r3
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	9307      	str	r3, [sp, #28]
 800962a:	9b08      	ldr	r3, [sp, #32]
 800962c:	b1fb      	cbz	r3, 800966e <_dtoa_r+0x7ce>
 800962e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009630:	2b00      	cmp	r3, #0
 8009632:	f000 809f 	beq.w	8009774 <_dtoa_r+0x8d4>
 8009636:	2e00      	cmp	r6, #0
 8009638:	dd11      	ble.n	800965e <_dtoa_r+0x7be>
 800963a:	4639      	mov	r1, r7
 800963c:	4632      	mov	r2, r6
 800963e:	4620      	mov	r0, r4
 8009640:	f000 ffb8 	bl	800a5b4 <__pow5mult>
 8009644:	465a      	mov	r2, fp
 8009646:	4601      	mov	r1, r0
 8009648:	4607      	mov	r7, r0
 800964a:	4620      	mov	r0, r4
 800964c:	f000 ff0c 	bl	800a468 <__multiply>
 8009650:	4659      	mov	r1, fp
 8009652:	9009      	str	r0, [sp, #36]	; 0x24
 8009654:	4620      	mov	r0, r4
 8009656:	f000 fdeb 	bl	800a230 <_Bfree>
 800965a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800965c:	469b      	mov	fp, r3
 800965e:	9b08      	ldr	r3, [sp, #32]
 8009660:	1b9a      	subs	r2, r3, r6
 8009662:	d004      	beq.n	800966e <_dtoa_r+0x7ce>
 8009664:	4659      	mov	r1, fp
 8009666:	4620      	mov	r0, r4
 8009668:	f000 ffa4 	bl	800a5b4 <__pow5mult>
 800966c:	4683      	mov	fp, r0
 800966e:	2101      	movs	r1, #1
 8009670:	4620      	mov	r0, r4
 8009672:	f000 fee3 	bl	800a43c <__i2b>
 8009676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009678:	2b00      	cmp	r3, #0
 800967a:	4606      	mov	r6, r0
 800967c:	dd7c      	ble.n	8009778 <_dtoa_r+0x8d8>
 800967e:	461a      	mov	r2, r3
 8009680:	4601      	mov	r1, r0
 8009682:	4620      	mov	r0, r4
 8009684:	f000 ff96 	bl	800a5b4 <__pow5mult>
 8009688:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800968a:	2b01      	cmp	r3, #1
 800968c:	4606      	mov	r6, r0
 800968e:	dd76      	ble.n	800977e <_dtoa_r+0x8de>
 8009690:	2300      	movs	r3, #0
 8009692:	9308      	str	r3, [sp, #32]
 8009694:	6933      	ldr	r3, [r6, #16]
 8009696:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800969a:	6918      	ldr	r0, [r3, #16]
 800969c:	f000 fe7e 	bl	800a39c <__hi0bits>
 80096a0:	f1c0 0020 	rsb	r0, r0, #32
 80096a4:	9b07      	ldr	r3, [sp, #28]
 80096a6:	4418      	add	r0, r3
 80096a8:	f010 001f 	ands.w	r0, r0, #31
 80096ac:	f000 8086 	beq.w	80097bc <_dtoa_r+0x91c>
 80096b0:	f1c0 0320 	rsb	r3, r0, #32
 80096b4:	2b04      	cmp	r3, #4
 80096b6:	dd7f      	ble.n	80097b8 <_dtoa_r+0x918>
 80096b8:	f1c0 001c 	rsb	r0, r0, #28
 80096bc:	9b07      	ldr	r3, [sp, #28]
 80096be:	4403      	add	r3, r0
 80096c0:	4480      	add	r8, r0
 80096c2:	4405      	add	r5, r0
 80096c4:	9307      	str	r3, [sp, #28]
 80096c6:	f1b8 0f00 	cmp.w	r8, #0
 80096ca:	dd05      	ble.n	80096d8 <_dtoa_r+0x838>
 80096cc:	4659      	mov	r1, fp
 80096ce:	4642      	mov	r2, r8
 80096d0:	4620      	mov	r0, r4
 80096d2:	f000 ffc9 	bl	800a668 <__lshift>
 80096d6:	4683      	mov	fp, r0
 80096d8:	9b07      	ldr	r3, [sp, #28]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	dd05      	ble.n	80096ea <_dtoa_r+0x84a>
 80096de:	4631      	mov	r1, r6
 80096e0:	461a      	mov	r2, r3
 80096e2:	4620      	mov	r0, r4
 80096e4:	f000 ffc0 	bl	800a668 <__lshift>
 80096e8:	4606      	mov	r6, r0
 80096ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d069      	beq.n	80097c4 <_dtoa_r+0x924>
 80096f0:	4631      	mov	r1, r6
 80096f2:	4658      	mov	r0, fp
 80096f4:	f001 f824 	bl	800a740 <__mcmp>
 80096f8:	2800      	cmp	r0, #0
 80096fa:	da63      	bge.n	80097c4 <_dtoa_r+0x924>
 80096fc:	2300      	movs	r3, #0
 80096fe:	4659      	mov	r1, fp
 8009700:	220a      	movs	r2, #10
 8009702:	4620      	mov	r0, r4
 8009704:	f000 fdb6 	bl	800a274 <__multadd>
 8009708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800970a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800970e:	4683      	mov	fp, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	f000 818f 	beq.w	8009a34 <_dtoa_r+0xb94>
 8009716:	4639      	mov	r1, r7
 8009718:	2300      	movs	r3, #0
 800971a:	220a      	movs	r2, #10
 800971c:	4620      	mov	r0, r4
 800971e:	f000 fda9 	bl	800a274 <__multadd>
 8009722:	f1b9 0f00 	cmp.w	r9, #0
 8009726:	4607      	mov	r7, r0
 8009728:	f300 808e 	bgt.w	8009848 <_dtoa_r+0x9a8>
 800972c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800972e:	2b02      	cmp	r3, #2
 8009730:	dc50      	bgt.n	80097d4 <_dtoa_r+0x934>
 8009732:	e089      	b.n	8009848 <_dtoa_r+0x9a8>
 8009734:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009736:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800973a:	e75d      	b.n	80095f8 <_dtoa_r+0x758>
 800973c:	9b06      	ldr	r3, [sp, #24]
 800973e:	1e5e      	subs	r6, r3, #1
 8009740:	9b08      	ldr	r3, [sp, #32]
 8009742:	42b3      	cmp	r3, r6
 8009744:	bfbf      	itttt	lt
 8009746:	9b08      	ldrlt	r3, [sp, #32]
 8009748:	9608      	strlt	r6, [sp, #32]
 800974a:	1af2      	sublt	r2, r6, r3
 800974c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800974e:	bfb6      	itet	lt
 8009750:	189b      	addlt	r3, r3, r2
 8009752:	1b9e      	subge	r6, r3, r6
 8009754:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009756:	9b06      	ldr	r3, [sp, #24]
 8009758:	bfb8      	it	lt
 800975a:	2600      	movlt	r6, #0
 800975c:	2b00      	cmp	r3, #0
 800975e:	bfb5      	itete	lt
 8009760:	eba8 0503 	sublt.w	r5, r8, r3
 8009764:	9b06      	ldrge	r3, [sp, #24]
 8009766:	2300      	movlt	r3, #0
 8009768:	4645      	movge	r5, r8
 800976a:	e747      	b.n	80095fc <_dtoa_r+0x75c>
 800976c:	9e08      	ldr	r6, [sp, #32]
 800976e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8009770:	4645      	mov	r5, r8
 8009772:	e74c      	b.n	800960e <_dtoa_r+0x76e>
 8009774:	9a08      	ldr	r2, [sp, #32]
 8009776:	e775      	b.n	8009664 <_dtoa_r+0x7c4>
 8009778:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800977a:	2b01      	cmp	r3, #1
 800977c:	dc18      	bgt.n	80097b0 <_dtoa_r+0x910>
 800977e:	9b04      	ldr	r3, [sp, #16]
 8009780:	b9b3      	cbnz	r3, 80097b0 <_dtoa_r+0x910>
 8009782:	9b05      	ldr	r3, [sp, #20]
 8009784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009788:	b9a3      	cbnz	r3, 80097b4 <_dtoa_r+0x914>
 800978a:	9b05      	ldr	r3, [sp, #20]
 800978c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009790:	0d1b      	lsrs	r3, r3, #20
 8009792:	051b      	lsls	r3, r3, #20
 8009794:	b12b      	cbz	r3, 80097a2 <_dtoa_r+0x902>
 8009796:	9b07      	ldr	r3, [sp, #28]
 8009798:	3301      	adds	r3, #1
 800979a:	9307      	str	r3, [sp, #28]
 800979c:	f108 0801 	add.w	r8, r8, #1
 80097a0:	2301      	movs	r3, #1
 80097a2:	9308      	str	r3, [sp, #32]
 80097a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f47f af74 	bne.w	8009694 <_dtoa_r+0x7f4>
 80097ac:	2001      	movs	r0, #1
 80097ae:	e779      	b.n	80096a4 <_dtoa_r+0x804>
 80097b0:	2300      	movs	r3, #0
 80097b2:	e7f6      	b.n	80097a2 <_dtoa_r+0x902>
 80097b4:	9b04      	ldr	r3, [sp, #16]
 80097b6:	e7f4      	b.n	80097a2 <_dtoa_r+0x902>
 80097b8:	d085      	beq.n	80096c6 <_dtoa_r+0x826>
 80097ba:	4618      	mov	r0, r3
 80097bc:	301c      	adds	r0, #28
 80097be:	e77d      	b.n	80096bc <_dtoa_r+0x81c>
 80097c0:	40240000 	.word	0x40240000
 80097c4:	9b06      	ldr	r3, [sp, #24]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	dc38      	bgt.n	800983c <_dtoa_r+0x99c>
 80097ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80097cc:	2b02      	cmp	r3, #2
 80097ce:	dd35      	ble.n	800983c <_dtoa_r+0x99c>
 80097d0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80097d4:	f1b9 0f00 	cmp.w	r9, #0
 80097d8:	d10d      	bne.n	80097f6 <_dtoa_r+0x956>
 80097da:	4631      	mov	r1, r6
 80097dc:	464b      	mov	r3, r9
 80097de:	2205      	movs	r2, #5
 80097e0:	4620      	mov	r0, r4
 80097e2:	f000 fd47 	bl	800a274 <__multadd>
 80097e6:	4601      	mov	r1, r0
 80097e8:	4606      	mov	r6, r0
 80097ea:	4658      	mov	r0, fp
 80097ec:	f000 ffa8 	bl	800a740 <__mcmp>
 80097f0:	2800      	cmp	r0, #0
 80097f2:	f73f adbd 	bgt.w	8009370 <_dtoa_r+0x4d0>
 80097f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097f8:	9d03      	ldr	r5, [sp, #12]
 80097fa:	ea6f 0a03 	mvn.w	sl, r3
 80097fe:	f04f 0800 	mov.w	r8, #0
 8009802:	4631      	mov	r1, r6
 8009804:	4620      	mov	r0, r4
 8009806:	f000 fd13 	bl	800a230 <_Bfree>
 800980a:	2f00      	cmp	r7, #0
 800980c:	f43f aeb4 	beq.w	8009578 <_dtoa_r+0x6d8>
 8009810:	f1b8 0f00 	cmp.w	r8, #0
 8009814:	d005      	beq.n	8009822 <_dtoa_r+0x982>
 8009816:	45b8      	cmp	r8, r7
 8009818:	d003      	beq.n	8009822 <_dtoa_r+0x982>
 800981a:	4641      	mov	r1, r8
 800981c:	4620      	mov	r0, r4
 800981e:	f000 fd07 	bl	800a230 <_Bfree>
 8009822:	4639      	mov	r1, r7
 8009824:	4620      	mov	r0, r4
 8009826:	f000 fd03 	bl	800a230 <_Bfree>
 800982a:	e6a5      	b.n	8009578 <_dtoa_r+0x6d8>
 800982c:	2600      	movs	r6, #0
 800982e:	4637      	mov	r7, r6
 8009830:	e7e1      	b.n	80097f6 <_dtoa_r+0x956>
 8009832:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8009834:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009838:	4637      	mov	r7, r6
 800983a:	e599      	b.n	8009370 <_dtoa_r+0x4d0>
 800983c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800983e:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8009842:	2b00      	cmp	r3, #0
 8009844:	f000 80fd 	beq.w	8009a42 <_dtoa_r+0xba2>
 8009848:	2d00      	cmp	r5, #0
 800984a:	dd05      	ble.n	8009858 <_dtoa_r+0x9b8>
 800984c:	4639      	mov	r1, r7
 800984e:	462a      	mov	r2, r5
 8009850:	4620      	mov	r0, r4
 8009852:	f000 ff09 	bl	800a668 <__lshift>
 8009856:	4607      	mov	r7, r0
 8009858:	9b08      	ldr	r3, [sp, #32]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d05c      	beq.n	8009918 <_dtoa_r+0xa78>
 800985e:	6879      	ldr	r1, [r7, #4]
 8009860:	4620      	mov	r0, r4
 8009862:	f000 fca5 	bl	800a1b0 <_Balloc>
 8009866:	4605      	mov	r5, r0
 8009868:	b928      	cbnz	r0, 8009876 <_dtoa_r+0x9d6>
 800986a:	4b80      	ldr	r3, [pc, #512]	; (8009a6c <_dtoa_r+0xbcc>)
 800986c:	4602      	mov	r2, r0
 800986e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009872:	f7ff bb2b 	b.w	8008ecc <_dtoa_r+0x2c>
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	3202      	adds	r2, #2
 800987a:	0092      	lsls	r2, r2, #2
 800987c:	f107 010c 	add.w	r1, r7, #12
 8009880:	300c      	adds	r0, #12
 8009882:	f000 fc87 	bl	800a194 <memcpy>
 8009886:	2201      	movs	r2, #1
 8009888:	4629      	mov	r1, r5
 800988a:	4620      	mov	r0, r4
 800988c:	f000 feec 	bl	800a668 <__lshift>
 8009890:	9b03      	ldr	r3, [sp, #12]
 8009892:	3301      	adds	r3, #1
 8009894:	9306      	str	r3, [sp, #24]
 8009896:	9b03      	ldr	r3, [sp, #12]
 8009898:	444b      	add	r3, r9
 800989a:	9309      	str	r3, [sp, #36]	; 0x24
 800989c:	9b04      	ldr	r3, [sp, #16]
 800989e:	f003 0301 	and.w	r3, r3, #1
 80098a2:	46b8      	mov	r8, r7
 80098a4:	9308      	str	r3, [sp, #32]
 80098a6:	4607      	mov	r7, r0
 80098a8:	9b06      	ldr	r3, [sp, #24]
 80098aa:	4631      	mov	r1, r6
 80098ac:	3b01      	subs	r3, #1
 80098ae:	4658      	mov	r0, fp
 80098b0:	9304      	str	r3, [sp, #16]
 80098b2:	f7ff fa67 	bl	8008d84 <quorem>
 80098b6:	4603      	mov	r3, r0
 80098b8:	3330      	adds	r3, #48	; 0x30
 80098ba:	9007      	str	r0, [sp, #28]
 80098bc:	4641      	mov	r1, r8
 80098be:	4658      	mov	r0, fp
 80098c0:	930c      	str	r3, [sp, #48]	; 0x30
 80098c2:	f000 ff3d 	bl	800a740 <__mcmp>
 80098c6:	463a      	mov	r2, r7
 80098c8:	4681      	mov	r9, r0
 80098ca:	4631      	mov	r1, r6
 80098cc:	4620      	mov	r0, r4
 80098ce:	f000 ff53 	bl	800a778 <__mdiff>
 80098d2:	68c2      	ldr	r2, [r0, #12]
 80098d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098d6:	4605      	mov	r5, r0
 80098d8:	bb02      	cbnz	r2, 800991c <_dtoa_r+0xa7c>
 80098da:	4601      	mov	r1, r0
 80098dc:	4658      	mov	r0, fp
 80098de:	f000 ff2f 	bl	800a740 <__mcmp>
 80098e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098e4:	4602      	mov	r2, r0
 80098e6:	4629      	mov	r1, r5
 80098e8:	4620      	mov	r0, r4
 80098ea:	920a      	str	r2, [sp, #40]	; 0x28
 80098ec:	930c      	str	r3, [sp, #48]	; 0x30
 80098ee:	f000 fc9f 	bl	800a230 <_Bfree>
 80098f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80098f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098f6:	9d06      	ldr	r5, [sp, #24]
 80098f8:	ea43 0102 	orr.w	r1, r3, r2
 80098fc:	9b08      	ldr	r3, [sp, #32]
 80098fe:	430b      	orrs	r3, r1
 8009900:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009902:	d10d      	bne.n	8009920 <_dtoa_r+0xa80>
 8009904:	2b39      	cmp	r3, #57	; 0x39
 8009906:	d029      	beq.n	800995c <_dtoa_r+0xabc>
 8009908:	f1b9 0f00 	cmp.w	r9, #0
 800990c:	dd01      	ble.n	8009912 <_dtoa_r+0xa72>
 800990e:	9b07      	ldr	r3, [sp, #28]
 8009910:	3331      	adds	r3, #49	; 0x31
 8009912:	9a04      	ldr	r2, [sp, #16]
 8009914:	7013      	strb	r3, [r2, #0]
 8009916:	e774      	b.n	8009802 <_dtoa_r+0x962>
 8009918:	4638      	mov	r0, r7
 800991a:	e7b9      	b.n	8009890 <_dtoa_r+0x9f0>
 800991c:	2201      	movs	r2, #1
 800991e:	e7e2      	b.n	80098e6 <_dtoa_r+0xa46>
 8009920:	f1b9 0f00 	cmp.w	r9, #0
 8009924:	db06      	blt.n	8009934 <_dtoa_r+0xa94>
 8009926:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009928:	ea41 0909 	orr.w	r9, r1, r9
 800992c:	9908      	ldr	r1, [sp, #32]
 800992e:	ea59 0101 	orrs.w	r1, r9, r1
 8009932:	d120      	bne.n	8009976 <_dtoa_r+0xad6>
 8009934:	2a00      	cmp	r2, #0
 8009936:	ddec      	ble.n	8009912 <_dtoa_r+0xa72>
 8009938:	4659      	mov	r1, fp
 800993a:	2201      	movs	r2, #1
 800993c:	4620      	mov	r0, r4
 800993e:	9306      	str	r3, [sp, #24]
 8009940:	f000 fe92 	bl	800a668 <__lshift>
 8009944:	4631      	mov	r1, r6
 8009946:	4683      	mov	fp, r0
 8009948:	f000 fefa 	bl	800a740 <__mcmp>
 800994c:	2800      	cmp	r0, #0
 800994e:	9b06      	ldr	r3, [sp, #24]
 8009950:	dc02      	bgt.n	8009958 <_dtoa_r+0xab8>
 8009952:	d1de      	bne.n	8009912 <_dtoa_r+0xa72>
 8009954:	07da      	lsls	r2, r3, #31
 8009956:	d5dc      	bpl.n	8009912 <_dtoa_r+0xa72>
 8009958:	2b39      	cmp	r3, #57	; 0x39
 800995a:	d1d8      	bne.n	800990e <_dtoa_r+0xa6e>
 800995c:	9a04      	ldr	r2, [sp, #16]
 800995e:	2339      	movs	r3, #57	; 0x39
 8009960:	7013      	strb	r3, [r2, #0]
 8009962:	462b      	mov	r3, r5
 8009964:	461d      	mov	r5, r3
 8009966:	3b01      	subs	r3, #1
 8009968:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800996c:	2a39      	cmp	r2, #57	; 0x39
 800996e:	d050      	beq.n	8009a12 <_dtoa_r+0xb72>
 8009970:	3201      	adds	r2, #1
 8009972:	701a      	strb	r2, [r3, #0]
 8009974:	e745      	b.n	8009802 <_dtoa_r+0x962>
 8009976:	2a00      	cmp	r2, #0
 8009978:	dd03      	ble.n	8009982 <_dtoa_r+0xae2>
 800997a:	2b39      	cmp	r3, #57	; 0x39
 800997c:	d0ee      	beq.n	800995c <_dtoa_r+0xabc>
 800997e:	3301      	adds	r3, #1
 8009980:	e7c7      	b.n	8009912 <_dtoa_r+0xa72>
 8009982:	9a06      	ldr	r2, [sp, #24]
 8009984:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009986:	f802 3c01 	strb.w	r3, [r2, #-1]
 800998a:	428a      	cmp	r2, r1
 800998c:	d02a      	beq.n	80099e4 <_dtoa_r+0xb44>
 800998e:	4659      	mov	r1, fp
 8009990:	2300      	movs	r3, #0
 8009992:	220a      	movs	r2, #10
 8009994:	4620      	mov	r0, r4
 8009996:	f000 fc6d 	bl	800a274 <__multadd>
 800999a:	45b8      	cmp	r8, r7
 800999c:	4683      	mov	fp, r0
 800999e:	f04f 0300 	mov.w	r3, #0
 80099a2:	f04f 020a 	mov.w	r2, #10
 80099a6:	4641      	mov	r1, r8
 80099a8:	4620      	mov	r0, r4
 80099aa:	d107      	bne.n	80099bc <_dtoa_r+0xb1c>
 80099ac:	f000 fc62 	bl	800a274 <__multadd>
 80099b0:	4680      	mov	r8, r0
 80099b2:	4607      	mov	r7, r0
 80099b4:	9b06      	ldr	r3, [sp, #24]
 80099b6:	3301      	adds	r3, #1
 80099b8:	9306      	str	r3, [sp, #24]
 80099ba:	e775      	b.n	80098a8 <_dtoa_r+0xa08>
 80099bc:	f000 fc5a 	bl	800a274 <__multadd>
 80099c0:	4639      	mov	r1, r7
 80099c2:	4680      	mov	r8, r0
 80099c4:	2300      	movs	r3, #0
 80099c6:	220a      	movs	r2, #10
 80099c8:	4620      	mov	r0, r4
 80099ca:	f000 fc53 	bl	800a274 <__multadd>
 80099ce:	4607      	mov	r7, r0
 80099d0:	e7f0      	b.n	80099b4 <_dtoa_r+0xb14>
 80099d2:	f1b9 0f00 	cmp.w	r9, #0
 80099d6:	9a03      	ldr	r2, [sp, #12]
 80099d8:	bfcc      	ite	gt
 80099da:	464d      	movgt	r5, r9
 80099dc:	2501      	movle	r5, #1
 80099de:	4415      	add	r5, r2
 80099e0:	f04f 0800 	mov.w	r8, #0
 80099e4:	4659      	mov	r1, fp
 80099e6:	2201      	movs	r2, #1
 80099e8:	4620      	mov	r0, r4
 80099ea:	9306      	str	r3, [sp, #24]
 80099ec:	f000 fe3c 	bl	800a668 <__lshift>
 80099f0:	4631      	mov	r1, r6
 80099f2:	4683      	mov	fp, r0
 80099f4:	f000 fea4 	bl	800a740 <__mcmp>
 80099f8:	2800      	cmp	r0, #0
 80099fa:	dcb2      	bgt.n	8009962 <_dtoa_r+0xac2>
 80099fc:	d102      	bne.n	8009a04 <_dtoa_r+0xb64>
 80099fe:	9b06      	ldr	r3, [sp, #24]
 8009a00:	07db      	lsls	r3, r3, #31
 8009a02:	d4ae      	bmi.n	8009962 <_dtoa_r+0xac2>
 8009a04:	462b      	mov	r3, r5
 8009a06:	461d      	mov	r5, r3
 8009a08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a0c:	2a30      	cmp	r2, #48	; 0x30
 8009a0e:	d0fa      	beq.n	8009a06 <_dtoa_r+0xb66>
 8009a10:	e6f7      	b.n	8009802 <_dtoa_r+0x962>
 8009a12:	9a03      	ldr	r2, [sp, #12]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d1a5      	bne.n	8009964 <_dtoa_r+0xac4>
 8009a18:	f10a 0a01 	add.w	sl, sl, #1
 8009a1c:	2331      	movs	r3, #49	; 0x31
 8009a1e:	e779      	b.n	8009914 <_dtoa_r+0xa74>
 8009a20:	4b13      	ldr	r3, [pc, #76]	; (8009a70 <_dtoa_r+0xbd0>)
 8009a22:	f7ff baac 	b.w	8008f7e <_dtoa_r+0xde>
 8009a26:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f47f aa83 	bne.w	8008f34 <_dtoa_r+0x94>
 8009a2e:	4b11      	ldr	r3, [pc, #68]	; (8009a74 <_dtoa_r+0xbd4>)
 8009a30:	f7ff baa5 	b.w	8008f7e <_dtoa_r+0xde>
 8009a34:	f1b9 0f00 	cmp.w	r9, #0
 8009a38:	dc03      	bgt.n	8009a42 <_dtoa_r+0xba2>
 8009a3a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009a3c:	2b02      	cmp	r3, #2
 8009a3e:	f73f aec9 	bgt.w	80097d4 <_dtoa_r+0x934>
 8009a42:	9d03      	ldr	r5, [sp, #12]
 8009a44:	4631      	mov	r1, r6
 8009a46:	4658      	mov	r0, fp
 8009a48:	f7ff f99c 	bl	8008d84 <quorem>
 8009a4c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009a50:	f805 3b01 	strb.w	r3, [r5], #1
 8009a54:	9a03      	ldr	r2, [sp, #12]
 8009a56:	1aaa      	subs	r2, r5, r2
 8009a58:	4591      	cmp	r9, r2
 8009a5a:	ddba      	ble.n	80099d2 <_dtoa_r+0xb32>
 8009a5c:	4659      	mov	r1, fp
 8009a5e:	2300      	movs	r3, #0
 8009a60:	220a      	movs	r2, #10
 8009a62:	4620      	mov	r0, r4
 8009a64:	f000 fc06 	bl	800a274 <__multadd>
 8009a68:	4683      	mov	fp, r0
 8009a6a:	e7eb      	b.n	8009a44 <_dtoa_r+0xba4>
 8009a6c:	0800dd64 	.word	0x0800dd64
 8009a70:	0800db64 	.word	0x0800db64
 8009a74:	0800dce1 	.word	0x0800dce1

08009a78 <rshift>:
 8009a78:	6903      	ldr	r3, [r0, #16]
 8009a7a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009a7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a82:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009a86:	f100 0414 	add.w	r4, r0, #20
 8009a8a:	dd45      	ble.n	8009b18 <rshift+0xa0>
 8009a8c:	f011 011f 	ands.w	r1, r1, #31
 8009a90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009a94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009a98:	d10c      	bne.n	8009ab4 <rshift+0x3c>
 8009a9a:	f100 0710 	add.w	r7, r0, #16
 8009a9e:	4629      	mov	r1, r5
 8009aa0:	42b1      	cmp	r1, r6
 8009aa2:	d334      	bcc.n	8009b0e <rshift+0x96>
 8009aa4:	1a9b      	subs	r3, r3, r2
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	1eea      	subs	r2, r5, #3
 8009aaa:	4296      	cmp	r6, r2
 8009aac:	bf38      	it	cc
 8009aae:	2300      	movcc	r3, #0
 8009ab0:	4423      	add	r3, r4
 8009ab2:	e015      	b.n	8009ae0 <rshift+0x68>
 8009ab4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009ab8:	f1c1 0820 	rsb	r8, r1, #32
 8009abc:	40cf      	lsrs	r7, r1
 8009abe:	f105 0e04 	add.w	lr, r5, #4
 8009ac2:	46a1      	mov	r9, r4
 8009ac4:	4576      	cmp	r6, lr
 8009ac6:	46f4      	mov	ip, lr
 8009ac8:	d815      	bhi.n	8009af6 <rshift+0x7e>
 8009aca:	1a9b      	subs	r3, r3, r2
 8009acc:	009a      	lsls	r2, r3, #2
 8009ace:	3a04      	subs	r2, #4
 8009ad0:	3501      	adds	r5, #1
 8009ad2:	42ae      	cmp	r6, r5
 8009ad4:	bf38      	it	cc
 8009ad6:	2200      	movcc	r2, #0
 8009ad8:	18a3      	adds	r3, r4, r2
 8009ada:	50a7      	str	r7, [r4, r2]
 8009adc:	b107      	cbz	r7, 8009ae0 <rshift+0x68>
 8009ade:	3304      	adds	r3, #4
 8009ae0:	1b1a      	subs	r2, r3, r4
 8009ae2:	42a3      	cmp	r3, r4
 8009ae4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009ae8:	bf08      	it	eq
 8009aea:	2300      	moveq	r3, #0
 8009aec:	6102      	str	r2, [r0, #16]
 8009aee:	bf08      	it	eq
 8009af0:	6143      	streq	r3, [r0, #20]
 8009af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009af6:	f8dc c000 	ldr.w	ip, [ip]
 8009afa:	fa0c fc08 	lsl.w	ip, ip, r8
 8009afe:	ea4c 0707 	orr.w	r7, ip, r7
 8009b02:	f849 7b04 	str.w	r7, [r9], #4
 8009b06:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b0a:	40cf      	lsrs	r7, r1
 8009b0c:	e7da      	b.n	8009ac4 <rshift+0x4c>
 8009b0e:	f851 cb04 	ldr.w	ip, [r1], #4
 8009b12:	f847 cf04 	str.w	ip, [r7, #4]!
 8009b16:	e7c3      	b.n	8009aa0 <rshift+0x28>
 8009b18:	4623      	mov	r3, r4
 8009b1a:	e7e1      	b.n	8009ae0 <rshift+0x68>

08009b1c <__hexdig_fun>:
 8009b1c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009b20:	2b09      	cmp	r3, #9
 8009b22:	d802      	bhi.n	8009b2a <__hexdig_fun+0xe>
 8009b24:	3820      	subs	r0, #32
 8009b26:	b2c0      	uxtb	r0, r0
 8009b28:	4770      	bx	lr
 8009b2a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009b2e:	2b05      	cmp	r3, #5
 8009b30:	d801      	bhi.n	8009b36 <__hexdig_fun+0x1a>
 8009b32:	3847      	subs	r0, #71	; 0x47
 8009b34:	e7f7      	b.n	8009b26 <__hexdig_fun+0xa>
 8009b36:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009b3a:	2b05      	cmp	r3, #5
 8009b3c:	d801      	bhi.n	8009b42 <__hexdig_fun+0x26>
 8009b3e:	3827      	subs	r0, #39	; 0x27
 8009b40:	e7f1      	b.n	8009b26 <__hexdig_fun+0xa>
 8009b42:	2000      	movs	r0, #0
 8009b44:	4770      	bx	lr
	...

08009b48 <__gethex>:
 8009b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b4c:	ed2d 8b02 	vpush	{d8}
 8009b50:	b089      	sub	sp, #36	; 0x24
 8009b52:	ee08 0a10 	vmov	s16, r0
 8009b56:	9304      	str	r3, [sp, #16]
 8009b58:	4bbc      	ldr	r3, [pc, #752]	; (8009e4c <__gethex+0x304>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	9301      	str	r3, [sp, #4]
 8009b5e:	4618      	mov	r0, r3
 8009b60:	468b      	mov	fp, r1
 8009b62:	4690      	mov	r8, r2
 8009b64:	f7f6 fb34 	bl	80001d0 <strlen>
 8009b68:	9b01      	ldr	r3, [sp, #4]
 8009b6a:	f8db 2000 	ldr.w	r2, [fp]
 8009b6e:	4403      	add	r3, r0
 8009b70:	4682      	mov	sl, r0
 8009b72:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009b76:	9305      	str	r3, [sp, #20]
 8009b78:	1c93      	adds	r3, r2, #2
 8009b7a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009b7e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009b82:	32fe      	adds	r2, #254	; 0xfe
 8009b84:	18d1      	adds	r1, r2, r3
 8009b86:	461f      	mov	r7, r3
 8009b88:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009b8c:	9100      	str	r1, [sp, #0]
 8009b8e:	2830      	cmp	r0, #48	; 0x30
 8009b90:	d0f8      	beq.n	8009b84 <__gethex+0x3c>
 8009b92:	f7ff ffc3 	bl	8009b1c <__hexdig_fun>
 8009b96:	4604      	mov	r4, r0
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	d13a      	bne.n	8009c12 <__gethex+0xca>
 8009b9c:	9901      	ldr	r1, [sp, #4]
 8009b9e:	4652      	mov	r2, sl
 8009ba0:	4638      	mov	r0, r7
 8009ba2:	f001 f9e3 	bl	800af6c <strncmp>
 8009ba6:	4605      	mov	r5, r0
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	d168      	bne.n	8009c7e <__gethex+0x136>
 8009bac:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009bb0:	eb07 060a 	add.w	r6, r7, sl
 8009bb4:	f7ff ffb2 	bl	8009b1c <__hexdig_fun>
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d062      	beq.n	8009c82 <__gethex+0x13a>
 8009bbc:	4633      	mov	r3, r6
 8009bbe:	7818      	ldrb	r0, [r3, #0]
 8009bc0:	2830      	cmp	r0, #48	; 0x30
 8009bc2:	461f      	mov	r7, r3
 8009bc4:	f103 0301 	add.w	r3, r3, #1
 8009bc8:	d0f9      	beq.n	8009bbe <__gethex+0x76>
 8009bca:	f7ff ffa7 	bl	8009b1c <__hexdig_fun>
 8009bce:	2301      	movs	r3, #1
 8009bd0:	fab0 f480 	clz	r4, r0
 8009bd4:	0964      	lsrs	r4, r4, #5
 8009bd6:	4635      	mov	r5, r6
 8009bd8:	9300      	str	r3, [sp, #0]
 8009bda:	463a      	mov	r2, r7
 8009bdc:	4616      	mov	r6, r2
 8009bde:	3201      	adds	r2, #1
 8009be0:	7830      	ldrb	r0, [r6, #0]
 8009be2:	f7ff ff9b 	bl	8009b1c <__hexdig_fun>
 8009be6:	2800      	cmp	r0, #0
 8009be8:	d1f8      	bne.n	8009bdc <__gethex+0x94>
 8009bea:	9901      	ldr	r1, [sp, #4]
 8009bec:	4652      	mov	r2, sl
 8009bee:	4630      	mov	r0, r6
 8009bf0:	f001 f9bc 	bl	800af6c <strncmp>
 8009bf4:	b980      	cbnz	r0, 8009c18 <__gethex+0xd0>
 8009bf6:	b94d      	cbnz	r5, 8009c0c <__gethex+0xc4>
 8009bf8:	eb06 050a 	add.w	r5, r6, sl
 8009bfc:	462a      	mov	r2, r5
 8009bfe:	4616      	mov	r6, r2
 8009c00:	3201      	adds	r2, #1
 8009c02:	7830      	ldrb	r0, [r6, #0]
 8009c04:	f7ff ff8a 	bl	8009b1c <__hexdig_fun>
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	d1f8      	bne.n	8009bfe <__gethex+0xb6>
 8009c0c:	1bad      	subs	r5, r5, r6
 8009c0e:	00ad      	lsls	r5, r5, #2
 8009c10:	e004      	b.n	8009c1c <__gethex+0xd4>
 8009c12:	2400      	movs	r4, #0
 8009c14:	4625      	mov	r5, r4
 8009c16:	e7e0      	b.n	8009bda <__gethex+0x92>
 8009c18:	2d00      	cmp	r5, #0
 8009c1a:	d1f7      	bne.n	8009c0c <__gethex+0xc4>
 8009c1c:	7833      	ldrb	r3, [r6, #0]
 8009c1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009c22:	2b50      	cmp	r3, #80	; 0x50
 8009c24:	d13b      	bne.n	8009c9e <__gethex+0x156>
 8009c26:	7873      	ldrb	r3, [r6, #1]
 8009c28:	2b2b      	cmp	r3, #43	; 0x2b
 8009c2a:	d02c      	beq.n	8009c86 <__gethex+0x13e>
 8009c2c:	2b2d      	cmp	r3, #45	; 0x2d
 8009c2e:	d02e      	beq.n	8009c8e <__gethex+0x146>
 8009c30:	1c71      	adds	r1, r6, #1
 8009c32:	f04f 0900 	mov.w	r9, #0
 8009c36:	7808      	ldrb	r0, [r1, #0]
 8009c38:	f7ff ff70 	bl	8009b1c <__hexdig_fun>
 8009c3c:	1e43      	subs	r3, r0, #1
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	2b18      	cmp	r3, #24
 8009c42:	d82c      	bhi.n	8009c9e <__gethex+0x156>
 8009c44:	f1a0 0210 	sub.w	r2, r0, #16
 8009c48:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009c4c:	f7ff ff66 	bl	8009b1c <__hexdig_fun>
 8009c50:	1e43      	subs	r3, r0, #1
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	2b18      	cmp	r3, #24
 8009c56:	d91d      	bls.n	8009c94 <__gethex+0x14c>
 8009c58:	f1b9 0f00 	cmp.w	r9, #0
 8009c5c:	d000      	beq.n	8009c60 <__gethex+0x118>
 8009c5e:	4252      	negs	r2, r2
 8009c60:	4415      	add	r5, r2
 8009c62:	f8cb 1000 	str.w	r1, [fp]
 8009c66:	b1e4      	cbz	r4, 8009ca2 <__gethex+0x15a>
 8009c68:	9b00      	ldr	r3, [sp, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	bf14      	ite	ne
 8009c6e:	2700      	movne	r7, #0
 8009c70:	2706      	moveq	r7, #6
 8009c72:	4638      	mov	r0, r7
 8009c74:	b009      	add	sp, #36	; 0x24
 8009c76:	ecbd 8b02 	vpop	{d8}
 8009c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c7e:	463e      	mov	r6, r7
 8009c80:	4625      	mov	r5, r4
 8009c82:	2401      	movs	r4, #1
 8009c84:	e7ca      	b.n	8009c1c <__gethex+0xd4>
 8009c86:	f04f 0900 	mov.w	r9, #0
 8009c8a:	1cb1      	adds	r1, r6, #2
 8009c8c:	e7d3      	b.n	8009c36 <__gethex+0xee>
 8009c8e:	f04f 0901 	mov.w	r9, #1
 8009c92:	e7fa      	b.n	8009c8a <__gethex+0x142>
 8009c94:	230a      	movs	r3, #10
 8009c96:	fb03 0202 	mla	r2, r3, r2, r0
 8009c9a:	3a10      	subs	r2, #16
 8009c9c:	e7d4      	b.n	8009c48 <__gethex+0x100>
 8009c9e:	4631      	mov	r1, r6
 8009ca0:	e7df      	b.n	8009c62 <__gethex+0x11a>
 8009ca2:	1bf3      	subs	r3, r6, r7
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	4621      	mov	r1, r4
 8009ca8:	2b07      	cmp	r3, #7
 8009caa:	dc0b      	bgt.n	8009cc4 <__gethex+0x17c>
 8009cac:	ee18 0a10 	vmov	r0, s16
 8009cb0:	f000 fa7e 	bl	800a1b0 <_Balloc>
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	b940      	cbnz	r0, 8009cca <__gethex+0x182>
 8009cb8:	4b65      	ldr	r3, [pc, #404]	; (8009e50 <__gethex+0x308>)
 8009cba:	4602      	mov	r2, r0
 8009cbc:	21de      	movs	r1, #222	; 0xde
 8009cbe:	4865      	ldr	r0, [pc, #404]	; (8009e54 <__gethex+0x30c>)
 8009cc0:	f001 f974 	bl	800afac <__assert_func>
 8009cc4:	3101      	adds	r1, #1
 8009cc6:	105b      	asrs	r3, r3, #1
 8009cc8:	e7ee      	b.n	8009ca8 <__gethex+0x160>
 8009cca:	f100 0914 	add.w	r9, r0, #20
 8009cce:	f04f 0b00 	mov.w	fp, #0
 8009cd2:	f1ca 0301 	rsb	r3, sl, #1
 8009cd6:	f8cd 9008 	str.w	r9, [sp, #8]
 8009cda:	f8cd b000 	str.w	fp, [sp]
 8009cde:	9306      	str	r3, [sp, #24]
 8009ce0:	42b7      	cmp	r7, r6
 8009ce2:	d340      	bcc.n	8009d66 <__gethex+0x21e>
 8009ce4:	9802      	ldr	r0, [sp, #8]
 8009ce6:	9b00      	ldr	r3, [sp, #0]
 8009ce8:	f840 3b04 	str.w	r3, [r0], #4
 8009cec:	eba0 0009 	sub.w	r0, r0, r9
 8009cf0:	1080      	asrs	r0, r0, #2
 8009cf2:	0146      	lsls	r6, r0, #5
 8009cf4:	6120      	str	r0, [r4, #16]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f000 fb50 	bl	800a39c <__hi0bits>
 8009cfc:	1a30      	subs	r0, r6, r0
 8009cfe:	f8d8 6000 	ldr.w	r6, [r8]
 8009d02:	42b0      	cmp	r0, r6
 8009d04:	dd63      	ble.n	8009dce <__gethex+0x286>
 8009d06:	1b87      	subs	r7, r0, r6
 8009d08:	4639      	mov	r1, r7
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f000 fee1 	bl	800aad2 <__any_on>
 8009d10:	4682      	mov	sl, r0
 8009d12:	b1a8      	cbz	r0, 8009d40 <__gethex+0x1f8>
 8009d14:	1e7b      	subs	r3, r7, #1
 8009d16:	1159      	asrs	r1, r3, #5
 8009d18:	f003 021f 	and.w	r2, r3, #31
 8009d1c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009d20:	f04f 0a01 	mov.w	sl, #1
 8009d24:	fa0a f202 	lsl.w	r2, sl, r2
 8009d28:	420a      	tst	r2, r1
 8009d2a:	d009      	beq.n	8009d40 <__gethex+0x1f8>
 8009d2c:	4553      	cmp	r3, sl
 8009d2e:	dd05      	ble.n	8009d3c <__gethex+0x1f4>
 8009d30:	1eb9      	subs	r1, r7, #2
 8009d32:	4620      	mov	r0, r4
 8009d34:	f000 fecd 	bl	800aad2 <__any_on>
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	d145      	bne.n	8009dc8 <__gethex+0x280>
 8009d3c:	f04f 0a02 	mov.w	sl, #2
 8009d40:	4639      	mov	r1, r7
 8009d42:	4620      	mov	r0, r4
 8009d44:	f7ff fe98 	bl	8009a78 <rshift>
 8009d48:	443d      	add	r5, r7
 8009d4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d4e:	42ab      	cmp	r3, r5
 8009d50:	da4c      	bge.n	8009dec <__gethex+0x2a4>
 8009d52:	ee18 0a10 	vmov	r0, s16
 8009d56:	4621      	mov	r1, r4
 8009d58:	f000 fa6a 	bl	800a230 <_Bfree>
 8009d5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d5e:	2300      	movs	r3, #0
 8009d60:	6013      	str	r3, [r2, #0]
 8009d62:	27a3      	movs	r7, #163	; 0xa3
 8009d64:	e785      	b.n	8009c72 <__gethex+0x12a>
 8009d66:	1e73      	subs	r3, r6, #1
 8009d68:	9a05      	ldr	r2, [sp, #20]
 8009d6a:	9303      	str	r3, [sp, #12]
 8009d6c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d019      	beq.n	8009da8 <__gethex+0x260>
 8009d74:	f1bb 0f20 	cmp.w	fp, #32
 8009d78:	d107      	bne.n	8009d8a <__gethex+0x242>
 8009d7a:	9b02      	ldr	r3, [sp, #8]
 8009d7c:	9a00      	ldr	r2, [sp, #0]
 8009d7e:	f843 2b04 	str.w	r2, [r3], #4
 8009d82:	9302      	str	r3, [sp, #8]
 8009d84:	2300      	movs	r3, #0
 8009d86:	9300      	str	r3, [sp, #0]
 8009d88:	469b      	mov	fp, r3
 8009d8a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009d8e:	f7ff fec5 	bl	8009b1c <__hexdig_fun>
 8009d92:	9b00      	ldr	r3, [sp, #0]
 8009d94:	f000 000f 	and.w	r0, r0, #15
 8009d98:	fa00 f00b 	lsl.w	r0, r0, fp
 8009d9c:	4303      	orrs	r3, r0
 8009d9e:	9300      	str	r3, [sp, #0]
 8009da0:	f10b 0b04 	add.w	fp, fp, #4
 8009da4:	9b03      	ldr	r3, [sp, #12]
 8009da6:	e00d      	b.n	8009dc4 <__gethex+0x27c>
 8009da8:	9b03      	ldr	r3, [sp, #12]
 8009daa:	9a06      	ldr	r2, [sp, #24]
 8009dac:	4413      	add	r3, r2
 8009dae:	42bb      	cmp	r3, r7
 8009db0:	d3e0      	bcc.n	8009d74 <__gethex+0x22c>
 8009db2:	4618      	mov	r0, r3
 8009db4:	9901      	ldr	r1, [sp, #4]
 8009db6:	9307      	str	r3, [sp, #28]
 8009db8:	4652      	mov	r2, sl
 8009dba:	f001 f8d7 	bl	800af6c <strncmp>
 8009dbe:	9b07      	ldr	r3, [sp, #28]
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	d1d7      	bne.n	8009d74 <__gethex+0x22c>
 8009dc4:	461e      	mov	r6, r3
 8009dc6:	e78b      	b.n	8009ce0 <__gethex+0x198>
 8009dc8:	f04f 0a03 	mov.w	sl, #3
 8009dcc:	e7b8      	b.n	8009d40 <__gethex+0x1f8>
 8009dce:	da0a      	bge.n	8009de6 <__gethex+0x29e>
 8009dd0:	1a37      	subs	r7, r6, r0
 8009dd2:	4621      	mov	r1, r4
 8009dd4:	ee18 0a10 	vmov	r0, s16
 8009dd8:	463a      	mov	r2, r7
 8009dda:	f000 fc45 	bl	800a668 <__lshift>
 8009dde:	1bed      	subs	r5, r5, r7
 8009de0:	4604      	mov	r4, r0
 8009de2:	f100 0914 	add.w	r9, r0, #20
 8009de6:	f04f 0a00 	mov.w	sl, #0
 8009dea:	e7ae      	b.n	8009d4a <__gethex+0x202>
 8009dec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009df0:	42a8      	cmp	r0, r5
 8009df2:	dd72      	ble.n	8009eda <__gethex+0x392>
 8009df4:	1b45      	subs	r5, r0, r5
 8009df6:	42ae      	cmp	r6, r5
 8009df8:	dc36      	bgt.n	8009e68 <__gethex+0x320>
 8009dfa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	d02a      	beq.n	8009e58 <__gethex+0x310>
 8009e02:	2b03      	cmp	r3, #3
 8009e04:	d02c      	beq.n	8009e60 <__gethex+0x318>
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d115      	bne.n	8009e36 <__gethex+0x2ee>
 8009e0a:	42ae      	cmp	r6, r5
 8009e0c:	d113      	bne.n	8009e36 <__gethex+0x2ee>
 8009e0e:	2e01      	cmp	r6, #1
 8009e10:	d10b      	bne.n	8009e2a <__gethex+0x2e2>
 8009e12:	9a04      	ldr	r2, [sp, #16]
 8009e14:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009e18:	6013      	str	r3, [r2, #0]
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	6123      	str	r3, [r4, #16]
 8009e1e:	f8c9 3000 	str.w	r3, [r9]
 8009e22:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e24:	2762      	movs	r7, #98	; 0x62
 8009e26:	601c      	str	r4, [r3, #0]
 8009e28:	e723      	b.n	8009c72 <__gethex+0x12a>
 8009e2a:	1e71      	subs	r1, r6, #1
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f000 fe50 	bl	800aad2 <__any_on>
 8009e32:	2800      	cmp	r0, #0
 8009e34:	d1ed      	bne.n	8009e12 <__gethex+0x2ca>
 8009e36:	ee18 0a10 	vmov	r0, s16
 8009e3a:	4621      	mov	r1, r4
 8009e3c:	f000 f9f8 	bl	800a230 <_Bfree>
 8009e40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e42:	2300      	movs	r3, #0
 8009e44:	6013      	str	r3, [r2, #0]
 8009e46:	2750      	movs	r7, #80	; 0x50
 8009e48:	e713      	b.n	8009c72 <__gethex+0x12a>
 8009e4a:	bf00      	nop
 8009e4c:	0800dde0 	.word	0x0800dde0
 8009e50:	0800dd64 	.word	0x0800dd64
 8009e54:	0800dd75 	.word	0x0800dd75
 8009e58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d1eb      	bne.n	8009e36 <__gethex+0x2ee>
 8009e5e:	e7d8      	b.n	8009e12 <__gethex+0x2ca>
 8009e60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d1d5      	bne.n	8009e12 <__gethex+0x2ca>
 8009e66:	e7e6      	b.n	8009e36 <__gethex+0x2ee>
 8009e68:	1e6f      	subs	r7, r5, #1
 8009e6a:	f1ba 0f00 	cmp.w	sl, #0
 8009e6e:	d131      	bne.n	8009ed4 <__gethex+0x38c>
 8009e70:	b127      	cbz	r7, 8009e7c <__gethex+0x334>
 8009e72:	4639      	mov	r1, r7
 8009e74:	4620      	mov	r0, r4
 8009e76:	f000 fe2c 	bl	800aad2 <__any_on>
 8009e7a:	4682      	mov	sl, r0
 8009e7c:	117b      	asrs	r3, r7, #5
 8009e7e:	2101      	movs	r1, #1
 8009e80:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009e84:	f007 071f 	and.w	r7, r7, #31
 8009e88:	fa01 f707 	lsl.w	r7, r1, r7
 8009e8c:	421f      	tst	r7, r3
 8009e8e:	4629      	mov	r1, r5
 8009e90:	4620      	mov	r0, r4
 8009e92:	bf18      	it	ne
 8009e94:	f04a 0a02 	orrne.w	sl, sl, #2
 8009e98:	1b76      	subs	r6, r6, r5
 8009e9a:	f7ff fded 	bl	8009a78 <rshift>
 8009e9e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009ea2:	2702      	movs	r7, #2
 8009ea4:	f1ba 0f00 	cmp.w	sl, #0
 8009ea8:	d048      	beq.n	8009f3c <__gethex+0x3f4>
 8009eaa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009eae:	2b02      	cmp	r3, #2
 8009eb0:	d015      	beq.n	8009ede <__gethex+0x396>
 8009eb2:	2b03      	cmp	r3, #3
 8009eb4:	d017      	beq.n	8009ee6 <__gethex+0x39e>
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d109      	bne.n	8009ece <__gethex+0x386>
 8009eba:	f01a 0f02 	tst.w	sl, #2
 8009ebe:	d006      	beq.n	8009ece <__gethex+0x386>
 8009ec0:	f8d9 0000 	ldr.w	r0, [r9]
 8009ec4:	ea4a 0a00 	orr.w	sl, sl, r0
 8009ec8:	f01a 0f01 	tst.w	sl, #1
 8009ecc:	d10e      	bne.n	8009eec <__gethex+0x3a4>
 8009ece:	f047 0710 	orr.w	r7, r7, #16
 8009ed2:	e033      	b.n	8009f3c <__gethex+0x3f4>
 8009ed4:	f04f 0a01 	mov.w	sl, #1
 8009ed8:	e7d0      	b.n	8009e7c <__gethex+0x334>
 8009eda:	2701      	movs	r7, #1
 8009edc:	e7e2      	b.n	8009ea4 <__gethex+0x35c>
 8009ede:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ee0:	f1c3 0301 	rsb	r3, r3, #1
 8009ee4:	9315      	str	r3, [sp, #84]	; 0x54
 8009ee6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d0f0      	beq.n	8009ece <__gethex+0x386>
 8009eec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009ef0:	f104 0314 	add.w	r3, r4, #20
 8009ef4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009ef8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009efc:	f04f 0c00 	mov.w	ip, #0
 8009f00:	4618      	mov	r0, r3
 8009f02:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f06:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009f0a:	d01c      	beq.n	8009f46 <__gethex+0x3fe>
 8009f0c:	3201      	adds	r2, #1
 8009f0e:	6002      	str	r2, [r0, #0]
 8009f10:	2f02      	cmp	r7, #2
 8009f12:	f104 0314 	add.w	r3, r4, #20
 8009f16:	d13f      	bne.n	8009f98 <__gethex+0x450>
 8009f18:	f8d8 2000 	ldr.w	r2, [r8]
 8009f1c:	3a01      	subs	r2, #1
 8009f1e:	42b2      	cmp	r2, r6
 8009f20:	d10a      	bne.n	8009f38 <__gethex+0x3f0>
 8009f22:	1171      	asrs	r1, r6, #5
 8009f24:	2201      	movs	r2, #1
 8009f26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009f2a:	f006 061f 	and.w	r6, r6, #31
 8009f2e:	fa02 f606 	lsl.w	r6, r2, r6
 8009f32:	421e      	tst	r6, r3
 8009f34:	bf18      	it	ne
 8009f36:	4617      	movne	r7, r2
 8009f38:	f047 0720 	orr.w	r7, r7, #32
 8009f3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f3e:	601c      	str	r4, [r3, #0]
 8009f40:	9b04      	ldr	r3, [sp, #16]
 8009f42:	601d      	str	r5, [r3, #0]
 8009f44:	e695      	b.n	8009c72 <__gethex+0x12a>
 8009f46:	4299      	cmp	r1, r3
 8009f48:	f843 cc04 	str.w	ip, [r3, #-4]
 8009f4c:	d8d8      	bhi.n	8009f00 <__gethex+0x3b8>
 8009f4e:	68a3      	ldr	r3, [r4, #8]
 8009f50:	459b      	cmp	fp, r3
 8009f52:	db19      	blt.n	8009f88 <__gethex+0x440>
 8009f54:	6861      	ldr	r1, [r4, #4]
 8009f56:	ee18 0a10 	vmov	r0, s16
 8009f5a:	3101      	adds	r1, #1
 8009f5c:	f000 f928 	bl	800a1b0 <_Balloc>
 8009f60:	4681      	mov	r9, r0
 8009f62:	b918      	cbnz	r0, 8009f6c <__gethex+0x424>
 8009f64:	4b1a      	ldr	r3, [pc, #104]	; (8009fd0 <__gethex+0x488>)
 8009f66:	4602      	mov	r2, r0
 8009f68:	2184      	movs	r1, #132	; 0x84
 8009f6a:	e6a8      	b.n	8009cbe <__gethex+0x176>
 8009f6c:	6922      	ldr	r2, [r4, #16]
 8009f6e:	3202      	adds	r2, #2
 8009f70:	f104 010c 	add.w	r1, r4, #12
 8009f74:	0092      	lsls	r2, r2, #2
 8009f76:	300c      	adds	r0, #12
 8009f78:	f000 f90c 	bl	800a194 <memcpy>
 8009f7c:	4621      	mov	r1, r4
 8009f7e:	ee18 0a10 	vmov	r0, s16
 8009f82:	f000 f955 	bl	800a230 <_Bfree>
 8009f86:	464c      	mov	r4, r9
 8009f88:	6923      	ldr	r3, [r4, #16]
 8009f8a:	1c5a      	adds	r2, r3, #1
 8009f8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f90:	6122      	str	r2, [r4, #16]
 8009f92:	2201      	movs	r2, #1
 8009f94:	615a      	str	r2, [r3, #20]
 8009f96:	e7bb      	b.n	8009f10 <__gethex+0x3c8>
 8009f98:	6922      	ldr	r2, [r4, #16]
 8009f9a:	455a      	cmp	r2, fp
 8009f9c:	dd0b      	ble.n	8009fb6 <__gethex+0x46e>
 8009f9e:	2101      	movs	r1, #1
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	f7ff fd69 	bl	8009a78 <rshift>
 8009fa6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009faa:	3501      	adds	r5, #1
 8009fac:	42ab      	cmp	r3, r5
 8009fae:	f6ff aed0 	blt.w	8009d52 <__gethex+0x20a>
 8009fb2:	2701      	movs	r7, #1
 8009fb4:	e7c0      	b.n	8009f38 <__gethex+0x3f0>
 8009fb6:	f016 061f 	ands.w	r6, r6, #31
 8009fba:	d0fa      	beq.n	8009fb2 <__gethex+0x46a>
 8009fbc:	449a      	add	sl, r3
 8009fbe:	f1c6 0620 	rsb	r6, r6, #32
 8009fc2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009fc6:	f000 f9e9 	bl	800a39c <__hi0bits>
 8009fca:	42b0      	cmp	r0, r6
 8009fcc:	dbe7      	blt.n	8009f9e <__gethex+0x456>
 8009fce:	e7f0      	b.n	8009fb2 <__gethex+0x46a>
 8009fd0:	0800dd64 	.word	0x0800dd64

08009fd4 <L_shift>:
 8009fd4:	f1c2 0208 	rsb	r2, r2, #8
 8009fd8:	0092      	lsls	r2, r2, #2
 8009fda:	b570      	push	{r4, r5, r6, lr}
 8009fdc:	f1c2 0620 	rsb	r6, r2, #32
 8009fe0:	6843      	ldr	r3, [r0, #4]
 8009fe2:	6804      	ldr	r4, [r0, #0]
 8009fe4:	fa03 f506 	lsl.w	r5, r3, r6
 8009fe8:	432c      	orrs	r4, r5
 8009fea:	40d3      	lsrs	r3, r2
 8009fec:	6004      	str	r4, [r0, #0]
 8009fee:	f840 3f04 	str.w	r3, [r0, #4]!
 8009ff2:	4288      	cmp	r0, r1
 8009ff4:	d3f4      	bcc.n	8009fe0 <L_shift+0xc>
 8009ff6:	bd70      	pop	{r4, r5, r6, pc}

08009ff8 <__match>:
 8009ff8:	b530      	push	{r4, r5, lr}
 8009ffa:	6803      	ldr	r3, [r0, #0]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a002:	b914      	cbnz	r4, 800a00a <__match+0x12>
 800a004:	6003      	str	r3, [r0, #0]
 800a006:	2001      	movs	r0, #1
 800a008:	bd30      	pop	{r4, r5, pc}
 800a00a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a00e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a012:	2d19      	cmp	r5, #25
 800a014:	bf98      	it	ls
 800a016:	3220      	addls	r2, #32
 800a018:	42a2      	cmp	r2, r4
 800a01a:	d0f0      	beq.n	8009ffe <__match+0x6>
 800a01c:	2000      	movs	r0, #0
 800a01e:	e7f3      	b.n	800a008 <__match+0x10>

0800a020 <__hexnan>:
 800a020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a024:	680b      	ldr	r3, [r1, #0]
 800a026:	6801      	ldr	r1, [r0, #0]
 800a028:	115e      	asrs	r6, r3, #5
 800a02a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a02e:	f013 031f 	ands.w	r3, r3, #31
 800a032:	b087      	sub	sp, #28
 800a034:	bf18      	it	ne
 800a036:	3604      	addne	r6, #4
 800a038:	2500      	movs	r5, #0
 800a03a:	1f37      	subs	r7, r6, #4
 800a03c:	4682      	mov	sl, r0
 800a03e:	4690      	mov	r8, r2
 800a040:	9301      	str	r3, [sp, #4]
 800a042:	f846 5c04 	str.w	r5, [r6, #-4]
 800a046:	46b9      	mov	r9, r7
 800a048:	463c      	mov	r4, r7
 800a04a:	9502      	str	r5, [sp, #8]
 800a04c:	46ab      	mov	fp, r5
 800a04e:	784a      	ldrb	r2, [r1, #1]
 800a050:	1c4b      	adds	r3, r1, #1
 800a052:	9303      	str	r3, [sp, #12]
 800a054:	b342      	cbz	r2, 800a0a8 <__hexnan+0x88>
 800a056:	4610      	mov	r0, r2
 800a058:	9105      	str	r1, [sp, #20]
 800a05a:	9204      	str	r2, [sp, #16]
 800a05c:	f7ff fd5e 	bl	8009b1c <__hexdig_fun>
 800a060:	2800      	cmp	r0, #0
 800a062:	d14f      	bne.n	800a104 <__hexnan+0xe4>
 800a064:	9a04      	ldr	r2, [sp, #16]
 800a066:	9905      	ldr	r1, [sp, #20]
 800a068:	2a20      	cmp	r2, #32
 800a06a:	d818      	bhi.n	800a09e <__hexnan+0x7e>
 800a06c:	9b02      	ldr	r3, [sp, #8]
 800a06e:	459b      	cmp	fp, r3
 800a070:	dd13      	ble.n	800a09a <__hexnan+0x7a>
 800a072:	454c      	cmp	r4, r9
 800a074:	d206      	bcs.n	800a084 <__hexnan+0x64>
 800a076:	2d07      	cmp	r5, #7
 800a078:	dc04      	bgt.n	800a084 <__hexnan+0x64>
 800a07a:	462a      	mov	r2, r5
 800a07c:	4649      	mov	r1, r9
 800a07e:	4620      	mov	r0, r4
 800a080:	f7ff ffa8 	bl	8009fd4 <L_shift>
 800a084:	4544      	cmp	r4, r8
 800a086:	d950      	bls.n	800a12a <__hexnan+0x10a>
 800a088:	2300      	movs	r3, #0
 800a08a:	f1a4 0904 	sub.w	r9, r4, #4
 800a08e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a092:	f8cd b008 	str.w	fp, [sp, #8]
 800a096:	464c      	mov	r4, r9
 800a098:	461d      	mov	r5, r3
 800a09a:	9903      	ldr	r1, [sp, #12]
 800a09c:	e7d7      	b.n	800a04e <__hexnan+0x2e>
 800a09e:	2a29      	cmp	r2, #41	; 0x29
 800a0a0:	d156      	bne.n	800a150 <__hexnan+0x130>
 800a0a2:	3102      	adds	r1, #2
 800a0a4:	f8ca 1000 	str.w	r1, [sl]
 800a0a8:	f1bb 0f00 	cmp.w	fp, #0
 800a0ac:	d050      	beq.n	800a150 <__hexnan+0x130>
 800a0ae:	454c      	cmp	r4, r9
 800a0b0:	d206      	bcs.n	800a0c0 <__hexnan+0xa0>
 800a0b2:	2d07      	cmp	r5, #7
 800a0b4:	dc04      	bgt.n	800a0c0 <__hexnan+0xa0>
 800a0b6:	462a      	mov	r2, r5
 800a0b8:	4649      	mov	r1, r9
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f7ff ff8a 	bl	8009fd4 <L_shift>
 800a0c0:	4544      	cmp	r4, r8
 800a0c2:	d934      	bls.n	800a12e <__hexnan+0x10e>
 800a0c4:	f1a8 0204 	sub.w	r2, r8, #4
 800a0c8:	4623      	mov	r3, r4
 800a0ca:	f853 1b04 	ldr.w	r1, [r3], #4
 800a0ce:	f842 1f04 	str.w	r1, [r2, #4]!
 800a0d2:	429f      	cmp	r7, r3
 800a0d4:	d2f9      	bcs.n	800a0ca <__hexnan+0xaa>
 800a0d6:	1b3b      	subs	r3, r7, r4
 800a0d8:	f023 0303 	bic.w	r3, r3, #3
 800a0dc:	3304      	adds	r3, #4
 800a0de:	3401      	adds	r4, #1
 800a0e0:	3e03      	subs	r6, #3
 800a0e2:	42b4      	cmp	r4, r6
 800a0e4:	bf88      	it	hi
 800a0e6:	2304      	movhi	r3, #4
 800a0e8:	4443      	add	r3, r8
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f843 2b04 	str.w	r2, [r3], #4
 800a0f0:	429f      	cmp	r7, r3
 800a0f2:	d2fb      	bcs.n	800a0ec <__hexnan+0xcc>
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	b91b      	cbnz	r3, 800a100 <__hexnan+0xe0>
 800a0f8:	4547      	cmp	r7, r8
 800a0fa:	d127      	bne.n	800a14c <__hexnan+0x12c>
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	603b      	str	r3, [r7, #0]
 800a100:	2005      	movs	r0, #5
 800a102:	e026      	b.n	800a152 <__hexnan+0x132>
 800a104:	3501      	adds	r5, #1
 800a106:	2d08      	cmp	r5, #8
 800a108:	f10b 0b01 	add.w	fp, fp, #1
 800a10c:	dd06      	ble.n	800a11c <__hexnan+0xfc>
 800a10e:	4544      	cmp	r4, r8
 800a110:	d9c3      	bls.n	800a09a <__hexnan+0x7a>
 800a112:	2300      	movs	r3, #0
 800a114:	f844 3c04 	str.w	r3, [r4, #-4]
 800a118:	2501      	movs	r5, #1
 800a11a:	3c04      	subs	r4, #4
 800a11c:	6822      	ldr	r2, [r4, #0]
 800a11e:	f000 000f 	and.w	r0, r0, #15
 800a122:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a126:	6022      	str	r2, [r4, #0]
 800a128:	e7b7      	b.n	800a09a <__hexnan+0x7a>
 800a12a:	2508      	movs	r5, #8
 800a12c:	e7b5      	b.n	800a09a <__hexnan+0x7a>
 800a12e:	9b01      	ldr	r3, [sp, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d0df      	beq.n	800a0f4 <__hexnan+0xd4>
 800a134:	f04f 32ff 	mov.w	r2, #4294967295
 800a138:	f1c3 0320 	rsb	r3, r3, #32
 800a13c:	fa22 f303 	lsr.w	r3, r2, r3
 800a140:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a144:	401a      	ands	r2, r3
 800a146:	f846 2c04 	str.w	r2, [r6, #-4]
 800a14a:	e7d3      	b.n	800a0f4 <__hexnan+0xd4>
 800a14c:	3f04      	subs	r7, #4
 800a14e:	e7d1      	b.n	800a0f4 <__hexnan+0xd4>
 800a150:	2004      	movs	r0, #4
 800a152:	b007      	add	sp, #28
 800a154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a158 <_localeconv_r>:
 800a158:	4800      	ldr	r0, [pc, #0]	; (800a15c <_localeconv_r+0x4>)
 800a15a:	4770      	bx	lr
 800a15c:	20000214 	.word	0x20000214

0800a160 <malloc>:
 800a160:	4b02      	ldr	r3, [pc, #8]	; (800a16c <malloc+0xc>)
 800a162:	4601      	mov	r1, r0
 800a164:	6818      	ldr	r0, [r3, #0]
 800a166:	f000 bd35 	b.w	800abd4 <_malloc_r>
 800a16a:	bf00      	nop
 800a16c:	200000bc 	.word	0x200000bc

0800a170 <__ascii_mbtowc>:
 800a170:	b082      	sub	sp, #8
 800a172:	b901      	cbnz	r1, 800a176 <__ascii_mbtowc+0x6>
 800a174:	a901      	add	r1, sp, #4
 800a176:	b142      	cbz	r2, 800a18a <__ascii_mbtowc+0x1a>
 800a178:	b14b      	cbz	r3, 800a18e <__ascii_mbtowc+0x1e>
 800a17a:	7813      	ldrb	r3, [r2, #0]
 800a17c:	600b      	str	r3, [r1, #0]
 800a17e:	7812      	ldrb	r2, [r2, #0]
 800a180:	1e10      	subs	r0, r2, #0
 800a182:	bf18      	it	ne
 800a184:	2001      	movne	r0, #1
 800a186:	b002      	add	sp, #8
 800a188:	4770      	bx	lr
 800a18a:	4610      	mov	r0, r2
 800a18c:	e7fb      	b.n	800a186 <__ascii_mbtowc+0x16>
 800a18e:	f06f 0001 	mvn.w	r0, #1
 800a192:	e7f8      	b.n	800a186 <__ascii_mbtowc+0x16>

0800a194 <memcpy>:
 800a194:	440a      	add	r2, r1
 800a196:	4291      	cmp	r1, r2
 800a198:	f100 33ff 	add.w	r3, r0, #4294967295
 800a19c:	d100      	bne.n	800a1a0 <memcpy+0xc>
 800a19e:	4770      	bx	lr
 800a1a0:	b510      	push	{r4, lr}
 800a1a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1aa:	4291      	cmp	r1, r2
 800a1ac:	d1f9      	bne.n	800a1a2 <memcpy+0xe>
 800a1ae:	bd10      	pop	{r4, pc}

0800a1b0 <_Balloc>:
 800a1b0:	b570      	push	{r4, r5, r6, lr}
 800a1b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1b4:	4604      	mov	r4, r0
 800a1b6:	460d      	mov	r5, r1
 800a1b8:	b976      	cbnz	r6, 800a1d8 <_Balloc+0x28>
 800a1ba:	2010      	movs	r0, #16
 800a1bc:	f7ff ffd0 	bl	800a160 <malloc>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	6260      	str	r0, [r4, #36]	; 0x24
 800a1c4:	b920      	cbnz	r0, 800a1d0 <_Balloc+0x20>
 800a1c6:	4b18      	ldr	r3, [pc, #96]	; (800a228 <_Balloc+0x78>)
 800a1c8:	4818      	ldr	r0, [pc, #96]	; (800a22c <_Balloc+0x7c>)
 800a1ca:	2166      	movs	r1, #102	; 0x66
 800a1cc:	f000 feee 	bl	800afac <__assert_func>
 800a1d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1d4:	6006      	str	r6, [r0, #0]
 800a1d6:	60c6      	str	r6, [r0, #12]
 800a1d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a1da:	68f3      	ldr	r3, [r6, #12]
 800a1dc:	b183      	cbz	r3, 800a200 <_Balloc+0x50>
 800a1de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1e6:	b9b8      	cbnz	r0, 800a218 <_Balloc+0x68>
 800a1e8:	2101      	movs	r1, #1
 800a1ea:	fa01 f605 	lsl.w	r6, r1, r5
 800a1ee:	1d72      	adds	r2, r6, #5
 800a1f0:	0092      	lsls	r2, r2, #2
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	f000 fc8e 	bl	800ab14 <_calloc_r>
 800a1f8:	b160      	cbz	r0, 800a214 <_Balloc+0x64>
 800a1fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a1fe:	e00e      	b.n	800a21e <_Balloc+0x6e>
 800a200:	2221      	movs	r2, #33	; 0x21
 800a202:	2104      	movs	r1, #4
 800a204:	4620      	mov	r0, r4
 800a206:	f000 fc85 	bl	800ab14 <_calloc_r>
 800a20a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a20c:	60f0      	str	r0, [r6, #12]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d1e4      	bne.n	800a1de <_Balloc+0x2e>
 800a214:	2000      	movs	r0, #0
 800a216:	bd70      	pop	{r4, r5, r6, pc}
 800a218:	6802      	ldr	r2, [r0, #0]
 800a21a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a21e:	2300      	movs	r3, #0
 800a220:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a224:	e7f7      	b.n	800a216 <_Balloc+0x66>
 800a226:	bf00      	nop
 800a228:	0800dcee 	.word	0x0800dcee
 800a22c:	0800ddf4 	.word	0x0800ddf4

0800a230 <_Bfree>:
 800a230:	b570      	push	{r4, r5, r6, lr}
 800a232:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a234:	4605      	mov	r5, r0
 800a236:	460c      	mov	r4, r1
 800a238:	b976      	cbnz	r6, 800a258 <_Bfree+0x28>
 800a23a:	2010      	movs	r0, #16
 800a23c:	f7ff ff90 	bl	800a160 <malloc>
 800a240:	4602      	mov	r2, r0
 800a242:	6268      	str	r0, [r5, #36]	; 0x24
 800a244:	b920      	cbnz	r0, 800a250 <_Bfree+0x20>
 800a246:	4b09      	ldr	r3, [pc, #36]	; (800a26c <_Bfree+0x3c>)
 800a248:	4809      	ldr	r0, [pc, #36]	; (800a270 <_Bfree+0x40>)
 800a24a:	218a      	movs	r1, #138	; 0x8a
 800a24c:	f000 feae 	bl	800afac <__assert_func>
 800a250:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a254:	6006      	str	r6, [r0, #0]
 800a256:	60c6      	str	r6, [r0, #12]
 800a258:	b13c      	cbz	r4, 800a26a <_Bfree+0x3a>
 800a25a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a25c:	6862      	ldr	r2, [r4, #4]
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a264:	6021      	str	r1, [r4, #0]
 800a266:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a26a:	bd70      	pop	{r4, r5, r6, pc}
 800a26c:	0800dcee 	.word	0x0800dcee
 800a270:	0800ddf4 	.word	0x0800ddf4

0800a274 <__multadd>:
 800a274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a278:	690e      	ldr	r6, [r1, #16]
 800a27a:	4607      	mov	r7, r0
 800a27c:	4698      	mov	r8, r3
 800a27e:	460c      	mov	r4, r1
 800a280:	f101 0014 	add.w	r0, r1, #20
 800a284:	2300      	movs	r3, #0
 800a286:	6805      	ldr	r5, [r0, #0]
 800a288:	b2a9      	uxth	r1, r5
 800a28a:	fb02 8101 	mla	r1, r2, r1, r8
 800a28e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a292:	0c2d      	lsrs	r5, r5, #16
 800a294:	fb02 c505 	mla	r5, r2, r5, ip
 800a298:	b289      	uxth	r1, r1
 800a29a:	3301      	adds	r3, #1
 800a29c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a2a0:	429e      	cmp	r6, r3
 800a2a2:	f840 1b04 	str.w	r1, [r0], #4
 800a2a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a2aa:	dcec      	bgt.n	800a286 <__multadd+0x12>
 800a2ac:	f1b8 0f00 	cmp.w	r8, #0
 800a2b0:	d022      	beq.n	800a2f8 <__multadd+0x84>
 800a2b2:	68a3      	ldr	r3, [r4, #8]
 800a2b4:	42b3      	cmp	r3, r6
 800a2b6:	dc19      	bgt.n	800a2ec <__multadd+0x78>
 800a2b8:	6861      	ldr	r1, [r4, #4]
 800a2ba:	4638      	mov	r0, r7
 800a2bc:	3101      	adds	r1, #1
 800a2be:	f7ff ff77 	bl	800a1b0 <_Balloc>
 800a2c2:	4605      	mov	r5, r0
 800a2c4:	b928      	cbnz	r0, 800a2d2 <__multadd+0x5e>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	4b0d      	ldr	r3, [pc, #52]	; (800a300 <__multadd+0x8c>)
 800a2ca:	480e      	ldr	r0, [pc, #56]	; (800a304 <__multadd+0x90>)
 800a2cc:	21b5      	movs	r1, #181	; 0xb5
 800a2ce:	f000 fe6d 	bl	800afac <__assert_func>
 800a2d2:	6922      	ldr	r2, [r4, #16]
 800a2d4:	3202      	adds	r2, #2
 800a2d6:	f104 010c 	add.w	r1, r4, #12
 800a2da:	0092      	lsls	r2, r2, #2
 800a2dc:	300c      	adds	r0, #12
 800a2de:	f7ff ff59 	bl	800a194 <memcpy>
 800a2e2:	4621      	mov	r1, r4
 800a2e4:	4638      	mov	r0, r7
 800a2e6:	f7ff ffa3 	bl	800a230 <_Bfree>
 800a2ea:	462c      	mov	r4, r5
 800a2ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a2f0:	3601      	adds	r6, #1
 800a2f2:	f8c3 8014 	str.w	r8, [r3, #20]
 800a2f6:	6126      	str	r6, [r4, #16]
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2fe:	bf00      	nop
 800a300:	0800dd64 	.word	0x0800dd64
 800a304:	0800ddf4 	.word	0x0800ddf4

0800a308 <__s2b>:
 800a308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a30c:	460c      	mov	r4, r1
 800a30e:	4615      	mov	r5, r2
 800a310:	461f      	mov	r7, r3
 800a312:	2209      	movs	r2, #9
 800a314:	3308      	adds	r3, #8
 800a316:	4606      	mov	r6, r0
 800a318:	fb93 f3f2 	sdiv	r3, r3, r2
 800a31c:	2100      	movs	r1, #0
 800a31e:	2201      	movs	r2, #1
 800a320:	429a      	cmp	r2, r3
 800a322:	db09      	blt.n	800a338 <__s2b+0x30>
 800a324:	4630      	mov	r0, r6
 800a326:	f7ff ff43 	bl	800a1b0 <_Balloc>
 800a32a:	b940      	cbnz	r0, 800a33e <__s2b+0x36>
 800a32c:	4602      	mov	r2, r0
 800a32e:	4b19      	ldr	r3, [pc, #100]	; (800a394 <__s2b+0x8c>)
 800a330:	4819      	ldr	r0, [pc, #100]	; (800a398 <__s2b+0x90>)
 800a332:	21ce      	movs	r1, #206	; 0xce
 800a334:	f000 fe3a 	bl	800afac <__assert_func>
 800a338:	0052      	lsls	r2, r2, #1
 800a33a:	3101      	adds	r1, #1
 800a33c:	e7f0      	b.n	800a320 <__s2b+0x18>
 800a33e:	9b08      	ldr	r3, [sp, #32]
 800a340:	6143      	str	r3, [r0, #20]
 800a342:	2d09      	cmp	r5, #9
 800a344:	f04f 0301 	mov.w	r3, #1
 800a348:	6103      	str	r3, [r0, #16]
 800a34a:	dd16      	ble.n	800a37a <__s2b+0x72>
 800a34c:	f104 0909 	add.w	r9, r4, #9
 800a350:	46c8      	mov	r8, r9
 800a352:	442c      	add	r4, r5
 800a354:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a358:	4601      	mov	r1, r0
 800a35a:	3b30      	subs	r3, #48	; 0x30
 800a35c:	220a      	movs	r2, #10
 800a35e:	4630      	mov	r0, r6
 800a360:	f7ff ff88 	bl	800a274 <__multadd>
 800a364:	45a0      	cmp	r8, r4
 800a366:	d1f5      	bne.n	800a354 <__s2b+0x4c>
 800a368:	f1a5 0408 	sub.w	r4, r5, #8
 800a36c:	444c      	add	r4, r9
 800a36e:	1b2d      	subs	r5, r5, r4
 800a370:	1963      	adds	r3, r4, r5
 800a372:	42bb      	cmp	r3, r7
 800a374:	db04      	blt.n	800a380 <__s2b+0x78>
 800a376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a37a:	340a      	adds	r4, #10
 800a37c:	2509      	movs	r5, #9
 800a37e:	e7f6      	b.n	800a36e <__s2b+0x66>
 800a380:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a384:	4601      	mov	r1, r0
 800a386:	3b30      	subs	r3, #48	; 0x30
 800a388:	220a      	movs	r2, #10
 800a38a:	4630      	mov	r0, r6
 800a38c:	f7ff ff72 	bl	800a274 <__multadd>
 800a390:	e7ee      	b.n	800a370 <__s2b+0x68>
 800a392:	bf00      	nop
 800a394:	0800dd64 	.word	0x0800dd64
 800a398:	0800ddf4 	.word	0x0800ddf4

0800a39c <__hi0bits>:
 800a39c:	0c03      	lsrs	r3, r0, #16
 800a39e:	041b      	lsls	r3, r3, #16
 800a3a0:	b9d3      	cbnz	r3, 800a3d8 <__hi0bits+0x3c>
 800a3a2:	0400      	lsls	r0, r0, #16
 800a3a4:	2310      	movs	r3, #16
 800a3a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a3aa:	bf04      	itt	eq
 800a3ac:	0200      	lsleq	r0, r0, #8
 800a3ae:	3308      	addeq	r3, #8
 800a3b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a3b4:	bf04      	itt	eq
 800a3b6:	0100      	lsleq	r0, r0, #4
 800a3b8:	3304      	addeq	r3, #4
 800a3ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a3be:	bf04      	itt	eq
 800a3c0:	0080      	lsleq	r0, r0, #2
 800a3c2:	3302      	addeq	r3, #2
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	db05      	blt.n	800a3d4 <__hi0bits+0x38>
 800a3c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a3cc:	f103 0301 	add.w	r3, r3, #1
 800a3d0:	bf08      	it	eq
 800a3d2:	2320      	moveq	r3, #32
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	4770      	bx	lr
 800a3d8:	2300      	movs	r3, #0
 800a3da:	e7e4      	b.n	800a3a6 <__hi0bits+0xa>

0800a3dc <__lo0bits>:
 800a3dc:	6803      	ldr	r3, [r0, #0]
 800a3de:	f013 0207 	ands.w	r2, r3, #7
 800a3e2:	4601      	mov	r1, r0
 800a3e4:	d00b      	beq.n	800a3fe <__lo0bits+0x22>
 800a3e6:	07da      	lsls	r2, r3, #31
 800a3e8:	d424      	bmi.n	800a434 <__lo0bits+0x58>
 800a3ea:	0798      	lsls	r0, r3, #30
 800a3ec:	bf49      	itett	mi
 800a3ee:	085b      	lsrmi	r3, r3, #1
 800a3f0:	089b      	lsrpl	r3, r3, #2
 800a3f2:	2001      	movmi	r0, #1
 800a3f4:	600b      	strmi	r3, [r1, #0]
 800a3f6:	bf5c      	itt	pl
 800a3f8:	600b      	strpl	r3, [r1, #0]
 800a3fa:	2002      	movpl	r0, #2
 800a3fc:	4770      	bx	lr
 800a3fe:	b298      	uxth	r0, r3
 800a400:	b9b0      	cbnz	r0, 800a430 <__lo0bits+0x54>
 800a402:	0c1b      	lsrs	r3, r3, #16
 800a404:	2010      	movs	r0, #16
 800a406:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a40a:	bf04      	itt	eq
 800a40c:	0a1b      	lsreq	r3, r3, #8
 800a40e:	3008      	addeq	r0, #8
 800a410:	071a      	lsls	r2, r3, #28
 800a412:	bf04      	itt	eq
 800a414:	091b      	lsreq	r3, r3, #4
 800a416:	3004      	addeq	r0, #4
 800a418:	079a      	lsls	r2, r3, #30
 800a41a:	bf04      	itt	eq
 800a41c:	089b      	lsreq	r3, r3, #2
 800a41e:	3002      	addeq	r0, #2
 800a420:	07da      	lsls	r2, r3, #31
 800a422:	d403      	bmi.n	800a42c <__lo0bits+0x50>
 800a424:	085b      	lsrs	r3, r3, #1
 800a426:	f100 0001 	add.w	r0, r0, #1
 800a42a:	d005      	beq.n	800a438 <__lo0bits+0x5c>
 800a42c:	600b      	str	r3, [r1, #0]
 800a42e:	4770      	bx	lr
 800a430:	4610      	mov	r0, r2
 800a432:	e7e8      	b.n	800a406 <__lo0bits+0x2a>
 800a434:	2000      	movs	r0, #0
 800a436:	4770      	bx	lr
 800a438:	2020      	movs	r0, #32
 800a43a:	4770      	bx	lr

0800a43c <__i2b>:
 800a43c:	b510      	push	{r4, lr}
 800a43e:	460c      	mov	r4, r1
 800a440:	2101      	movs	r1, #1
 800a442:	f7ff feb5 	bl	800a1b0 <_Balloc>
 800a446:	4602      	mov	r2, r0
 800a448:	b928      	cbnz	r0, 800a456 <__i2b+0x1a>
 800a44a:	4b05      	ldr	r3, [pc, #20]	; (800a460 <__i2b+0x24>)
 800a44c:	4805      	ldr	r0, [pc, #20]	; (800a464 <__i2b+0x28>)
 800a44e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a452:	f000 fdab 	bl	800afac <__assert_func>
 800a456:	2301      	movs	r3, #1
 800a458:	6144      	str	r4, [r0, #20]
 800a45a:	6103      	str	r3, [r0, #16]
 800a45c:	bd10      	pop	{r4, pc}
 800a45e:	bf00      	nop
 800a460:	0800dd64 	.word	0x0800dd64
 800a464:	0800ddf4 	.word	0x0800ddf4

0800a468 <__multiply>:
 800a468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a46c:	4614      	mov	r4, r2
 800a46e:	690a      	ldr	r2, [r1, #16]
 800a470:	6923      	ldr	r3, [r4, #16]
 800a472:	429a      	cmp	r2, r3
 800a474:	bfb8      	it	lt
 800a476:	460b      	movlt	r3, r1
 800a478:	460d      	mov	r5, r1
 800a47a:	bfbc      	itt	lt
 800a47c:	4625      	movlt	r5, r4
 800a47e:	461c      	movlt	r4, r3
 800a480:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a484:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a488:	68ab      	ldr	r3, [r5, #8]
 800a48a:	6869      	ldr	r1, [r5, #4]
 800a48c:	eb0a 0709 	add.w	r7, sl, r9
 800a490:	42bb      	cmp	r3, r7
 800a492:	b085      	sub	sp, #20
 800a494:	bfb8      	it	lt
 800a496:	3101      	addlt	r1, #1
 800a498:	f7ff fe8a 	bl	800a1b0 <_Balloc>
 800a49c:	b930      	cbnz	r0, 800a4ac <__multiply+0x44>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	4b42      	ldr	r3, [pc, #264]	; (800a5ac <__multiply+0x144>)
 800a4a2:	4843      	ldr	r0, [pc, #268]	; (800a5b0 <__multiply+0x148>)
 800a4a4:	f240 115d 	movw	r1, #349	; 0x15d
 800a4a8:	f000 fd80 	bl	800afac <__assert_func>
 800a4ac:	f100 0614 	add.w	r6, r0, #20
 800a4b0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a4b4:	4633      	mov	r3, r6
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	4543      	cmp	r3, r8
 800a4ba:	d31e      	bcc.n	800a4fa <__multiply+0x92>
 800a4bc:	f105 0c14 	add.w	ip, r5, #20
 800a4c0:	f104 0314 	add.w	r3, r4, #20
 800a4c4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a4c8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a4cc:	9202      	str	r2, [sp, #8]
 800a4ce:	ebac 0205 	sub.w	r2, ip, r5
 800a4d2:	3a15      	subs	r2, #21
 800a4d4:	f022 0203 	bic.w	r2, r2, #3
 800a4d8:	3204      	adds	r2, #4
 800a4da:	f105 0115 	add.w	r1, r5, #21
 800a4de:	458c      	cmp	ip, r1
 800a4e0:	bf38      	it	cc
 800a4e2:	2204      	movcc	r2, #4
 800a4e4:	9201      	str	r2, [sp, #4]
 800a4e6:	9a02      	ldr	r2, [sp, #8]
 800a4e8:	9303      	str	r3, [sp, #12]
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d808      	bhi.n	800a500 <__multiply+0x98>
 800a4ee:	2f00      	cmp	r7, #0
 800a4f0:	dc55      	bgt.n	800a59e <__multiply+0x136>
 800a4f2:	6107      	str	r7, [r0, #16]
 800a4f4:	b005      	add	sp, #20
 800a4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4fa:	f843 2b04 	str.w	r2, [r3], #4
 800a4fe:	e7db      	b.n	800a4b8 <__multiply+0x50>
 800a500:	f8b3 a000 	ldrh.w	sl, [r3]
 800a504:	f1ba 0f00 	cmp.w	sl, #0
 800a508:	d020      	beq.n	800a54c <__multiply+0xe4>
 800a50a:	f105 0e14 	add.w	lr, r5, #20
 800a50e:	46b1      	mov	r9, r6
 800a510:	2200      	movs	r2, #0
 800a512:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a516:	f8d9 b000 	ldr.w	fp, [r9]
 800a51a:	b2a1      	uxth	r1, r4
 800a51c:	fa1f fb8b 	uxth.w	fp, fp
 800a520:	fb0a b101 	mla	r1, sl, r1, fp
 800a524:	4411      	add	r1, r2
 800a526:	f8d9 2000 	ldr.w	r2, [r9]
 800a52a:	0c24      	lsrs	r4, r4, #16
 800a52c:	0c12      	lsrs	r2, r2, #16
 800a52e:	fb0a 2404 	mla	r4, sl, r4, r2
 800a532:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a536:	b289      	uxth	r1, r1
 800a538:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a53c:	45f4      	cmp	ip, lr
 800a53e:	f849 1b04 	str.w	r1, [r9], #4
 800a542:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a546:	d8e4      	bhi.n	800a512 <__multiply+0xaa>
 800a548:	9901      	ldr	r1, [sp, #4]
 800a54a:	5072      	str	r2, [r6, r1]
 800a54c:	9a03      	ldr	r2, [sp, #12]
 800a54e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a552:	3304      	adds	r3, #4
 800a554:	f1b9 0f00 	cmp.w	r9, #0
 800a558:	d01f      	beq.n	800a59a <__multiply+0x132>
 800a55a:	6834      	ldr	r4, [r6, #0]
 800a55c:	f105 0114 	add.w	r1, r5, #20
 800a560:	46b6      	mov	lr, r6
 800a562:	f04f 0a00 	mov.w	sl, #0
 800a566:	880a      	ldrh	r2, [r1, #0]
 800a568:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a56c:	fb09 b202 	mla	r2, r9, r2, fp
 800a570:	4492      	add	sl, r2
 800a572:	b2a4      	uxth	r4, r4
 800a574:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a578:	f84e 4b04 	str.w	r4, [lr], #4
 800a57c:	f851 4b04 	ldr.w	r4, [r1], #4
 800a580:	f8be 2000 	ldrh.w	r2, [lr]
 800a584:	0c24      	lsrs	r4, r4, #16
 800a586:	fb09 2404 	mla	r4, r9, r4, r2
 800a58a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a58e:	458c      	cmp	ip, r1
 800a590:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a594:	d8e7      	bhi.n	800a566 <__multiply+0xfe>
 800a596:	9a01      	ldr	r2, [sp, #4]
 800a598:	50b4      	str	r4, [r6, r2]
 800a59a:	3604      	adds	r6, #4
 800a59c:	e7a3      	b.n	800a4e6 <__multiply+0x7e>
 800a59e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d1a5      	bne.n	800a4f2 <__multiply+0x8a>
 800a5a6:	3f01      	subs	r7, #1
 800a5a8:	e7a1      	b.n	800a4ee <__multiply+0x86>
 800a5aa:	bf00      	nop
 800a5ac:	0800dd64 	.word	0x0800dd64
 800a5b0:	0800ddf4 	.word	0x0800ddf4

0800a5b4 <__pow5mult>:
 800a5b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5b8:	4615      	mov	r5, r2
 800a5ba:	f012 0203 	ands.w	r2, r2, #3
 800a5be:	4606      	mov	r6, r0
 800a5c0:	460f      	mov	r7, r1
 800a5c2:	d007      	beq.n	800a5d4 <__pow5mult+0x20>
 800a5c4:	4c25      	ldr	r4, [pc, #148]	; (800a65c <__pow5mult+0xa8>)
 800a5c6:	3a01      	subs	r2, #1
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a5ce:	f7ff fe51 	bl	800a274 <__multadd>
 800a5d2:	4607      	mov	r7, r0
 800a5d4:	10ad      	asrs	r5, r5, #2
 800a5d6:	d03d      	beq.n	800a654 <__pow5mult+0xa0>
 800a5d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a5da:	b97c      	cbnz	r4, 800a5fc <__pow5mult+0x48>
 800a5dc:	2010      	movs	r0, #16
 800a5de:	f7ff fdbf 	bl	800a160 <malloc>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	6270      	str	r0, [r6, #36]	; 0x24
 800a5e6:	b928      	cbnz	r0, 800a5f4 <__pow5mult+0x40>
 800a5e8:	4b1d      	ldr	r3, [pc, #116]	; (800a660 <__pow5mult+0xac>)
 800a5ea:	481e      	ldr	r0, [pc, #120]	; (800a664 <__pow5mult+0xb0>)
 800a5ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a5f0:	f000 fcdc 	bl	800afac <__assert_func>
 800a5f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a5f8:	6004      	str	r4, [r0, #0]
 800a5fa:	60c4      	str	r4, [r0, #12]
 800a5fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a600:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a604:	b94c      	cbnz	r4, 800a61a <__pow5mult+0x66>
 800a606:	f240 2171 	movw	r1, #625	; 0x271
 800a60a:	4630      	mov	r0, r6
 800a60c:	f7ff ff16 	bl	800a43c <__i2b>
 800a610:	2300      	movs	r3, #0
 800a612:	f8c8 0008 	str.w	r0, [r8, #8]
 800a616:	4604      	mov	r4, r0
 800a618:	6003      	str	r3, [r0, #0]
 800a61a:	f04f 0900 	mov.w	r9, #0
 800a61e:	07eb      	lsls	r3, r5, #31
 800a620:	d50a      	bpl.n	800a638 <__pow5mult+0x84>
 800a622:	4639      	mov	r1, r7
 800a624:	4622      	mov	r2, r4
 800a626:	4630      	mov	r0, r6
 800a628:	f7ff ff1e 	bl	800a468 <__multiply>
 800a62c:	4639      	mov	r1, r7
 800a62e:	4680      	mov	r8, r0
 800a630:	4630      	mov	r0, r6
 800a632:	f7ff fdfd 	bl	800a230 <_Bfree>
 800a636:	4647      	mov	r7, r8
 800a638:	106d      	asrs	r5, r5, #1
 800a63a:	d00b      	beq.n	800a654 <__pow5mult+0xa0>
 800a63c:	6820      	ldr	r0, [r4, #0]
 800a63e:	b938      	cbnz	r0, 800a650 <__pow5mult+0x9c>
 800a640:	4622      	mov	r2, r4
 800a642:	4621      	mov	r1, r4
 800a644:	4630      	mov	r0, r6
 800a646:	f7ff ff0f 	bl	800a468 <__multiply>
 800a64a:	6020      	str	r0, [r4, #0]
 800a64c:	f8c0 9000 	str.w	r9, [r0]
 800a650:	4604      	mov	r4, r0
 800a652:	e7e4      	b.n	800a61e <__pow5mult+0x6a>
 800a654:	4638      	mov	r0, r7
 800a656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a65a:	bf00      	nop
 800a65c:	0800df48 	.word	0x0800df48
 800a660:	0800dcee 	.word	0x0800dcee
 800a664:	0800ddf4 	.word	0x0800ddf4

0800a668 <__lshift>:
 800a668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a66c:	460c      	mov	r4, r1
 800a66e:	6849      	ldr	r1, [r1, #4]
 800a670:	6923      	ldr	r3, [r4, #16]
 800a672:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a676:	68a3      	ldr	r3, [r4, #8]
 800a678:	4607      	mov	r7, r0
 800a67a:	4691      	mov	r9, r2
 800a67c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a680:	f108 0601 	add.w	r6, r8, #1
 800a684:	42b3      	cmp	r3, r6
 800a686:	db0b      	blt.n	800a6a0 <__lshift+0x38>
 800a688:	4638      	mov	r0, r7
 800a68a:	f7ff fd91 	bl	800a1b0 <_Balloc>
 800a68e:	4605      	mov	r5, r0
 800a690:	b948      	cbnz	r0, 800a6a6 <__lshift+0x3e>
 800a692:	4602      	mov	r2, r0
 800a694:	4b28      	ldr	r3, [pc, #160]	; (800a738 <__lshift+0xd0>)
 800a696:	4829      	ldr	r0, [pc, #164]	; (800a73c <__lshift+0xd4>)
 800a698:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a69c:	f000 fc86 	bl	800afac <__assert_func>
 800a6a0:	3101      	adds	r1, #1
 800a6a2:	005b      	lsls	r3, r3, #1
 800a6a4:	e7ee      	b.n	800a684 <__lshift+0x1c>
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	f100 0114 	add.w	r1, r0, #20
 800a6ac:	f100 0210 	add.w	r2, r0, #16
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	4553      	cmp	r3, sl
 800a6b4:	db33      	blt.n	800a71e <__lshift+0xb6>
 800a6b6:	6920      	ldr	r0, [r4, #16]
 800a6b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a6bc:	f104 0314 	add.w	r3, r4, #20
 800a6c0:	f019 091f 	ands.w	r9, r9, #31
 800a6c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a6c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a6cc:	d02b      	beq.n	800a726 <__lshift+0xbe>
 800a6ce:	f1c9 0e20 	rsb	lr, r9, #32
 800a6d2:	468a      	mov	sl, r1
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	6818      	ldr	r0, [r3, #0]
 800a6d8:	fa00 f009 	lsl.w	r0, r0, r9
 800a6dc:	4302      	orrs	r2, r0
 800a6de:	f84a 2b04 	str.w	r2, [sl], #4
 800a6e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6e6:	459c      	cmp	ip, r3
 800a6e8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a6ec:	d8f3      	bhi.n	800a6d6 <__lshift+0x6e>
 800a6ee:	ebac 0304 	sub.w	r3, ip, r4
 800a6f2:	3b15      	subs	r3, #21
 800a6f4:	f023 0303 	bic.w	r3, r3, #3
 800a6f8:	3304      	adds	r3, #4
 800a6fa:	f104 0015 	add.w	r0, r4, #21
 800a6fe:	4584      	cmp	ip, r0
 800a700:	bf38      	it	cc
 800a702:	2304      	movcc	r3, #4
 800a704:	50ca      	str	r2, [r1, r3]
 800a706:	b10a      	cbz	r2, 800a70c <__lshift+0xa4>
 800a708:	f108 0602 	add.w	r6, r8, #2
 800a70c:	3e01      	subs	r6, #1
 800a70e:	4638      	mov	r0, r7
 800a710:	612e      	str	r6, [r5, #16]
 800a712:	4621      	mov	r1, r4
 800a714:	f7ff fd8c 	bl	800a230 <_Bfree>
 800a718:	4628      	mov	r0, r5
 800a71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a71e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a722:	3301      	adds	r3, #1
 800a724:	e7c5      	b.n	800a6b2 <__lshift+0x4a>
 800a726:	3904      	subs	r1, #4
 800a728:	f853 2b04 	ldr.w	r2, [r3], #4
 800a72c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a730:	459c      	cmp	ip, r3
 800a732:	d8f9      	bhi.n	800a728 <__lshift+0xc0>
 800a734:	e7ea      	b.n	800a70c <__lshift+0xa4>
 800a736:	bf00      	nop
 800a738:	0800dd64 	.word	0x0800dd64
 800a73c:	0800ddf4 	.word	0x0800ddf4

0800a740 <__mcmp>:
 800a740:	b530      	push	{r4, r5, lr}
 800a742:	6902      	ldr	r2, [r0, #16]
 800a744:	690c      	ldr	r4, [r1, #16]
 800a746:	1b12      	subs	r2, r2, r4
 800a748:	d10e      	bne.n	800a768 <__mcmp+0x28>
 800a74a:	f100 0314 	add.w	r3, r0, #20
 800a74e:	3114      	adds	r1, #20
 800a750:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a754:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a758:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a75c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a760:	42a5      	cmp	r5, r4
 800a762:	d003      	beq.n	800a76c <__mcmp+0x2c>
 800a764:	d305      	bcc.n	800a772 <__mcmp+0x32>
 800a766:	2201      	movs	r2, #1
 800a768:	4610      	mov	r0, r2
 800a76a:	bd30      	pop	{r4, r5, pc}
 800a76c:	4283      	cmp	r3, r0
 800a76e:	d3f3      	bcc.n	800a758 <__mcmp+0x18>
 800a770:	e7fa      	b.n	800a768 <__mcmp+0x28>
 800a772:	f04f 32ff 	mov.w	r2, #4294967295
 800a776:	e7f7      	b.n	800a768 <__mcmp+0x28>

0800a778 <__mdiff>:
 800a778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a77c:	460c      	mov	r4, r1
 800a77e:	4606      	mov	r6, r0
 800a780:	4611      	mov	r1, r2
 800a782:	4620      	mov	r0, r4
 800a784:	4617      	mov	r7, r2
 800a786:	f7ff ffdb 	bl	800a740 <__mcmp>
 800a78a:	1e05      	subs	r5, r0, #0
 800a78c:	d110      	bne.n	800a7b0 <__mdiff+0x38>
 800a78e:	4629      	mov	r1, r5
 800a790:	4630      	mov	r0, r6
 800a792:	f7ff fd0d 	bl	800a1b0 <_Balloc>
 800a796:	b930      	cbnz	r0, 800a7a6 <__mdiff+0x2e>
 800a798:	4b39      	ldr	r3, [pc, #228]	; (800a880 <__mdiff+0x108>)
 800a79a:	4602      	mov	r2, r0
 800a79c:	f240 2132 	movw	r1, #562	; 0x232
 800a7a0:	4838      	ldr	r0, [pc, #224]	; (800a884 <__mdiff+0x10c>)
 800a7a2:	f000 fc03 	bl	800afac <__assert_func>
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b0:	bfa4      	itt	ge
 800a7b2:	463b      	movge	r3, r7
 800a7b4:	4627      	movge	r7, r4
 800a7b6:	4630      	mov	r0, r6
 800a7b8:	6879      	ldr	r1, [r7, #4]
 800a7ba:	bfa6      	itte	ge
 800a7bc:	461c      	movge	r4, r3
 800a7be:	2500      	movge	r5, #0
 800a7c0:	2501      	movlt	r5, #1
 800a7c2:	f7ff fcf5 	bl	800a1b0 <_Balloc>
 800a7c6:	b920      	cbnz	r0, 800a7d2 <__mdiff+0x5a>
 800a7c8:	4b2d      	ldr	r3, [pc, #180]	; (800a880 <__mdiff+0x108>)
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a7d0:	e7e6      	b.n	800a7a0 <__mdiff+0x28>
 800a7d2:	693e      	ldr	r6, [r7, #16]
 800a7d4:	60c5      	str	r5, [r0, #12]
 800a7d6:	6925      	ldr	r5, [r4, #16]
 800a7d8:	f107 0114 	add.w	r1, r7, #20
 800a7dc:	f104 0914 	add.w	r9, r4, #20
 800a7e0:	f100 0e14 	add.w	lr, r0, #20
 800a7e4:	f107 0210 	add.w	r2, r7, #16
 800a7e8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a7ec:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a7f0:	46f2      	mov	sl, lr
 800a7f2:	2700      	movs	r7, #0
 800a7f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a7f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a7fc:	fa1f f883 	uxth.w	r8, r3
 800a800:	fa17 f78b 	uxtah	r7, r7, fp
 800a804:	0c1b      	lsrs	r3, r3, #16
 800a806:	eba7 0808 	sub.w	r8, r7, r8
 800a80a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a80e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a812:	fa1f f888 	uxth.w	r8, r8
 800a816:	141f      	asrs	r7, r3, #16
 800a818:	454d      	cmp	r5, r9
 800a81a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a81e:	f84a 3b04 	str.w	r3, [sl], #4
 800a822:	d8e7      	bhi.n	800a7f4 <__mdiff+0x7c>
 800a824:	1b2b      	subs	r3, r5, r4
 800a826:	3b15      	subs	r3, #21
 800a828:	f023 0303 	bic.w	r3, r3, #3
 800a82c:	3304      	adds	r3, #4
 800a82e:	3415      	adds	r4, #21
 800a830:	42a5      	cmp	r5, r4
 800a832:	bf38      	it	cc
 800a834:	2304      	movcc	r3, #4
 800a836:	4419      	add	r1, r3
 800a838:	4473      	add	r3, lr
 800a83a:	469e      	mov	lr, r3
 800a83c:	460d      	mov	r5, r1
 800a83e:	4565      	cmp	r5, ip
 800a840:	d30e      	bcc.n	800a860 <__mdiff+0xe8>
 800a842:	f10c 0203 	add.w	r2, ip, #3
 800a846:	1a52      	subs	r2, r2, r1
 800a848:	f022 0203 	bic.w	r2, r2, #3
 800a84c:	3903      	subs	r1, #3
 800a84e:	458c      	cmp	ip, r1
 800a850:	bf38      	it	cc
 800a852:	2200      	movcc	r2, #0
 800a854:	441a      	add	r2, r3
 800a856:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a85a:	b17b      	cbz	r3, 800a87c <__mdiff+0x104>
 800a85c:	6106      	str	r6, [r0, #16]
 800a85e:	e7a5      	b.n	800a7ac <__mdiff+0x34>
 800a860:	f855 8b04 	ldr.w	r8, [r5], #4
 800a864:	fa17 f488 	uxtah	r4, r7, r8
 800a868:	1422      	asrs	r2, r4, #16
 800a86a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a86e:	b2a4      	uxth	r4, r4
 800a870:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a874:	f84e 4b04 	str.w	r4, [lr], #4
 800a878:	1417      	asrs	r7, r2, #16
 800a87a:	e7e0      	b.n	800a83e <__mdiff+0xc6>
 800a87c:	3e01      	subs	r6, #1
 800a87e:	e7ea      	b.n	800a856 <__mdiff+0xde>
 800a880:	0800dd64 	.word	0x0800dd64
 800a884:	0800ddf4 	.word	0x0800ddf4

0800a888 <__ulp>:
 800a888:	4b11      	ldr	r3, [pc, #68]	; (800a8d0 <__ulp+0x48>)
 800a88a:	400b      	ands	r3, r1
 800a88c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a890:	2b00      	cmp	r3, #0
 800a892:	dd02      	ble.n	800a89a <__ulp+0x12>
 800a894:	2000      	movs	r0, #0
 800a896:	4619      	mov	r1, r3
 800a898:	4770      	bx	lr
 800a89a:	425b      	negs	r3, r3
 800a89c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a8a0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a8a4:	f04f 0000 	mov.w	r0, #0
 800a8a8:	f04f 0100 	mov.w	r1, #0
 800a8ac:	da04      	bge.n	800a8b8 <__ulp+0x30>
 800a8ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a8b2:	fa43 f102 	asr.w	r1, r3, r2
 800a8b6:	4770      	bx	lr
 800a8b8:	f1a2 0314 	sub.w	r3, r2, #20
 800a8bc:	2b1e      	cmp	r3, #30
 800a8be:	bfda      	itte	le
 800a8c0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a8c4:	fa22 f303 	lsrle.w	r3, r2, r3
 800a8c8:	2301      	movgt	r3, #1
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	7ff00000 	.word	0x7ff00000

0800a8d4 <__b2d>:
 800a8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d8:	6906      	ldr	r6, [r0, #16]
 800a8da:	f100 0814 	add.w	r8, r0, #20
 800a8de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a8e2:	1f37      	subs	r7, r6, #4
 800a8e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a8e8:	4610      	mov	r0, r2
 800a8ea:	f7ff fd57 	bl	800a39c <__hi0bits>
 800a8ee:	f1c0 0320 	rsb	r3, r0, #32
 800a8f2:	280a      	cmp	r0, #10
 800a8f4:	f8df c080 	ldr.w	ip, [pc, #128]	; 800a978 <__b2d+0xa4>
 800a8f8:	600b      	str	r3, [r1, #0]
 800a8fa:	dc17      	bgt.n	800a92c <__b2d+0x58>
 800a8fc:	f1c0 0e0b 	rsb	lr, r0, #11
 800a900:	45b8      	cmp	r8, r7
 800a902:	fa22 f30e 	lsr.w	r3, r2, lr
 800a906:	bf38      	it	cc
 800a908:	f856 1c08 	ldrcc.w	r1, [r6, #-8]
 800a90c:	ea43 050c 	orr.w	r5, r3, ip
 800a910:	bf28      	it	cs
 800a912:	2100      	movcs	r1, #0
 800a914:	f100 0315 	add.w	r3, r0, #21
 800a918:	fa02 f303 	lsl.w	r3, r2, r3
 800a91c:	fa21 f10e 	lsr.w	r1, r1, lr
 800a920:	ea43 0401 	orr.w	r4, r3, r1
 800a924:	4620      	mov	r0, r4
 800a926:	4629      	mov	r1, r5
 800a928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a92c:	45b8      	cmp	r8, r7
 800a92e:	bf3a      	itte	cc
 800a930:	f856 1c08 	ldrcc.w	r1, [r6, #-8]
 800a934:	f1a6 0708 	subcc.w	r7, r6, #8
 800a938:	2100      	movcs	r1, #0
 800a93a:	f1b0 030b 	subs.w	r3, r0, #11
 800a93e:	d016      	beq.n	800a96e <__b2d+0x9a>
 800a940:	f1c3 0620 	rsb	r6, r3, #32
 800a944:	fa02 f003 	lsl.w	r0, r2, r3
 800a948:	4547      	cmp	r7, r8
 800a94a:	fa21 f206 	lsr.w	r2, r1, r6
 800a94e:	ea40 0002 	orr.w	r0, r0, r2
 800a952:	bf8c      	ite	hi
 800a954:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a958:	2200      	movls	r2, #0
 800a95a:	f040 557f 	orr.w	r5, r0, #1069547520	; 0x3fc00000
 800a95e:	40f2      	lsrs	r2, r6
 800a960:	fa01 f003 	lsl.w	r0, r1, r3
 800a964:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a968:	ea40 0402 	orr.w	r4, r0, r2
 800a96c:	e7da      	b.n	800a924 <__b2d+0x50>
 800a96e:	ea42 050c 	orr.w	r5, r2, ip
 800a972:	460c      	mov	r4, r1
 800a974:	e7d6      	b.n	800a924 <__b2d+0x50>
 800a976:	bf00      	nop
 800a978:	3ff00000 	.word	0x3ff00000

0800a97c <__d2b>:
 800a97c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a980:	2101      	movs	r1, #1
 800a982:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
 800a986:	4690      	mov	r8, r2
 800a988:	4699      	mov	r9, r3
 800a98a:	f7ff fc11 	bl	800a1b0 <_Balloc>
 800a98e:	4604      	mov	r4, r0
 800a990:	b930      	cbnz	r0, 800a9a0 <__d2b+0x24>
 800a992:	4602      	mov	r2, r0
 800a994:	4b24      	ldr	r3, [pc, #144]	; (800aa28 <__d2b+0xac>)
 800a996:	4825      	ldr	r0, [pc, #148]	; (800aa2c <__d2b+0xb0>)
 800a998:	f240 310a 	movw	r1, #778	; 0x30a
 800a99c:	f000 fb06 	bl	800afac <__assert_func>
 800a9a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a9a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9a8:	bb2d      	cbnz	r5, 800a9f6 <__d2b+0x7a>
 800a9aa:	f1b8 0200 	subs.w	r2, r8, #0
 800a9ae:	9301      	str	r3, [sp, #4]
 800a9b0:	d026      	beq.n	800aa00 <__d2b+0x84>
 800a9b2:	4668      	mov	r0, sp
 800a9b4:	9200      	str	r2, [sp, #0]
 800a9b6:	f7ff fd11 	bl	800a3dc <__lo0bits>
 800a9ba:	9900      	ldr	r1, [sp, #0]
 800a9bc:	b1f0      	cbz	r0, 800a9fc <__d2b+0x80>
 800a9be:	9a01      	ldr	r2, [sp, #4]
 800a9c0:	f1c0 0320 	rsb	r3, r0, #32
 800a9c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a9c8:	430b      	orrs	r3, r1
 800a9ca:	40c2      	lsrs	r2, r0
 800a9cc:	6163      	str	r3, [r4, #20]
 800a9ce:	9201      	str	r2, [sp, #4]
 800a9d0:	9b01      	ldr	r3, [sp, #4]
 800a9d2:	61a3      	str	r3, [r4, #24]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	bf14      	ite	ne
 800a9d8:	2202      	movne	r2, #2
 800a9da:	2201      	moveq	r2, #1
 800a9dc:	6122      	str	r2, [r4, #16]
 800a9de:	b1c5      	cbz	r5, 800aa12 <__d2b+0x96>
 800a9e0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a9e4:	4405      	add	r5, r0
 800a9e6:	603d      	str	r5, [r7, #0]
 800a9e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a9ec:	6030      	str	r0, [r6, #0]
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	b003      	add	sp, #12
 800a9f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a9fa:	e7d6      	b.n	800a9aa <__d2b+0x2e>
 800a9fc:	6161      	str	r1, [r4, #20]
 800a9fe:	e7e7      	b.n	800a9d0 <__d2b+0x54>
 800aa00:	a801      	add	r0, sp, #4
 800aa02:	f7ff fceb 	bl	800a3dc <__lo0bits>
 800aa06:	9b01      	ldr	r3, [sp, #4]
 800aa08:	6163      	str	r3, [r4, #20]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	6122      	str	r2, [r4, #16]
 800aa0e:	3020      	adds	r0, #32
 800aa10:	e7e5      	b.n	800a9de <__d2b+0x62>
 800aa12:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa16:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aa1a:	6038      	str	r0, [r7, #0]
 800aa1c:	6918      	ldr	r0, [r3, #16]
 800aa1e:	f7ff fcbd 	bl	800a39c <__hi0bits>
 800aa22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa26:	e7e1      	b.n	800a9ec <__d2b+0x70>
 800aa28:	0800dd64 	.word	0x0800dd64
 800aa2c:	0800ddf4 	.word	0x0800ddf4

0800aa30 <__ratio>:
 800aa30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa34:	4688      	mov	r8, r1
 800aa36:	4669      	mov	r1, sp
 800aa38:	4681      	mov	r9, r0
 800aa3a:	f7ff ff4b 	bl	800a8d4 <__b2d>
 800aa3e:	460f      	mov	r7, r1
 800aa40:	4604      	mov	r4, r0
 800aa42:	460d      	mov	r5, r1
 800aa44:	4640      	mov	r0, r8
 800aa46:	a901      	add	r1, sp, #4
 800aa48:	f7ff ff44 	bl	800a8d4 <__b2d>
 800aa4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa50:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800aa54:	eba3 0c02 	sub.w	ip, r3, r2
 800aa58:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aa5c:	1a9b      	subs	r3, r3, r2
 800aa5e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	bfd5      	itete	le
 800aa66:	460a      	movle	r2, r1
 800aa68:	462a      	movgt	r2, r5
 800aa6a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aa6e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aa72:	468b      	mov	fp, r1
 800aa74:	bfd8      	it	le
 800aa76:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800aa7a:	465b      	mov	r3, fp
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	4639      	mov	r1, r7
 800aa80:	4620      	mov	r0, r4
 800aa82:	f7f5 fee3 	bl	800084c <__aeabi_ddiv>
 800aa86:	b003      	add	sp, #12
 800aa88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa8c <__copybits>:
 800aa8c:	3901      	subs	r1, #1
 800aa8e:	b570      	push	{r4, r5, r6, lr}
 800aa90:	1149      	asrs	r1, r1, #5
 800aa92:	6914      	ldr	r4, [r2, #16]
 800aa94:	3101      	adds	r1, #1
 800aa96:	f102 0314 	add.w	r3, r2, #20
 800aa9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aa9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aaa2:	1f05      	subs	r5, r0, #4
 800aaa4:	42a3      	cmp	r3, r4
 800aaa6:	d30c      	bcc.n	800aac2 <__copybits+0x36>
 800aaa8:	1aa3      	subs	r3, r4, r2
 800aaaa:	3b11      	subs	r3, #17
 800aaac:	f023 0303 	bic.w	r3, r3, #3
 800aab0:	3211      	adds	r2, #17
 800aab2:	42a2      	cmp	r2, r4
 800aab4:	bf88      	it	hi
 800aab6:	2300      	movhi	r3, #0
 800aab8:	4418      	add	r0, r3
 800aaba:	2300      	movs	r3, #0
 800aabc:	4288      	cmp	r0, r1
 800aabe:	d305      	bcc.n	800aacc <__copybits+0x40>
 800aac0:	bd70      	pop	{r4, r5, r6, pc}
 800aac2:	f853 6b04 	ldr.w	r6, [r3], #4
 800aac6:	f845 6f04 	str.w	r6, [r5, #4]!
 800aaca:	e7eb      	b.n	800aaa4 <__copybits+0x18>
 800aacc:	f840 3b04 	str.w	r3, [r0], #4
 800aad0:	e7f4      	b.n	800aabc <__copybits+0x30>

0800aad2 <__any_on>:
 800aad2:	f100 0214 	add.w	r2, r0, #20
 800aad6:	6900      	ldr	r0, [r0, #16]
 800aad8:	114b      	asrs	r3, r1, #5
 800aada:	4298      	cmp	r0, r3
 800aadc:	b510      	push	{r4, lr}
 800aade:	db11      	blt.n	800ab04 <__any_on+0x32>
 800aae0:	dd0a      	ble.n	800aaf8 <__any_on+0x26>
 800aae2:	f011 011f 	ands.w	r1, r1, #31
 800aae6:	d007      	beq.n	800aaf8 <__any_on+0x26>
 800aae8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aaec:	fa24 f001 	lsr.w	r0, r4, r1
 800aaf0:	fa00 f101 	lsl.w	r1, r0, r1
 800aaf4:	428c      	cmp	r4, r1
 800aaf6:	d10b      	bne.n	800ab10 <__any_on+0x3e>
 800aaf8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d803      	bhi.n	800ab08 <__any_on+0x36>
 800ab00:	2000      	movs	r0, #0
 800ab02:	bd10      	pop	{r4, pc}
 800ab04:	4603      	mov	r3, r0
 800ab06:	e7f7      	b.n	800aaf8 <__any_on+0x26>
 800ab08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab0c:	2900      	cmp	r1, #0
 800ab0e:	d0f5      	beq.n	800aafc <__any_on+0x2a>
 800ab10:	2001      	movs	r0, #1
 800ab12:	e7f6      	b.n	800ab02 <__any_on+0x30>

0800ab14 <_calloc_r>:
 800ab14:	b513      	push	{r0, r1, r4, lr}
 800ab16:	434a      	muls	r2, r1
 800ab18:	4611      	mov	r1, r2
 800ab1a:	9201      	str	r2, [sp, #4]
 800ab1c:	f000 f85a 	bl	800abd4 <_malloc_r>
 800ab20:	4604      	mov	r4, r0
 800ab22:	b118      	cbz	r0, 800ab2c <_calloc_r+0x18>
 800ab24:	9a01      	ldr	r2, [sp, #4]
 800ab26:	2100      	movs	r1, #0
 800ab28:	f7fc fbce 	bl	80072c8 <memset>
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	b002      	add	sp, #8
 800ab30:	bd10      	pop	{r4, pc}
	...

0800ab34 <_free_r>:
 800ab34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab36:	2900      	cmp	r1, #0
 800ab38:	d048      	beq.n	800abcc <_free_r+0x98>
 800ab3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab3e:	9001      	str	r0, [sp, #4]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	f1a1 0404 	sub.w	r4, r1, #4
 800ab46:	bfb8      	it	lt
 800ab48:	18e4      	addlt	r4, r4, r3
 800ab4a:	f000 fa79 	bl	800b040 <__malloc_lock>
 800ab4e:	4a20      	ldr	r2, [pc, #128]	; (800abd0 <_free_r+0x9c>)
 800ab50:	9801      	ldr	r0, [sp, #4]
 800ab52:	6813      	ldr	r3, [r2, #0]
 800ab54:	4615      	mov	r5, r2
 800ab56:	b933      	cbnz	r3, 800ab66 <_free_r+0x32>
 800ab58:	6063      	str	r3, [r4, #4]
 800ab5a:	6014      	str	r4, [r2, #0]
 800ab5c:	b003      	add	sp, #12
 800ab5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab62:	f000 ba73 	b.w	800b04c <__malloc_unlock>
 800ab66:	42a3      	cmp	r3, r4
 800ab68:	d90b      	bls.n	800ab82 <_free_r+0x4e>
 800ab6a:	6821      	ldr	r1, [r4, #0]
 800ab6c:	1862      	adds	r2, r4, r1
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	bf04      	itt	eq
 800ab72:	681a      	ldreq	r2, [r3, #0]
 800ab74:	685b      	ldreq	r3, [r3, #4]
 800ab76:	6063      	str	r3, [r4, #4]
 800ab78:	bf04      	itt	eq
 800ab7a:	1852      	addeq	r2, r2, r1
 800ab7c:	6022      	streq	r2, [r4, #0]
 800ab7e:	602c      	str	r4, [r5, #0]
 800ab80:	e7ec      	b.n	800ab5c <_free_r+0x28>
 800ab82:	461a      	mov	r2, r3
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	b10b      	cbz	r3, 800ab8c <_free_r+0x58>
 800ab88:	42a3      	cmp	r3, r4
 800ab8a:	d9fa      	bls.n	800ab82 <_free_r+0x4e>
 800ab8c:	6811      	ldr	r1, [r2, #0]
 800ab8e:	1855      	adds	r5, r2, r1
 800ab90:	42a5      	cmp	r5, r4
 800ab92:	d10b      	bne.n	800abac <_free_r+0x78>
 800ab94:	6824      	ldr	r4, [r4, #0]
 800ab96:	4421      	add	r1, r4
 800ab98:	1854      	adds	r4, r2, r1
 800ab9a:	42a3      	cmp	r3, r4
 800ab9c:	6011      	str	r1, [r2, #0]
 800ab9e:	d1dd      	bne.n	800ab5c <_free_r+0x28>
 800aba0:	681c      	ldr	r4, [r3, #0]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	6053      	str	r3, [r2, #4]
 800aba6:	4421      	add	r1, r4
 800aba8:	6011      	str	r1, [r2, #0]
 800abaa:	e7d7      	b.n	800ab5c <_free_r+0x28>
 800abac:	d902      	bls.n	800abb4 <_free_r+0x80>
 800abae:	230c      	movs	r3, #12
 800abb0:	6003      	str	r3, [r0, #0]
 800abb2:	e7d3      	b.n	800ab5c <_free_r+0x28>
 800abb4:	6825      	ldr	r5, [r4, #0]
 800abb6:	1961      	adds	r1, r4, r5
 800abb8:	428b      	cmp	r3, r1
 800abba:	bf04      	itt	eq
 800abbc:	6819      	ldreq	r1, [r3, #0]
 800abbe:	685b      	ldreq	r3, [r3, #4]
 800abc0:	6063      	str	r3, [r4, #4]
 800abc2:	bf04      	itt	eq
 800abc4:	1949      	addeq	r1, r1, r5
 800abc6:	6021      	streq	r1, [r4, #0]
 800abc8:	6054      	str	r4, [r2, #4]
 800abca:	e7c7      	b.n	800ab5c <_free_r+0x28>
 800abcc:	b003      	add	sp, #12
 800abce:	bd30      	pop	{r4, r5, pc}
 800abd0:	200002c8 	.word	0x200002c8

0800abd4 <_malloc_r>:
 800abd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd6:	1ccd      	adds	r5, r1, #3
 800abd8:	f025 0503 	bic.w	r5, r5, #3
 800abdc:	3508      	adds	r5, #8
 800abde:	2d0c      	cmp	r5, #12
 800abe0:	bf38      	it	cc
 800abe2:	250c      	movcc	r5, #12
 800abe4:	2d00      	cmp	r5, #0
 800abe6:	4606      	mov	r6, r0
 800abe8:	db01      	blt.n	800abee <_malloc_r+0x1a>
 800abea:	42a9      	cmp	r1, r5
 800abec:	d903      	bls.n	800abf6 <_malloc_r+0x22>
 800abee:	230c      	movs	r3, #12
 800abf0:	6033      	str	r3, [r6, #0]
 800abf2:	2000      	movs	r0, #0
 800abf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abf6:	f000 fa23 	bl	800b040 <__malloc_lock>
 800abfa:	4921      	ldr	r1, [pc, #132]	; (800ac80 <_malloc_r+0xac>)
 800abfc:	680a      	ldr	r2, [r1, #0]
 800abfe:	4614      	mov	r4, r2
 800ac00:	b99c      	cbnz	r4, 800ac2a <_malloc_r+0x56>
 800ac02:	4f20      	ldr	r7, [pc, #128]	; (800ac84 <_malloc_r+0xb0>)
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	b923      	cbnz	r3, 800ac12 <_malloc_r+0x3e>
 800ac08:	4621      	mov	r1, r4
 800ac0a:	4630      	mov	r0, r6
 800ac0c:	f000 f99e 	bl	800af4c <_sbrk_r>
 800ac10:	6038      	str	r0, [r7, #0]
 800ac12:	4629      	mov	r1, r5
 800ac14:	4630      	mov	r0, r6
 800ac16:	f000 f999 	bl	800af4c <_sbrk_r>
 800ac1a:	1c43      	adds	r3, r0, #1
 800ac1c:	d123      	bne.n	800ac66 <_malloc_r+0x92>
 800ac1e:	230c      	movs	r3, #12
 800ac20:	6033      	str	r3, [r6, #0]
 800ac22:	4630      	mov	r0, r6
 800ac24:	f000 fa12 	bl	800b04c <__malloc_unlock>
 800ac28:	e7e3      	b.n	800abf2 <_malloc_r+0x1e>
 800ac2a:	6823      	ldr	r3, [r4, #0]
 800ac2c:	1b5b      	subs	r3, r3, r5
 800ac2e:	d417      	bmi.n	800ac60 <_malloc_r+0x8c>
 800ac30:	2b0b      	cmp	r3, #11
 800ac32:	d903      	bls.n	800ac3c <_malloc_r+0x68>
 800ac34:	6023      	str	r3, [r4, #0]
 800ac36:	441c      	add	r4, r3
 800ac38:	6025      	str	r5, [r4, #0]
 800ac3a:	e004      	b.n	800ac46 <_malloc_r+0x72>
 800ac3c:	6863      	ldr	r3, [r4, #4]
 800ac3e:	42a2      	cmp	r2, r4
 800ac40:	bf0c      	ite	eq
 800ac42:	600b      	streq	r3, [r1, #0]
 800ac44:	6053      	strne	r3, [r2, #4]
 800ac46:	4630      	mov	r0, r6
 800ac48:	f000 fa00 	bl	800b04c <__malloc_unlock>
 800ac4c:	f104 000b 	add.w	r0, r4, #11
 800ac50:	1d23      	adds	r3, r4, #4
 800ac52:	f020 0007 	bic.w	r0, r0, #7
 800ac56:	1ac2      	subs	r2, r0, r3
 800ac58:	d0cc      	beq.n	800abf4 <_malloc_r+0x20>
 800ac5a:	1a1b      	subs	r3, r3, r0
 800ac5c:	50a3      	str	r3, [r4, r2]
 800ac5e:	e7c9      	b.n	800abf4 <_malloc_r+0x20>
 800ac60:	4622      	mov	r2, r4
 800ac62:	6864      	ldr	r4, [r4, #4]
 800ac64:	e7cc      	b.n	800ac00 <_malloc_r+0x2c>
 800ac66:	1cc4      	adds	r4, r0, #3
 800ac68:	f024 0403 	bic.w	r4, r4, #3
 800ac6c:	42a0      	cmp	r0, r4
 800ac6e:	d0e3      	beq.n	800ac38 <_malloc_r+0x64>
 800ac70:	1a21      	subs	r1, r4, r0
 800ac72:	4630      	mov	r0, r6
 800ac74:	f000 f96a 	bl	800af4c <_sbrk_r>
 800ac78:	3001      	adds	r0, #1
 800ac7a:	d1dd      	bne.n	800ac38 <_malloc_r+0x64>
 800ac7c:	e7cf      	b.n	800ac1e <_malloc_r+0x4a>
 800ac7e:	bf00      	nop
 800ac80:	200002c8 	.word	0x200002c8
 800ac84:	200002cc 	.word	0x200002cc

0800ac88 <__ssputs_r>:
 800ac88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac8c:	688e      	ldr	r6, [r1, #8]
 800ac8e:	429e      	cmp	r6, r3
 800ac90:	4682      	mov	sl, r0
 800ac92:	460c      	mov	r4, r1
 800ac94:	4690      	mov	r8, r2
 800ac96:	461f      	mov	r7, r3
 800ac98:	d838      	bhi.n	800ad0c <__ssputs_r+0x84>
 800ac9a:	898a      	ldrh	r2, [r1, #12]
 800ac9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aca0:	d032      	beq.n	800ad08 <__ssputs_r+0x80>
 800aca2:	6825      	ldr	r5, [r4, #0]
 800aca4:	6909      	ldr	r1, [r1, #16]
 800aca6:	eba5 0901 	sub.w	r9, r5, r1
 800acaa:	6965      	ldr	r5, [r4, #20]
 800acac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acb4:	3301      	adds	r3, #1
 800acb6:	444b      	add	r3, r9
 800acb8:	106d      	asrs	r5, r5, #1
 800acba:	429d      	cmp	r5, r3
 800acbc:	bf38      	it	cc
 800acbe:	461d      	movcc	r5, r3
 800acc0:	0553      	lsls	r3, r2, #21
 800acc2:	d531      	bpl.n	800ad28 <__ssputs_r+0xa0>
 800acc4:	4629      	mov	r1, r5
 800acc6:	f7ff ff85 	bl	800abd4 <_malloc_r>
 800acca:	4606      	mov	r6, r0
 800accc:	b950      	cbnz	r0, 800ace4 <__ssputs_r+0x5c>
 800acce:	230c      	movs	r3, #12
 800acd0:	f8ca 3000 	str.w	r3, [sl]
 800acd4:	89a3      	ldrh	r3, [r4, #12]
 800acd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acda:	81a3      	strh	r3, [r4, #12]
 800acdc:	f04f 30ff 	mov.w	r0, #4294967295
 800ace0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ace4:	6921      	ldr	r1, [r4, #16]
 800ace6:	464a      	mov	r2, r9
 800ace8:	f7ff fa54 	bl	800a194 <memcpy>
 800acec:	89a3      	ldrh	r3, [r4, #12]
 800acee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800acf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acf6:	81a3      	strh	r3, [r4, #12]
 800acf8:	6126      	str	r6, [r4, #16]
 800acfa:	6165      	str	r5, [r4, #20]
 800acfc:	444e      	add	r6, r9
 800acfe:	eba5 0509 	sub.w	r5, r5, r9
 800ad02:	6026      	str	r6, [r4, #0]
 800ad04:	60a5      	str	r5, [r4, #8]
 800ad06:	463e      	mov	r6, r7
 800ad08:	42be      	cmp	r6, r7
 800ad0a:	d900      	bls.n	800ad0e <__ssputs_r+0x86>
 800ad0c:	463e      	mov	r6, r7
 800ad0e:	4632      	mov	r2, r6
 800ad10:	6820      	ldr	r0, [r4, #0]
 800ad12:	4641      	mov	r1, r8
 800ad14:	f000 f97a 	bl	800b00c <memmove>
 800ad18:	68a3      	ldr	r3, [r4, #8]
 800ad1a:	6822      	ldr	r2, [r4, #0]
 800ad1c:	1b9b      	subs	r3, r3, r6
 800ad1e:	4432      	add	r2, r6
 800ad20:	60a3      	str	r3, [r4, #8]
 800ad22:	6022      	str	r2, [r4, #0]
 800ad24:	2000      	movs	r0, #0
 800ad26:	e7db      	b.n	800ace0 <__ssputs_r+0x58>
 800ad28:	462a      	mov	r2, r5
 800ad2a:	f000 f995 	bl	800b058 <_realloc_r>
 800ad2e:	4606      	mov	r6, r0
 800ad30:	2800      	cmp	r0, #0
 800ad32:	d1e1      	bne.n	800acf8 <__ssputs_r+0x70>
 800ad34:	6921      	ldr	r1, [r4, #16]
 800ad36:	4650      	mov	r0, sl
 800ad38:	f7ff fefc 	bl	800ab34 <_free_r>
 800ad3c:	e7c7      	b.n	800acce <__ssputs_r+0x46>
	...

0800ad40 <_svfiprintf_r>:
 800ad40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad44:	4698      	mov	r8, r3
 800ad46:	898b      	ldrh	r3, [r1, #12]
 800ad48:	061b      	lsls	r3, r3, #24
 800ad4a:	b09d      	sub	sp, #116	; 0x74
 800ad4c:	4607      	mov	r7, r0
 800ad4e:	460d      	mov	r5, r1
 800ad50:	4614      	mov	r4, r2
 800ad52:	d50e      	bpl.n	800ad72 <_svfiprintf_r+0x32>
 800ad54:	690b      	ldr	r3, [r1, #16]
 800ad56:	b963      	cbnz	r3, 800ad72 <_svfiprintf_r+0x32>
 800ad58:	2140      	movs	r1, #64	; 0x40
 800ad5a:	f7ff ff3b 	bl	800abd4 <_malloc_r>
 800ad5e:	6028      	str	r0, [r5, #0]
 800ad60:	6128      	str	r0, [r5, #16]
 800ad62:	b920      	cbnz	r0, 800ad6e <_svfiprintf_r+0x2e>
 800ad64:	230c      	movs	r3, #12
 800ad66:	603b      	str	r3, [r7, #0]
 800ad68:	f04f 30ff 	mov.w	r0, #4294967295
 800ad6c:	e0d1      	b.n	800af12 <_svfiprintf_r+0x1d2>
 800ad6e:	2340      	movs	r3, #64	; 0x40
 800ad70:	616b      	str	r3, [r5, #20]
 800ad72:	2300      	movs	r3, #0
 800ad74:	9309      	str	r3, [sp, #36]	; 0x24
 800ad76:	2320      	movs	r3, #32
 800ad78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad80:	2330      	movs	r3, #48	; 0x30
 800ad82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800af2c <_svfiprintf_r+0x1ec>
 800ad86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad8a:	f04f 0901 	mov.w	r9, #1
 800ad8e:	4623      	mov	r3, r4
 800ad90:	469a      	mov	sl, r3
 800ad92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad96:	b10a      	cbz	r2, 800ad9c <_svfiprintf_r+0x5c>
 800ad98:	2a25      	cmp	r2, #37	; 0x25
 800ad9a:	d1f9      	bne.n	800ad90 <_svfiprintf_r+0x50>
 800ad9c:	ebba 0b04 	subs.w	fp, sl, r4
 800ada0:	d00b      	beq.n	800adba <_svfiprintf_r+0x7a>
 800ada2:	465b      	mov	r3, fp
 800ada4:	4622      	mov	r2, r4
 800ada6:	4629      	mov	r1, r5
 800ada8:	4638      	mov	r0, r7
 800adaa:	f7ff ff6d 	bl	800ac88 <__ssputs_r>
 800adae:	3001      	adds	r0, #1
 800adb0:	f000 80aa 	beq.w	800af08 <_svfiprintf_r+0x1c8>
 800adb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adb6:	445a      	add	r2, fp
 800adb8:	9209      	str	r2, [sp, #36]	; 0x24
 800adba:	f89a 3000 	ldrb.w	r3, [sl]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	f000 80a2 	beq.w	800af08 <_svfiprintf_r+0x1c8>
 800adc4:	2300      	movs	r3, #0
 800adc6:	f04f 32ff 	mov.w	r2, #4294967295
 800adca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adce:	f10a 0a01 	add.w	sl, sl, #1
 800add2:	9304      	str	r3, [sp, #16]
 800add4:	9307      	str	r3, [sp, #28]
 800add6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adda:	931a      	str	r3, [sp, #104]	; 0x68
 800addc:	4654      	mov	r4, sl
 800adde:	2205      	movs	r2, #5
 800ade0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ade4:	4851      	ldr	r0, [pc, #324]	; (800af2c <_svfiprintf_r+0x1ec>)
 800ade6:	f7f5 f9fb 	bl	80001e0 <memchr>
 800adea:	9a04      	ldr	r2, [sp, #16]
 800adec:	b9d8      	cbnz	r0, 800ae26 <_svfiprintf_r+0xe6>
 800adee:	06d0      	lsls	r0, r2, #27
 800adf0:	bf44      	itt	mi
 800adf2:	2320      	movmi	r3, #32
 800adf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adf8:	0711      	lsls	r1, r2, #28
 800adfa:	bf44      	itt	mi
 800adfc:	232b      	movmi	r3, #43	; 0x2b
 800adfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae02:	f89a 3000 	ldrb.w	r3, [sl]
 800ae06:	2b2a      	cmp	r3, #42	; 0x2a
 800ae08:	d015      	beq.n	800ae36 <_svfiprintf_r+0xf6>
 800ae0a:	9a07      	ldr	r2, [sp, #28]
 800ae0c:	4654      	mov	r4, sl
 800ae0e:	2000      	movs	r0, #0
 800ae10:	f04f 0c0a 	mov.w	ip, #10
 800ae14:	4621      	mov	r1, r4
 800ae16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae1a:	3b30      	subs	r3, #48	; 0x30
 800ae1c:	2b09      	cmp	r3, #9
 800ae1e:	d94e      	bls.n	800aebe <_svfiprintf_r+0x17e>
 800ae20:	b1b0      	cbz	r0, 800ae50 <_svfiprintf_r+0x110>
 800ae22:	9207      	str	r2, [sp, #28]
 800ae24:	e014      	b.n	800ae50 <_svfiprintf_r+0x110>
 800ae26:	eba0 0308 	sub.w	r3, r0, r8
 800ae2a:	fa09 f303 	lsl.w	r3, r9, r3
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	9304      	str	r3, [sp, #16]
 800ae32:	46a2      	mov	sl, r4
 800ae34:	e7d2      	b.n	800addc <_svfiprintf_r+0x9c>
 800ae36:	9b03      	ldr	r3, [sp, #12]
 800ae38:	1d19      	adds	r1, r3, #4
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	9103      	str	r1, [sp, #12]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	bfbb      	ittet	lt
 800ae42:	425b      	neglt	r3, r3
 800ae44:	f042 0202 	orrlt.w	r2, r2, #2
 800ae48:	9307      	strge	r3, [sp, #28]
 800ae4a:	9307      	strlt	r3, [sp, #28]
 800ae4c:	bfb8      	it	lt
 800ae4e:	9204      	strlt	r2, [sp, #16]
 800ae50:	7823      	ldrb	r3, [r4, #0]
 800ae52:	2b2e      	cmp	r3, #46	; 0x2e
 800ae54:	d10c      	bne.n	800ae70 <_svfiprintf_r+0x130>
 800ae56:	7863      	ldrb	r3, [r4, #1]
 800ae58:	2b2a      	cmp	r3, #42	; 0x2a
 800ae5a:	d135      	bne.n	800aec8 <_svfiprintf_r+0x188>
 800ae5c:	9b03      	ldr	r3, [sp, #12]
 800ae5e:	1d1a      	adds	r2, r3, #4
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	9203      	str	r2, [sp, #12]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	bfb8      	it	lt
 800ae68:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae6c:	3402      	adds	r4, #2
 800ae6e:	9305      	str	r3, [sp, #20]
 800ae70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800af3c <_svfiprintf_r+0x1fc>
 800ae74:	7821      	ldrb	r1, [r4, #0]
 800ae76:	2203      	movs	r2, #3
 800ae78:	4650      	mov	r0, sl
 800ae7a:	f7f5 f9b1 	bl	80001e0 <memchr>
 800ae7e:	b140      	cbz	r0, 800ae92 <_svfiprintf_r+0x152>
 800ae80:	2340      	movs	r3, #64	; 0x40
 800ae82:	eba0 000a 	sub.w	r0, r0, sl
 800ae86:	fa03 f000 	lsl.w	r0, r3, r0
 800ae8a:	9b04      	ldr	r3, [sp, #16]
 800ae8c:	4303      	orrs	r3, r0
 800ae8e:	3401      	adds	r4, #1
 800ae90:	9304      	str	r3, [sp, #16]
 800ae92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae96:	4826      	ldr	r0, [pc, #152]	; (800af30 <_svfiprintf_r+0x1f0>)
 800ae98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae9c:	2206      	movs	r2, #6
 800ae9e:	f7f5 f99f 	bl	80001e0 <memchr>
 800aea2:	2800      	cmp	r0, #0
 800aea4:	d038      	beq.n	800af18 <_svfiprintf_r+0x1d8>
 800aea6:	4b23      	ldr	r3, [pc, #140]	; (800af34 <_svfiprintf_r+0x1f4>)
 800aea8:	bb1b      	cbnz	r3, 800aef2 <_svfiprintf_r+0x1b2>
 800aeaa:	9b03      	ldr	r3, [sp, #12]
 800aeac:	3307      	adds	r3, #7
 800aeae:	f023 0307 	bic.w	r3, r3, #7
 800aeb2:	3308      	adds	r3, #8
 800aeb4:	9303      	str	r3, [sp, #12]
 800aeb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeb8:	4433      	add	r3, r6
 800aeba:	9309      	str	r3, [sp, #36]	; 0x24
 800aebc:	e767      	b.n	800ad8e <_svfiprintf_r+0x4e>
 800aebe:	fb0c 3202 	mla	r2, ip, r2, r3
 800aec2:	460c      	mov	r4, r1
 800aec4:	2001      	movs	r0, #1
 800aec6:	e7a5      	b.n	800ae14 <_svfiprintf_r+0xd4>
 800aec8:	2300      	movs	r3, #0
 800aeca:	3401      	adds	r4, #1
 800aecc:	9305      	str	r3, [sp, #20]
 800aece:	4619      	mov	r1, r3
 800aed0:	f04f 0c0a 	mov.w	ip, #10
 800aed4:	4620      	mov	r0, r4
 800aed6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aeda:	3a30      	subs	r2, #48	; 0x30
 800aedc:	2a09      	cmp	r2, #9
 800aede:	d903      	bls.n	800aee8 <_svfiprintf_r+0x1a8>
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d0c5      	beq.n	800ae70 <_svfiprintf_r+0x130>
 800aee4:	9105      	str	r1, [sp, #20]
 800aee6:	e7c3      	b.n	800ae70 <_svfiprintf_r+0x130>
 800aee8:	fb0c 2101 	mla	r1, ip, r1, r2
 800aeec:	4604      	mov	r4, r0
 800aeee:	2301      	movs	r3, #1
 800aef0:	e7f0      	b.n	800aed4 <_svfiprintf_r+0x194>
 800aef2:	ab03      	add	r3, sp, #12
 800aef4:	9300      	str	r3, [sp, #0]
 800aef6:	462a      	mov	r2, r5
 800aef8:	4b0f      	ldr	r3, [pc, #60]	; (800af38 <_svfiprintf_r+0x1f8>)
 800aefa:	a904      	add	r1, sp, #16
 800aefc:	4638      	mov	r0, r7
 800aefe:	f7fc fa8b 	bl	8007418 <_printf_float>
 800af02:	1c42      	adds	r2, r0, #1
 800af04:	4606      	mov	r6, r0
 800af06:	d1d6      	bne.n	800aeb6 <_svfiprintf_r+0x176>
 800af08:	89ab      	ldrh	r3, [r5, #12]
 800af0a:	065b      	lsls	r3, r3, #25
 800af0c:	f53f af2c 	bmi.w	800ad68 <_svfiprintf_r+0x28>
 800af10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af12:	b01d      	add	sp, #116	; 0x74
 800af14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af18:	ab03      	add	r3, sp, #12
 800af1a:	9300      	str	r3, [sp, #0]
 800af1c:	462a      	mov	r2, r5
 800af1e:	4b06      	ldr	r3, [pc, #24]	; (800af38 <_svfiprintf_r+0x1f8>)
 800af20:	a904      	add	r1, sp, #16
 800af22:	4638      	mov	r0, r7
 800af24:	f7fc fd1e 	bl	8007964 <_printf_i>
 800af28:	e7eb      	b.n	800af02 <_svfiprintf_r+0x1c2>
 800af2a:	bf00      	nop
 800af2c:	0800df54 	.word	0x0800df54
 800af30:	0800df5e 	.word	0x0800df5e
 800af34:	08007419 	.word	0x08007419
 800af38:	0800ac89 	.word	0x0800ac89
 800af3c:	0800df5a 	.word	0x0800df5a

0800af40 <nan>:
 800af40:	4901      	ldr	r1, [pc, #4]	; (800af48 <nan+0x8>)
 800af42:	2000      	movs	r0, #0
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop
 800af48:	7ff80000 	.word	0x7ff80000

0800af4c <_sbrk_r>:
 800af4c:	b538      	push	{r3, r4, r5, lr}
 800af4e:	4d06      	ldr	r5, [pc, #24]	; (800af68 <_sbrk_r+0x1c>)
 800af50:	2300      	movs	r3, #0
 800af52:	4604      	mov	r4, r0
 800af54:	4608      	mov	r0, r1
 800af56:	602b      	str	r3, [r5, #0]
 800af58:	f7f8 fa08 	bl	800336c <_sbrk>
 800af5c:	1c43      	adds	r3, r0, #1
 800af5e:	d102      	bne.n	800af66 <_sbrk_r+0x1a>
 800af60:	682b      	ldr	r3, [r5, #0]
 800af62:	b103      	cbz	r3, 800af66 <_sbrk_r+0x1a>
 800af64:	6023      	str	r3, [r4, #0]
 800af66:	bd38      	pop	{r3, r4, r5, pc}
 800af68:	200004e4 	.word	0x200004e4

0800af6c <strncmp>:
 800af6c:	b510      	push	{r4, lr}
 800af6e:	b16a      	cbz	r2, 800af8c <strncmp+0x20>
 800af70:	3901      	subs	r1, #1
 800af72:	1884      	adds	r4, r0, r2
 800af74:	f810 3b01 	ldrb.w	r3, [r0], #1
 800af78:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d103      	bne.n	800af88 <strncmp+0x1c>
 800af80:	42a0      	cmp	r0, r4
 800af82:	d001      	beq.n	800af88 <strncmp+0x1c>
 800af84:	2b00      	cmp	r3, #0
 800af86:	d1f5      	bne.n	800af74 <strncmp+0x8>
 800af88:	1a98      	subs	r0, r3, r2
 800af8a:	bd10      	pop	{r4, pc}
 800af8c:	4610      	mov	r0, r2
 800af8e:	e7fc      	b.n	800af8a <strncmp+0x1e>

0800af90 <__ascii_wctomb>:
 800af90:	b149      	cbz	r1, 800afa6 <__ascii_wctomb+0x16>
 800af92:	2aff      	cmp	r2, #255	; 0xff
 800af94:	bf85      	ittet	hi
 800af96:	238a      	movhi	r3, #138	; 0x8a
 800af98:	6003      	strhi	r3, [r0, #0]
 800af9a:	700a      	strbls	r2, [r1, #0]
 800af9c:	f04f 30ff 	movhi.w	r0, #4294967295
 800afa0:	bf98      	it	ls
 800afa2:	2001      	movls	r0, #1
 800afa4:	4770      	bx	lr
 800afa6:	4608      	mov	r0, r1
 800afa8:	4770      	bx	lr
	...

0800afac <__assert_func>:
 800afac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afae:	4614      	mov	r4, r2
 800afb0:	461a      	mov	r2, r3
 800afb2:	4b09      	ldr	r3, [pc, #36]	; (800afd8 <__assert_func+0x2c>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4605      	mov	r5, r0
 800afb8:	68d8      	ldr	r0, [r3, #12]
 800afba:	b14c      	cbz	r4, 800afd0 <__assert_func+0x24>
 800afbc:	4b07      	ldr	r3, [pc, #28]	; (800afdc <__assert_func+0x30>)
 800afbe:	9100      	str	r1, [sp, #0]
 800afc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800afc4:	4906      	ldr	r1, [pc, #24]	; (800afe0 <__assert_func+0x34>)
 800afc6:	462b      	mov	r3, r5
 800afc8:	f000 f80e 	bl	800afe8 <fiprintf>
 800afcc:	f000 fa84 	bl	800b4d8 <abort>
 800afd0:	4b04      	ldr	r3, [pc, #16]	; (800afe4 <__assert_func+0x38>)
 800afd2:	461c      	mov	r4, r3
 800afd4:	e7f3      	b.n	800afbe <__assert_func+0x12>
 800afd6:	bf00      	nop
 800afd8:	200000bc 	.word	0x200000bc
 800afdc:	0800df65 	.word	0x0800df65
 800afe0:	0800df72 	.word	0x0800df72
 800afe4:	0800dfa0 	.word	0x0800dfa0

0800afe8 <fiprintf>:
 800afe8:	b40e      	push	{r1, r2, r3}
 800afea:	b503      	push	{r0, r1, lr}
 800afec:	4601      	mov	r1, r0
 800afee:	ab03      	add	r3, sp, #12
 800aff0:	4805      	ldr	r0, [pc, #20]	; (800b008 <fiprintf+0x20>)
 800aff2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aff6:	6800      	ldr	r0, [r0, #0]
 800aff8:	9301      	str	r3, [sp, #4]
 800affa:	f000 f87d 	bl	800b0f8 <_vfiprintf_r>
 800affe:	b002      	add	sp, #8
 800b000:	f85d eb04 	ldr.w	lr, [sp], #4
 800b004:	b003      	add	sp, #12
 800b006:	4770      	bx	lr
 800b008:	200000bc 	.word	0x200000bc

0800b00c <memmove>:
 800b00c:	4288      	cmp	r0, r1
 800b00e:	b510      	push	{r4, lr}
 800b010:	eb01 0402 	add.w	r4, r1, r2
 800b014:	d902      	bls.n	800b01c <memmove+0x10>
 800b016:	4284      	cmp	r4, r0
 800b018:	4623      	mov	r3, r4
 800b01a:	d807      	bhi.n	800b02c <memmove+0x20>
 800b01c:	1e43      	subs	r3, r0, #1
 800b01e:	42a1      	cmp	r1, r4
 800b020:	d008      	beq.n	800b034 <memmove+0x28>
 800b022:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b026:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b02a:	e7f8      	b.n	800b01e <memmove+0x12>
 800b02c:	4402      	add	r2, r0
 800b02e:	4601      	mov	r1, r0
 800b030:	428a      	cmp	r2, r1
 800b032:	d100      	bne.n	800b036 <memmove+0x2a>
 800b034:	bd10      	pop	{r4, pc}
 800b036:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b03a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b03e:	e7f7      	b.n	800b030 <memmove+0x24>

0800b040 <__malloc_lock>:
 800b040:	4801      	ldr	r0, [pc, #4]	; (800b048 <__malloc_lock+0x8>)
 800b042:	f000 bc09 	b.w	800b858 <__retarget_lock_acquire_recursive>
 800b046:	bf00      	nop
 800b048:	200004ec 	.word	0x200004ec

0800b04c <__malloc_unlock>:
 800b04c:	4801      	ldr	r0, [pc, #4]	; (800b054 <__malloc_unlock+0x8>)
 800b04e:	f000 bc04 	b.w	800b85a <__retarget_lock_release_recursive>
 800b052:	bf00      	nop
 800b054:	200004ec 	.word	0x200004ec

0800b058 <_realloc_r>:
 800b058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b05a:	4607      	mov	r7, r0
 800b05c:	4614      	mov	r4, r2
 800b05e:	460e      	mov	r6, r1
 800b060:	b921      	cbnz	r1, 800b06c <_realloc_r+0x14>
 800b062:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b066:	4611      	mov	r1, r2
 800b068:	f7ff bdb4 	b.w	800abd4 <_malloc_r>
 800b06c:	b922      	cbnz	r2, 800b078 <_realloc_r+0x20>
 800b06e:	f7ff fd61 	bl	800ab34 <_free_r>
 800b072:	4625      	mov	r5, r4
 800b074:	4628      	mov	r0, r5
 800b076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b078:	f000 fc54 	bl	800b924 <_malloc_usable_size_r>
 800b07c:	42a0      	cmp	r0, r4
 800b07e:	d20f      	bcs.n	800b0a0 <_realloc_r+0x48>
 800b080:	4621      	mov	r1, r4
 800b082:	4638      	mov	r0, r7
 800b084:	f7ff fda6 	bl	800abd4 <_malloc_r>
 800b088:	4605      	mov	r5, r0
 800b08a:	2800      	cmp	r0, #0
 800b08c:	d0f2      	beq.n	800b074 <_realloc_r+0x1c>
 800b08e:	4631      	mov	r1, r6
 800b090:	4622      	mov	r2, r4
 800b092:	f7ff f87f 	bl	800a194 <memcpy>
 800b096:	4631      	mov	r1, r6
 800b098:	4638      	mov	r0, r7
 800b09a:	f7ff fd4b 	bl	800ab34 <_free_r>
 800b09e:	e7e9      	b.n	800b074 <_realloc_r+0x1c>
 800b0a0:	4635      	mov	r5, r6
 800b0a2:	e7e7      	b.n	800b074 <_realloc_r+0x1c>

0800b0a4 <__sfputc_r>:
 800b0a4:	6893      	ldr	r3, [r2, #8]
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	b410      	push	{r4}
 800b0ac:	6093      	str	r3, [r2, #8]
 800b0ae:	da08      	bge.n	800b0c2 <__sfputc_r+0x1e>
 800b0b0:	6994      	ldr	r4, [r2, #24]
 800b0b2:	42a3      	cmp	r3, r4
 800b0b4:	db01      	blt.n	800b0ba <__sfputc_r+0x16>
 800b0b6:	290a      	cmp	r1, #10
 800b0b8:	d103      	bne.n	800b0c2 <__sfputc_r+0x1e>
 800b0ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0be:	f000 b94b 	b.w	800b358 <__swbuf_r>
 800b0c2:	6813      	ldr	r3, [r2, #0]
 800b0c4:	1c58      	adds	r0, r3, #1
 800b0c6:	6010      	str	r0, [r2, #0]
 800b0c8:	7019      	strb	r1, [r3, #0]
 800b0ca:	4608      	mov	r0, r1
 800b0cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0d0:	4770      	bx	lr

0800b0d2 <__sfputs_r>:
 800b0d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0d4:	4606      	mov	r6, r0
 800b0d6:	460f      	mov	r7, r1
 800b0d8:	4614      	mov	r4, r2
 800b0da:	18d5      	adds	r5, r2, r3
 800b0dc:	42ac      	cmp	r4, r5
 800b0de:	d101      	bne.n	800b0e4 <__sfputs_r+0x12>
 800b0e0:	2000      	movs	r0, #0
 800b0e2:	e007      	b.n	800b0f4 <__sfputs_r+0x22>
 800b0e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0e8:	463a      	mov	r2, r7
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	f7ff ffda 	bl	800b0a4 <__sfputc_r>
 800b0f0:	1c43      	adds	r3, r0, #1
 800b0f2:	d1f3      	bne.n	800b0dc <__sfputs_r+0xa>
 800b0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0f8 <_vfiprintf_r>:
 800b0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0fc:	460d      	mov	r5, r1
 800b0fe:	b09d      	sub	sp, #116	; 0x74
 800b100:	4614      	mov	r4, r2
 800b102:	4698      	mov	r8, r3
 800b104:	4606      	mov	r6, r0
 800b106:	b118      	cbz	r0, 800b110 <_vfiprintf_r+0x18>
 800b108:	6983      	ldr	r3, [r0, #24]
 800b10a:	b90b      	cbnz	r3, 800b110 <_vfiprintf_r+0x18>
 800b10c:	f000 fb06 	bl	800b71c <__sinit>
 800b110:	4b89      	ldr	r3, [pc, #548]	; (800b338 <_vfiprintf_r+0x240>)
 800b112:	429d      	cmp	r5, r3
 800b114:	d11b      	bne.n	800b14e <_vfiprintf_r+0x56>
 800b116:	6875      	ldr	r5, [r6, #4]
 800b118:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b11a:	07d9      	lsls	r1, r3, #31
 800b11c:	d405      	bmi.n	800b12a <_vfiprintf_r+0x32>
 800b11e:	89ab      	ldrh	r3, [r5, #12]
 800b120:	059a      	lsls	r2, r3, #22
 800b122:	d402      	bmi.n	800b12a <_vfiprintf_r+0x32>
 800b124:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b126:	f000 fb97 	bl	800b858 <__retarget_lock_acquire_recursive>
 800b12a:	89ab      	ldrh	r3, [r5, #12]
 800b12c:	071b      	lsls	r3, r3, #28
 800b12e:	d501      	bpl.n	800b134 <_vfiprintf_r+0x3c>
 800b130:	692b      	ldr	r3, [r5, #16]
 800b132:	b9eb      	cbnz	r3, 800b170 <_vfiprintf_r+0x78>
 800b134:	4629      	mov	r1, r5
 800b136:	4630      	mov	r0, r6
 800b138:	f000 f960 	bl	800b3fc <__swsetup_r>
 800b13c:	b1c0      	cbz	r0, 800b170 <_vfiprintf_r+0x78>
 800b13e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b140:	07dc      	lsls	r4, r3, #31
 800b142:	d50e      	bpl.n	800b162 <_vfiprintf_r+0x6a>
 800b144:	f04f 30ff 	mov.w	r0, #4294967295
 800b148:	b01d      	add	sp, #116	; 0x74
 800b14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b14e:	4b7b      	ldr	r3, [pc, #492]	; (800b33c <_vfiprintf_r+0x244>)
 800b150:	429d      	cmp	r5, r3
 800b152:	d101      	bne.n	800b158 <_vfiprintf_r+0x60>
 800b154:	68b5      	ldr	r5, [r6, #8]
 800b156:	e7df      	b.n	800b118 <_vfiprintf_r+0x20>
 800b158:	4b79      	ldr	r3, [pc, #484]	; (800b340 <_vfiprintf_r+0x248>)
 800b15a:	429d      	cmp	r5, r3
 800b15c:	bf08      	it	eq
 800b15e:	68f5      	ldreq	r5, [r6, #12]
 800b160:	e7da      	b.n	800b118 <_vfiprintf_r+0x20>
 800b162:	89ab      	ldrh	r3, [r5, #12]
 800b164:	0598      	lsls	r0, r3, #22
 800b166:	d4ed      	bmi.n	800b144 <_vfiprintf_r+0x4c>
 800b168:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b16a:	f000 fb76 	bl	800b85a <__retarget_lock_release_recursive>
 800b16e:	e7e9      	b.n	800b144 <_vfiprintf_r+0x4c>
 800b170:	2300      	movs	r3, #0
 800b172:	9309      	str	r3, [sp, #36]	; 0x24
 800b174:	2320      	movs	r3, #32
 800b176:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b17a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b17e:	2330      	movs	r3, #48	; 0x30
 800b180:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b344 <_vfiprintf_r+0x24c>
 800b184:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b188:	f04f 0901 	mov.w	r9, #1
 800b18c:	4623      	mov	r3, r4
 800b18e:	469a      	mov	sl, r3
 800b190:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b194:	b10a      	cbz	r2, 800b19a <_vfiprintf_r+0xa2>
 800b196:	2a25      	cmp	r2, #37	; 0x25
 800b198:	d1f9      	bne.n	800b18e <_vfiprintf_r+0x96>
 800b19a:	ebba 0b04 	subs.w	fp, sl, r4
 800b19e:	d00b      	beq.n	800b1b8 <_vfiprintf_r+0xc0>
 800b1a0:	465b      	mov	r3, fp
 800b1a2:	4622      	mov	r2, r4
 800b1a4:	4629      	mov	r1, r5
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	f7ff ff93 	bl	800b0d2 <__sfputs_r>
 800b1ac:	3001      	adds	r0, #1
 800b1ae:	f000 80aa 	beq.w	800b306 <_vfiprintf_r+0x20e>
 800b1b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1b4:	445a      	add	r2, fp
 800b1b6:	9209      	str	r2, [sp, #36]	; 0x24
 800b1b8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f000 80a2 	beq.w	800b306 <_vfiprintf_r+0x20e>
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1cc:	f10a 0a01 	add.w	sl, sl, #1
 800b1d0:	9304      	str	r3, [sp, #16]
 800b1d2:	9307      	str	r3, [sp, #28]
 800b1d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1d8:	931a      	str	r3, [sp, #104]	; 0x68
 800b1da:	4654      	mov	r4, sl
 800b1dc:	2205      	movs	r2, #5
 800b1de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1e2:	4858      	ldr	r0, [pc, #352]	; (800b344 <_vfiprintf_r+0x24c>)
 800b1e4:	f7f4 fffc 	bl	80001e0 <memchr>
 800b1e8:	9a04      	ldr	r2, [sp, #16]
 800b1ea:	b9d8      	cbnz	r0, 800b224 <_vfiprintf_r+0x12c>
 800b1ec:	06d1      	lsls	r1, r2, #27
 800b1ee:	bf44      	itt	mi
 800b1f0:	2320      	movmi	r3, #32
 800b1f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1f6:	0713      	lsls	r3, r2, #28
 800b1f8:	bf44      	itt	mi
 800b1fa:	232b      	movmi	r3, #43	; 0x2b
 800b1fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b200:	f89a 3000 	ldrb.w	r3, [sl]
 800b204:	2b2a      	cmp	r3, #42	; 0x2a
 800b206:	d015      	beq.n	800b234 <_vfiprintf_r+0x13c>
 800b208:	9a07      	ldr	r2, [sp, #28]
 800b20a:	4654      	mov	r4, sl
 800b20c:	2000      	movs	r0, #0
 800b20e:	f04f 0c0a 	mov.w	ip, #10
 800b212:	4621      	mov	r1, r4
 800b214:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b218:	3b30      	subs	r3, #48	; 0x30
 800b21a:	2b09      	cmp	r3, #9
 800b21c:	d94e      	bls.n	800b2bc <_vfiprintf_r+0x1c4>
 800b21e:	b1b0      	cbz	r0, 800b24e <_vfiprintf_r+0x156>
 800b220:	9207      	str	r2, [sp, #28]
 800b222:	e014      	b.n	800b24e <_vfiprintf_r+0x156>
 800b224:	eba0 0308 	sub.w	r3, r0, r8
 800b228:	fa09 f303 	lsl.w	r3, r9, r3
 800b22c:	4313      	orrs	r3, r2
 800b22e:	9304      	str	r3, [sp, #16]
 800b230:	46a2      	mov	sl, r4
 800b232:	e7d2      	b.n	800b1da <_vfiprintf_r+0xe2>
 800b234:	9b03      	ldr	r3, [sp, #12]
 800b236:	1d19      	adds	r1, r3, #4
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	9103      	str	r1, [sp, #12]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	bfbb      	ittet	lt
 800b240:	425b      	neglt	r3, r3
 800b242:	f042 0202 	orrlt.w	r2, r2, #2
 800b246:	9307      	strge	r3, [sp, #28]
 800b248:	9307      	strlt	r3, [sp, #28]
 800b24a:	bfb8      	it	lt
 800b24c:	9204      	strlt	r2, [sp, #16]
 800b24e:	7823      	ldrb	r3, [r4, #0]
 800b250:	2b2e      	cmp	r3, #46	; 0x2e
 800b252:	d10c      	bne.n	800b26e <_vfiprintf_r+0x176>
 800b254:	7863      	ldrb	r3, [r4, #1]
 800b256:	2b2a      	cmp	r3, #42	; 0x2a
 800b258:	d135      	bne.n	800b2c6 <_vfiprintf_r+0x1ce>
 800b25a:	9b03      	ldr	r3, [sp, #12]
 800b25c:	1d1a      	adds	r2, r3, #4
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	9203      	str	r2, [sp, #12]
 800b262:	2b00      	cmp	r3, #0
 800b264:	bfb8      	it	lt
 800b266:	f04f 33ff 	movlt.w	r3, #4294967295
 800b26a:	3402      	adds	r4, #2
 800b26c:	9305      	str	r3, [sp, #20]
 800b26e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b354 <_vfiprintf_r+0x25c>
 800b272:	7821      	ldrb	r1, [r4, #0]
 800b274:	2203      	movs	r2, #3
 800b276:	4650      	mov	r0, sl
 800b278:	f7f4 ffb2 	bl	80001e0 <memchr>
 800b27c:	b140      	cbz	r0, 800b290 <_vfiprintf_r+0x198>
 800b27e:	2340      	movs	r3, #64	; 0x40
 800b280:	eba0 000a 	sub.w	r0, r0, sl
 800b284:	fa03 f000 	lsl.w	r0, r3, r0
 800b288:	9b04      	ldr	r3, [sp, #16]
 800b28a:	4303      	orrs	r3, r0
 800b28c:	3401      	adds	r4, #1
 800b28e:	9304      	str	r3, [sp, #16]
 800b290:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b294:	482c      	ldr	r0, [pc, #176]	; (800b348 <_vfiprintf_r+0x250>)
 800b296:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b29a:	2206      	movs	r2, #6
 800b29c:	f7f4 ffa0 	bl	80001e0 <memchr>
 800b2a0:	2800      	cmp	r0, #0
 800b2a2:	d03f      	beq.n	800b324 <_vfiprintf_r+0x22c>
 800b2a4:	4b29      	ldr	r3, [pc, #164]	; (800b34c <_vfiprintf_r+0x254>)
 800b2a6:	bb1b      	cbnz	r3, 800b2f0 <_vfiprintf_r+0x1f8>
 800b2a8:	9b03      	ldr	r3, [sp, #12]
 800b2aa:	3307      	adds	r3, #7
 800b2ac:	f023 0307 	bic.w	r3, r3, #7
 800b2b0:	3308      	adds	r3, #8
 800b2b2:	9303      	str	r3, [sp, #12]
 800b2b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2b6:	443b      	add	r3, r7
 800b2b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b2ba:	e767      	b.n	800b18c <_vfiprintf_r+0x94>
 800b2bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2c0:	460c      	mov	r4, r1
 800b2c2:	2001      	movs	r0, #1
 800b2c4:	e7a5      	b.n	800b212 <_vfiprintf_r+0x11a>
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	3401      	adds	r4, #1
 800b2ca:	9305      	str	r3, [sp, #20]
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	f04f 0c0a 	mov.w	ip, #10
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2d8:	3a30      	subs	r2, #48	; 0x30
 800b2da:	2a09      	cmp	r2, #9
 800b2dc:	d903      	bls.n	800b2e6 <_vfiprintf_r+0x1ee>
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d0c5      	beq.n	800b26e <_vfiprintf_r+0x176>
 800b2e2:	9105      	str	r1, [sp, #20]
 800b2e4:	e7c3      	b.n	800b26e <_vfiprintf_r+0x176>
 800b2e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2ea:	4604      	mov	r4, r0
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	e7f0      	b.n	800b2d2 <_vfiprintf_r+0x1da>
 800b2f0:	ab03      	add	r3, sp, #12
 800b2f2:	9300      	str	r3, [sp, #0]
 800b2f4:	462a      	mov	r2, r5
 800b2f6:	4b16      	ldr	r3, [pc, #88]	; (800b350 <_vfiprintf_r+0x258>)
 800b2f8:	a904      	add	r1, sp, #16
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	f7fc f88c 	bl	8007418 <_printf_float>
 800b300:	4607      	mov	r7, r0
 800b302:	1c78      	adds	r0, r7, #1
 800b304:	d1d6      	bne.n	800b2b4 <_vfiprintf_r+0x1bc>
 800b306:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b308:	07d9      	lsls	r1, r3, #31
 800b30a:	d405      	bmi.n	800b318 <_vfiprintf_r+0x220>
 800b30c:	89ab      	ldrh	r3, [r5, #12]
 800b30e:	059a      	lsls	r2, r3, #22
 800b310:	d402      	bmi.n	800b318 <_vfiprintf_r+0x220>
 800b312:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b314:	f000 faa1 	bl	800b85a <__retarget_lock_release_recursive>
 800b318:	89ab      	ldrh	r3, [r5, #12]
 800b31a:	065b      	lsls	r3, r3, #25
 800b31c:	f53f af12 	bmi.w	800b144 <_vfiprintf_r+0x4c>
 800b320:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b322:	e711      	b.n	800b148 <_vfiprintf_r+0x50>
 800b324:	ab03      	add	r3, sp, #12
 800b326:	9300      	str	r3, [sp, #0]
 800b328:	462a      	mov	r2, r5
 800b32a:	4b09      	ldr	r3, [pc, #36]	; (800b350 <_vfiprintf_r+0x258>)
 800b32c:	a904      	add	r1, sp, #16
 800b32e:	4630      	mov	r0, r6
 800b330:	f7fc fb18 	bl	8007964 <_printf_i>
 800b334:	e7e4      	b.n	800b300 <_vfiprintf_r+0x208>
 800b336:	bf00      	nop
 800b338:	0800dfc4 	.word	0x0800dfc4
 800b33c:	0800dfe4 	.word	0x0800dfe4
 800b340:	0800dfa4 	.word	0x0800dfa4
 800b344:	0800df54 	.word	0x0800df54
 800b348:	0800df5e 	.word	0x0800df5e
 800b34c:	08007419 	.word	0x08007419
 800b350:	0800b0d3 	.word	0x0800b0d3
 800b354:	0800df5a 	.word	0x0800df5a

0800b358 <__swbuf_r>:
 800b358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b35a:	460e      	mov	r6, r1
 800b35c:	4614      	mov	r4, r2
 800b35e:	4605      	mov	r5, r0
 800b360:	b118      	cbz	r0, 800b36a <__swbuf_r+0x12>
 800b362:	6983      	ldr	r3, [r0, #24]
 800b364:	b90b      	cbnz	r3, 800b36a <__swbuf_r+0x12>
 800b366:	f000 f9d9 	bl	800b71c <__sinit>
 800b36a:	4b21      	ldr	r3, [pc, #132]	; (800b3f0 <__swbuf_r+0x98>)
 800b36c:	429c      	cmp	r4, r3
 800b36e:	d12b      	bne.n	800b3c8 <__swbuf_r+0x70>
 800b370:	686c      	ldr	r4, [r5, #4]
 800b372:	69a3      	ldr	r3, [r4, #24]
 800b374:	60a3      	str	r3, [r4, #8]
 800b376:	89a3      	ldrh	r3, [r4, #12]
 800b378:	071a      	lsls	r2, r3, #28
 800b37a:	d52f      	bpl.n	800b3dc <__swbuf_r+0x84>
 800b37c:	6923      	ldr	r3, [r4, #16]
 800b37e:	b36b      	cbz	r3, 800b3dc <__swbuf_r+0x84>
 800b380:	6923      	ldr	r3, [r4, #16]
 800b382:	6820      	ldr	r0, [r4, #0]
 800b384:	1ac0      	subs	r0, r0, r3
 800b386:	6963      	ldr	r3, [r4, #20]
 800b388:	b2f6      	uxtb	r6, r6
 800b38a:	4283      	cmp	r3, r0
 800b38c:	4637      	mov	r7, r6
 800b38e:	dc04      	bgt.n	800b39a <__swbuf_r+0x42>
 800b390:	4621      	mov	r1, r4
 800b392:	4628      	mov	r0, r5
 800b394:	f000 f92e 	bl	800b5f4 <_fflush_r>
 800b398:	bb30      	cbnz	r0, 800b3e8 <__swbuf_r+0x90>
 800b39a:	68a3      	ldr	r3, [r4, #8]
 800b39c:	3b01      	subs	r3, #1
 800b39e:	60a3      	str	r3, [r4, #8]
 800b3a0:	6823      	ldr	r3, [r4, #0]
 800b3a2:	1c5a      	adds	r2, r3, #1
 800b3a4:	6022      	str	r2, [r4, #0]
 800b3a6:	701e      	strb	r6, [r3, #0]
 800b3a8:	6963      	ldr	r3, [r4, #20]
 800b3aa:	3001      	adds	r0, #1
 800b3ac:	4283      	cmp	r3, r0
 800b3ae:	d004      	beq.n	800b3ba <__swbuf_r+0x62>
 800b3b0:	89a3      	ldrh	r3, [r4, #12]
 800b3b2:	07db      	lsls	r3, r3, #31
 800b3b4:	d506      	bpl.n	800b3c4 <__swbuf_r+0x6c>
 800b3b6:	2e0a      	cmp	r6, #10
 800b3b8:	d104      	bne.n	800b3c4 <__swbuf_r+0x6c>
 800b3ba:	4621      	mov	r1, r4
 800b3bc:	4628      	mov	r0, r5
 800b3be:	f000 f919 	bl	800b5f4 <_fflush_r>
 800b3c2:	b988      	cbnz	r0, 800b3e8 <__swbuf_r+0x90>
 800b3c4:	4638      	mov	r0, r7
 800b3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3c8:	4b0a      	ldr	r3, [pc, #40]	; (800b3f4 <__swbuf_r+0x9c>)
 800b3ca:	429c      	cmp	r4, r3
 800b3cc:	d101      	bne.n	800b3d2 <__swbuf_r+0x7a>
 800b3ce:	68ac      	ldr	r4, [r5, #8]
 800b3d0:	e7cf      	b.n	800b372 <__swbuf_r+0x1a>
 800b3d2:	4b09      	ldr	r3, [pc, #36]	; (800b3f8 <__swbuf_r+0xa0>)
 800b3d4:	429c      	cmp	r4, r3
 800b3d6:	bf08      	it	eq
 800b3d8:	68ec      	ldreq	r4, [r5, #12]
 800b3da:	e7ca      	b.n	800b372 <__swbuf_r+0x1a>
 800b3dc:	4621      	mov	r1, r4
 800b3de:	4628      	mov	r0, r5
 800b3e0:	f000 f80c 	bl	800b3fc <__swsetup_r>
 800b3e4:	2800      	cmp	r0, #0
 800b3e6:	d0cb      	beq.n	800b380 <__swbuf_r+0x28>
 800b3e8:	f04f 37ff 	mov.w	r7, #4294967295
 800b3ec:	e7ea      	b.n	800b3c4 <__swbuf_r+0x6c>
 800b3ee:	bf00      	nop
 800b3f0:	0800dfc4 	.word	0x0800dfc4
 800b3f4:	0800dfe4 	.word	0x0800dfe4
 800b3f8:	0800dfa4 	.word	0x0800dfa4

0800b3fc <__swsetup_r>:
 800b3fc:	4b32      	ldr	r3, [pc, #200]	; (800b4c8 <__swsetup_r+0xcc>)
 800b3fe:	b570      	push	{r4, r5, r6, lr}
 800b400:	681d      	ldr	r5, [r3, #0]
 800b402:	4606      	mov	r6, r0
 800b404:	460c      	mov	r4, r1
 800b406:	b125      	cbz	r5, 800b412 <__swsetup_r+0x16>
 800b408:	69ab      	ldr	r3, [r5, #24]
 800b40a:	b913      	cbnz	r3, 800b412 <__swsetup_r+0x16>
 800b40c:	4628      	mov	r0, r5
 800b40e:	f000 f985 	bl	800b71c <__sinit>
 800b412:	4b2e      	ldr	r3, [pc, #184]	; (800b4cc <__swsetup_r+0xd0>)
 800b414:	429c      	cmp	r4, r3
 800b416:	d10f      	bne.n	800b438 <__swsetup_r+0x3c>
 800b418:	686c      	ldr	r4, [r5, #4]
 800b41a:	89a3      	ldrh	r3, [r4, #12]
 800b41c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b420:	0719      	lsls	r1, r3, #28
 800b422:	d42c      	bmi.n	800b47e <__swsetup_r+0x82>
 800b424:	06dd      	lsls	r5, r3, #27
 800b426:	d411      	bmi.n	800b44c <__swsetup_r+0x50>
 800b428:	2309      	movs	r3, #9
 800b42a:	6033      	str	r3, [r6, #0]
 800b42c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b430:	81a3      	strh	r3, [r4, #12]
 800b432:	f04f 30ff 	mov.w	r0, #4294967295
 800b436:	e03e      	b.n	800b4b6 <__swsetup_r+0xba>
 800b438:	4b25      	ldr	r3, [pc, #148]	; (800b4d0 <__swsetup_r+0xd4>)
 800b43a:	429c      	cmp	r4, r3
 800b43c:	d101      	bne.n	800b442 <__swsetup_r+0x46>
 800b43e:	68ac      	ldr	r4, [r5, #8]
 800b440:	e7eb      	b.n	800b41a <__swsetup_r+0x1e>
 800b442:	4b24      	ldr	r3, [pc, #144]	; (800b4d4 <__swsetup_r+0xd8>)
 800b444:	429c      	cmp	r4, r3
 800b446:	bf08      	it	eq
 800b448:	68ec      	ldreq	r4, [r5, #12]
 800b44a:	e7e6      	b.n	800b41a <__swsetup_r+0x1e>
 800b44c:	0758      	lsls	r0, r3, #29
 800b44e:	d512      	bpl.n	800b476 <__swsetup_r+0x7a>
 800b450:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b452:	b141      	cbz	r1, 800b466 <__swsetup_r+0x6a>
 800b454:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b458:	4299      	cmp	r1, r3
 800b45a:	d002      	beq.n	800b462 <__swsetup_r+0x66>
 800b45c:	4630      	mov	r0, r6
 800b45e:	f7ff fb69 	bl	800ab34 <_free_r>
 800b462:	2300      	movs	r3, #0
 800b464:	6363      	str	r3, [r4, #52]	; 0x34
 800b466:	89a3      	ldrh	r3, [r4, #12]
 800b468:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b46c:	81a3      	strh	r3, [r4, #12]
 800b46e:	2300      	movs	r3, #0
 800b470:	6063      	str	r3, [r4, #4]
 800b472:	6923      	ldr	r3, [r4, #16]
 800b474:	6023      	str	r3, [r4, #0]
 800b476:	89a3      	ldrh	r3, [r4, #12]
 800b478:	f043 0308 	orr.w	r3, r3, #8
 800b47c:	81a3      	strh	r3, [r4, #12]
 800b47e:	6923      	ldr	r3, [r4, #16]
 800b480:	b94b      	cbnz	r3, 800b496 <__swsetup_r+0x9a>
 800b482:	89a3      	ldrh	r3, [r4, #12]
 800b484:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b48c:	d003      	beq.n	800b496 <__swsetup_r+0x9a>
 800b48e:	4621      	mov	r1, r4
 800b490:	4630      	mov	r0, r6
 800b492:	f000 fa07 	bl	800b8a4 <__smakebuf_r>
 800b496:	89a0      	ldrh	r0, [r4, #12]
 800b498:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b49c:	f010 0301 	ands.w	r3, r0, #1
 800b4a0:	d00a      	beq.n	800b4b8 <__swsetup_r+0xbc>
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	60a3      	str	r3, [r4, #8]
 800b4a6:	6963      	ldr	r3, [r4, #20]
 800b4a8:	425b      	negs	r3, r3
 800b4aa:	61a3      	str	r3, [r4, #24]
 800b4ac:	6923      	ldr	r3, [r4, #16]
 800b4ae:	b943      	cbnz	r3, 800b4c2 <__swsetup_r+0xc6>
 800b4b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b4b4:	d1ba      	bne.n	800b42c <__swsetup_r+0x30>
 800b4b6:	bd70      	pop	{r4, r5, r6, pc}
 800b4b8:	0781      	lsls	r1, r0, #30
 800b4ba:	bf58      	it	pl
 800b4bc:	6963      	ldrpl	r3, [r4, #20]
 800b4be:	60a3      	str	r3, [r4, #8]
 800b4c0:	e7f4      	b.n	800b4ac <__swsetup_r+0xb0>
 800b4c2:	2000      	movs	r0, #0
 800b4c4:	e7f7      	b.n	800b4b6 <__swsetup_r+0xba>
 800b4c6:	bf00      	nop
 800b4c8:	200000bc 	.word	0x200000bc
 800b4cc:	0800dfc4 	.word	0x0800dfc4
 800b4d0:	0800dfe4 	.word	0x0800dfe4
 800b4d4:	0800dfa4 	.word	0x0800dfa4

0800b4d8 <abort>:
 800b4d8:	b508      	push	{r3, lr}
 800b4da:	2006      	movs	r0, #6
 800b4dc:	f000 fa52 	bl	800b984 <raise>
 800b4e0:	2001      	movs	r0, #1
 800b4e2:	f7f7 fecb 	bl	800327c <_exit>
	...

0800b4e8 <__sflush_r>:
 800b4e8:	898a      	ldrh	r2, [r1, #12]
 800b4ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ee:	4605      	mov	r5, r0
 800b4f0:	0710      	lsls	r0, r2, #28
 800b4f2:	460c      	mov	r4, r1
 800b4f4:	d458      	bmi.n	800b5a8 <__sflush_r+0xc0>
 800b4f6:	684b      	ldr	r3, [r1, #4]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	dc05      	bgt.n	800b508 <__sflush_r+0x20>
 800b4fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	dc02      	bgt.n	800b508 <__sflush_r+0x20>
 800b502:	2000      	movs	r0, #0
 800b504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b508:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b50a:	2e00      	cmp	r6, #0
 800b50c:	d0f9      	beq.n	800b502 <__sflush_r+0x1a>
 800b50e:	2300      	movs	r3, #0
 800b510:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b514:	682f      	ldr	r7, [r5, #0]
 800b516:	602b      	str	r3, [r5, #0]
 800b518:	d032      	beq.n	800b580 <__sflush_r+0x98>
 800b51a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b51c:	89a3      	ldrh	r3, [r4, #12]
 800b51e:	075a      	lsls	r2, r3, #29
 800b520:	d505      	bpl.n	800b52e <__sflush_r+0x46>
 800b522:	6863      	ldr	r3, [r4, #4]
 800b524:	1ac0      	subs	r0, r0, r3
 800b526:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b528:	b10b      	cbz	r3, 800b52e <__sflush_r+0x46>
 800b52a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b52c:	1ac0      	subs	r0, r0, r3
 800b52e:	2300      	movs	r3, #0
 800b530:	4602      	mov	r2, r0
 800b532:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b534:	6a21      	ldr	r1, [r4, #32]
 800b536:	4628      	mov	r0, r5
 800b538:	47b0      	blx	r6
 800b53a:	1c43      	adds	r3, r0, #1
 800b53c:	89a3      	ldrh	r3, [r4, #12]
 800b53e:	d106      	bne.n	800b54e <__sflush_r+0x66>
 800b540:	6829      	ldr	r1, [r5, #0]
 800b542:	291d      	cmp	r1, #29
 800b544:	d82c      	bhi.n	800b5a0 <__sflush_r+0xb8>
 800b546:	4a2a      	ldr	r2, [pc, #168]	; (800b5f0 <__sflush_r+0x108>)
 800b548:	40ca      	lsrs	r2, r1
 800b54a:	07d6      	lsls	r6, r2, #31
 800b54c:	d528      	bpl.n	800b5a0 <__sflush_r+0xb8>
 800b54e:	2200      	movs	r2, #0
 800b550:	6062      	str	r2, [r4, #4]
 800b552:	04d9      	lsls	r1, r3, #19
 800b554:	6922      	ldr	r2, [r4, #16]
 800b556:	6022      	str	r2, [r4, #0]
 800b558:	d504      	bpl.n	800b564 <__sflush_r+0x7c>
 800b55a:	1c42      	adds	r2, r0, #1
 800b55c:	d101      	bne.n	800b562 <__sflush_r+0x7a>
 800b55e:	682b      	ldr	r3, [r5, #0]
 800b560:	b903      	cbnz	r3, 800b564 <__sflush_r+0x7c>
 800b562:	6560      	str	r0, [r4, #84]	; 0x54
 800b564:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b566:	602f      	str	r7, [r5, #0]
 800b568:	2900      	cmp	r1, #0
 800b56a:	d0ca      	beq.n	800b502 <__sflush_r+0x1a>
 800b56c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b570:	4299      	cmp	r1, r3
 800b572:	d002      	beq.n	800b57a <__sflush_r+0x92>
 800b574:	4628      	mov	r0, r5
 800b576:	f7ff fadd 	bl	800ab34 <_free_r>
 800b57a:	2000      	movs	r0, #0
 800b57c:	6360      	str	r0, [r4, #52]	; 0x34
 800b57e:	e7c1      	b.n	800b504 <__sflush_r+0x1c>
 800b580:	6a21      	ldr	r1, [r4, #32]
 800b582:	2301      	movs	r3, #1
 800b584:	4628      	mov	r0, r5
 800b586:	47b0      	blx	r6
 800b588:	1c41      	adds	r1, r0, #1
 800b58a:	d1c7      	bne.n	800b51c <__sflush_r+0x34>
 800b58c:	682b      	ldr	r3, [r5, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d0c4      	beq.n	800b51c <__sflush_r+0x34>
 800b592:	2b1d      	cmp	r3, #29
 800b594:	d001      	beq.n	800b59a <__sflush_r+0xb2>
 800b596:	2b16      	cmp	r3, #22
 800b598:	d101      	bne.n	800b59e <__sflush_r+0xb6>
 800b59a:	602f      	str	r7, [r5, #0]
 800b59c:	e7b1      	b.n	800b502 <__sflush_r+0x1a>
 800b59e:	89a3      	ldrh	r3, [r4, #12]
 800b5a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5a4:	81a3      	strh	r3, [r4, #12]
 800b5a6:	e7ad      	b.n	800b504 <__sflush_r+0x1c>
 800b5a8:	690f      	ldr	r7, [r1, #16]
 800b5aa:	2f00      	cmp	r7, #0
 800b5ac:	d0a9      	beq.n	800b502 <__sflush_r+0x1a>
 800b5ae:	0793      	lsls	r3, r2, #30
 800b5b0:	680e      	ldr	r6, [r1, #0]
 800b5b2:	bf08      	it	eq
 800b5b4:	694b      	ldreq	r3, [r1, #20]
 800b5b6:	600f      	str	r7, [r1, #0]
 800b5b8:	bf18      	it	ne
 800b5ba:	2300      	movne	r3, #0
 800b5bc:	eba6 0807 	sub.w	r8, r6, r7
 800b5c0:	608b      	str	r3, [r1, #8]
 800b5c2:	f1b8 0f00 	cmp.w	r8, #0
 800b5c6:	dd9c      	ble.n	800b502 <__sflush_r+0x1a>
 800b5c8:	6a21      	ldr	r1, [r4, #32]
 800b5ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b5cc:	4643      	mov	r3, r8
 800b5ce:	463a      	mov	r2, r7
 800b5d0:	4628      	mov	r0, r5
 800b5d2:	47b0      	blx	r6
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	dc06      	bgt.n	800b5e6 <__sflush_r+0xfe>
 800b5d8:	89a3      	ldrh	r3, [r4, #12]
 800b5da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5de:	81a3      	strh	r3, [r4, #12]
 800b5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5e4:	e78e      	b.n	800b504 <__sflush_r+0x1c>
 800b5e6:	4407      	add	r7, r0
 800b5e8:	eba8 0800 	sub.w	r8, r8, r0
 800b5ec:	e7e9      	b.n	800b5c2 <__sflush_r+0xda>
 800b5ee:	bf00      	nop
 800b5f0:	20400001 	.word	0x20400001

0800b5f4 <_fflush_r>:
 800b5f4:	b538      	push	{r3, r4, r5, lr}
 800b5f6:	690b      	ldr	r3, [r1, #16]
 800b5f8:	4605      	mov	r5, r0
 800b5fa:	460c      	mov	r4, r1
 800b5fc:	b913      	cbnz	r3, 800b604 <_fflush_r+0x10>
 800b5fe:	2500      	movs	r5, #0
 800b600:	4628      	mov	r0, r5
 800b602:	bd38      	pop	{r3, r4, r5, pc}
 800b604:	b118      	cbz	r0, 800b60e <_fflush_r+0x1a>
 800b606:	6983      	ldr	r3, [r0, #24]
 800b608:	b90b      	cbnz	r3, 800b60e <_fflush_r+0x1a>
 800b60a:	f000 f887 	bl	800b71c <__sinit>
 800b60e:	4b14      	ldr	r3, [pc, #80]	; (800b660 <_fflush_r+0x6c>)
 800b610:	429c      	cmp	r4, r3
 800b612:	d11b      	bne.n	800b64c <_fflush_r+0x58>
 800b614:	686c      	ldr	r4, [r5, #4]
 800b616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d0ef      	beq.n	800b5fe <_fflush_r+0xa>
 800b61e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b620:	07d0      	lsls	r0, r2, #31
 800b622:	d404      	bmi.n	800b62e <_fflush_r+0x3a>
 800b624:	0599      	lsls	r1, r3, #22
 800b626:	d402      	bmi.n	800b62e <_fflush_r+0x3a>
 800b628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b62a:	f000 f915 	bl	800b858 <__retarget_lock_acquire_recursive>
 800b62e:	4628      	mov	r0, r5
 800b630:	4621      	mov	r1, r4
 800b632:	f7ff ff59 	bl	800b4e8 <__sflush_r>
 800b636:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b638:	07da      	lsls	r2, r3, #31
 800b63a:	4605      	mov	r5, r0
 800b63c:	d4e0      	bmi.n	800b600 <_fflush_r+0xc>
 800b63e:	89a3      	ldrh	r3, [r4, #12]
 800b640:	059b      	lsls	r3, r3, #22
 800b642:	d4dd      	bmi.n	800b600 <_fflush_r+0xc>
 800b644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b646:	f000 f908 	bl	800b85a <__retarget_lock_release_recursive>
 800b64a:	e7d9      	b.n	800b600 <_fflush_r+0xc>
 800b64c:	4b05      	ldr	r3, [pc, #20]	; (800b664 <_fflush_r+0x70>)
 800b64e:	429c      	cmp	r4, r3
 800b650:	d101      	bne.n	800b656 <_fflush_r+0x62>
 800b652:	68ac      	ldr	r4, [r5, #8]
 800b654:	e7df      	b.n	800b616 <_fflush_r+0x22>
 800b656:	4b04      	ldr	r3, [pc, #16]	; (800b668 <_fflush_r+0x74>)
 800b658:	429c      	cmp	r4, r3
 800b65a:	bf08      	it	eq
 800b65c:	68ec      	ldreq	r4, [r5, #12]
 800b65e:	e7da      	b.n	800b616 <_fflush_r+0x22>
 800b660:	0800dfc4 	.word	0x0800dfc4
 800b664:	0800dfe4 	.word	0x0800dfe4
 800b668:	0800dfa4 	.word	0x0800dfa4

0800b66c <std>:
 800b66c:	2300      	movs	r3, #0
 800b66e:	b510      	push	{r4, lr}
 800b670:	4604      	mov	r4, r0
 800b672:	e9c0 3300 	strd	r3, r3, [r0]
 800b676:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b67a:	6083      	str	r3, [r0, #8]
 800b67c:	8181      	strh	r1, [r0, #12]
 800b67e:	6643      	str	r3, [r0, #100]	; 0x64
 800b680:	81c2      	strh	r2, [r0, #14]
 800b682:	6183      	str	r3, [r0, #24]
 800b684:	4619      	mov	r1, r3
 800b686:	2208      	movs	r2, #8
 800b688:	305c      	adds	r0, #92	; 0x5c
 800b68a:	f7fb fe1d 	bl	80072c8 <memset>
 800b68e:	4b05      	ldr	r3, [pc, #20]	; (800b6a4 <std+0x38>)
 800b690:	6263      	str	r3, [r4, #36]	; 0x24
 800b692:	4b05      	ldr	r3, [pc, #20]	; (800b6a8 <std+0x3c>)
 800b694:	62a3      	str	r3, [r4, #40]	; 0x28
 800b696:	4b05      	ldr	r3, [pc, #20]	; (800b6ac <std+0x40>)
 800b698:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b69a:	4b05      	ldr	r3, [pc, #20]	; (800b6b0 <std+0x44>)
 800b69c:	6224      	str	r4, [r4, #32]
 800b69e:	6323      	str	r3, [r4, #48]	; 0x30
 800b6a0:	bd10      	pop	{r4, pc}
 800b6a2:	bf00      	nop
 800b6a4:	0800b9bd 	.word	0x0800b9bd
 800b6a8:	0800b9df 	.word	0x0800b9df
 800b6ac:	0800ba17 	.word	0x0800ba17
 800b6b0:	0800ba3b 	.word	0x0800ba3b

0800b6b4 <_cleanup_r>:
 800b6b4:	4901      	ldr	r1, [pc, #4]	; (800b6bc <_cleanup_r+0x8>)
 800b6b6:	f000 b8af 	b.w	800b818 <_fwalk_reent>
 800b6ba:	bf00      	nop
 800b6bc:	0800b5f5 	.word	0x0800b5f5

0800b6c0 <__sfmoreglue>:
 800b6c0:	b570      	push	{r4, r5, r6, lr}
 800b6c2:	1e4a      	subs	r2, r1, #1
 800b6c4:	2568      	movs	r5, #104	; 0x68
 800b6c6:	4355      	muls	r5, r2
 800b6c8:	460e      	mov	r6, r1
 800b6ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b6ce:	f7ff fa81 	bl	800abd4 <_malloc_r>
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	b140      	cbz	r0, 800b6e8 <__sfmoreglue+0x28>
 800b6d6:	2100      	movs	r1, #0
 800b6d8:	e9c0 1600 	strd	r1, r6, [r0]
 800b6dc:	300c      	adds	r0, #12
 800b6de:	60a0      	str	r0, [r4, #8]
 800b6e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b6e4:	f7fb fdf0 	bl	80072c8 <memset>
 800b6e8:	4620      	mov	r0, r4
 800b6ea:	bd70      	pop	{r4, r5, r6, pc}

0800b6ec <__sfp_lock_acquire>:
 800b6ec:	4801      	ldr	r0, [pc, #4]	; (800b6f4 <__sfp_lock_acquire+0x8>)
 800b6ee:	f000 b8b3 	b.w	800b858 <__retarget_lock_acquire_recursive>
 800b6f2:	bf00      	nop
 800b6f4:	200004f0 	.word	0x200004f0

0800b6f8 <__sfp_lock_release>:
 800b6f8:	4801      	ldr	r0, [pc, #4]	; (800b700 <__sfp_lock_release+0x8>)
 800b6fa:	f000 b8ae 	b.w	800b85a <__retarget_lock_release_recursive>
 800b6fe:	bf00      	nop
 800b700:	200004f0 	.word	0x200004f0

0800b704 <__sinit_lock_acquire>:
 800b704:	4801      	ldr	r0, [pc, #4]	; (800b70c <__sinit_lock_acquire+0x8>)
 800b706:	f000 b8a7 	b.w	800b858 <__retarget_lock_acquire_recursive>
 800b70a:	bf00      	nop
 800b70c:	200004eb 	.word	0x200004eb

0800b710 <__sinit_lock_release>:
 800b710:	4801      	ldr	r0, [pc, #4]	; (800b718 <__sinit_lock_release+0x8>)
 800b712:	f000 b8a2 	b.w	800b85a <__retarget_lock_release_recursive>
 800b716:	bf00      	nop
 800b718:	200004eb 	.word	0x200004eb

0800b71c <__sinit>:
 800b71c:	b510      	push	{r4, lr}
 800b71e:	4604      	mov	r4, r0
 800b720:	f7ff fff0 	bl	800b704 <__sinit_lock_acquire>
 800b724:	69a3      	ldr	r3, [r4, #24]
 800b726:	b11b      	cbz	r3, 800b730 <__sinit+0x14>
 800b728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b72c:	f7ff bff0 	b.w	800b710 <__sinit_lock_release>
 800b730:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b734:	6523      	str	r3, [r4, #80]	; 0x50
 800b736:	4b13      	ldr	r3, [pc, #76]	; (800b784 <__sinit+0x68>)
 800b738:	4a13      	ldr	r2, [pc, #76]	; (800b788 <__sinit+0x6c>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b73e:	42a3      	cmp	r3, r4
 800b740:	bf04      	itt	eq
 800b742:	2301      	moveq	r3, #1
 800b744:	61a3      	streq	r3, [r4, #24]
 800b746:	4620      	mov	r0, r4
 800b748:	f000 f820 	bl	800b78c <__sfp>
 800b74c:	6060      	str	r0, [r4, #4]
 800b74e:	4620      	mov	r0, r4
 800b750:	f000 f81c 	bl	800b78c <__sfp>
 800b754:	60a0      	str	r0, [r4, #8]
 800b756:	4620      	mov	r0, r4
 800b758:	f000 f818 	bl	800b78c <__sfp>
 800b75c:	2200      	movs	r2, #0
 800b75e:	60e0      	str	r0, [r4, #12]
 800b760:	2104      	movs	r1, #4
 800b762:	6860      	ldr	r0, [r4, #4]
 800b764:	f7ff ff82 	bl	800b66c <std>
 800b768:	68a0      	ldr	r0, [r4, #8]
 800b76a:	2201      	movs	r2, #1
 800b76c:	2109      	movs	r1, #9
 800b76e:	f7ff ff7d 	bl	800b66c <std>
 800b772:	68e0      	ldr	r0, [r4, #12]
 800b774:	2202      	movs	r2, #2
 800b776:	2112      	movs	r1, #18
 800b778:	f7ff ff78 	bl	800b66c <std>
 800b77c:	2301      	movs	r3, #1
 800b77e:	61a3      	str	r3, [r4, #24]
 800b780:	e7d2      	b.n	800b728 <__sinit+0xc>
 800b782:	bf00      	nop
 800b784:	0800db50 	.word	0x0800db50
 800b788:	0800b6b5 	.word	0x0800b6b5

0800b78c <__sfp>:
 800b78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b78e:	4607      	mov	r7, r0
 800b790:	f7ff ffac 	bl	800b6ec <__sfp_lock_acquire>
 800b794:	4b1e      	ldr	r3, [pc, #120]	; (800b810 <__sfp+0x84>)
 800b796:	681e      	ldr	r6, [r3, #0]
 800b798:	69b3      	ldr	r3, [r6, #24]
 800b79a:	b913      	cbnz	r3, 800b7a2 <__sfp+0x16>
 800b79c:	4630      	mov	r0, r6
 800b79e:	f7ff ffbd 	bl	800b71c <__sinit>
 800b7a2:	3648      	adds	r6, #72	; 0x48
 800b7a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b7a8:	3b01      	subs	r3, #1
 800b7aa:	d503      	bpl.n	800b7b4 <__sfp+0x28>
 800b7ac:	6833      	ldr	r3, [r6, #0]
 800b7ae:	b30b      	cbz	r3, 800b7f4 <__sfp+0x68>
 800b7b0:	6836      	ldr	r6, [r6, #0]
 800b7b2:	e7f7      	b.n	800b7a4 <__sfp+0x18>
 800b7b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b7b8:	b9d5      	cbnz	r5, 800b7f0 <__sfp+0x64>
 800b7ba:	4b16      	ldr	r3, [pc, #88]	; (800b814 <__sfp+0x88>)
 800b7bc:	60e3      	str	r3, [r4, #12]
 800b7be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b7c2:	6665      	str	r5, [r4, #100]	; 0x64
 800b7c4:	f000 f847 	bl	800b856 <__retarget_lock_init_recursive>
 800b7c8:	f7ff ff96 	bl	800b6f8 <__sfp_lock_release>
 800b7cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b7d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b7d4:	6025      	str	r5, [r4, #0]
 800b7d6:	61a5      	str	r5, [r4, #24]
 800b7d8:	2208      	movs	r2, #8
 800b7da:	4629      	mov	r1, r5
 800b7dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b7e0:	f7fb fd72 	bl	80072c8 <memset>
 800b7e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b7e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7f0:	3468      	adds	r4, #104	; 0x68
 800b7f2:	e7d9      	b.n	800b7a8 <__sfp+0x1c>
 800b7f4:	2104      	movs	r1, #4
 800b7f6:	4638      	mov	r0, r7
 800b7f8:	f7ff ff62 	bl	800b6c0 <__sfmoreglue>
 800b7fc:	4604      	mov	r4, r0
 800b7fe:	6030      	str	r0, [r6, #0]
 800b800:	2800      	cmp	r0, #0
 800b802:	d1d5      	bne.n	800b7b0 <__sfp+0x24>
 800b804:	f7ff ff78 	bl	800b6f8 <__sfp_lock_release>
 800b808:	230c      	movs	r3, #12
 800b80a:	603b      	str	r3, [r7, #0]
 800b80c:	e7ee      	b.n	800b7ec <__sfp+0x60>
 800b80e:	bf00      	nop
 800b810:	0800db50 	.word	0x0800db50
 800b814:	ffff0001 	.word	0xffff0001

0800b818 <_fwalk_reent>:
 800b818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b81c:	4606      	mov	r6, r0
 800b81e:	4688      	mov	r8, r1
 800b820:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b824:	2700      	movs	r7, #0
 800b826:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b82a:	f1b9 0901 	subs.w	r9, r9, #1
 800b82e:	d505      	bpl.n	800b83c <_fwalk_reent+0x24>
 800b830:	6824      	ldr	r4, [r4, #0]
 800b832:	2c00      	cmp	r4, #0
 800b834:	d1f7      	bne.n	800b826 <_fwalk_reent+0xe>
 800b836:	4638      	mov	r0, r7
 800b838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b83c:	89ab      	ldrh	r3, [r5, #12]
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d907      	bls.n	800b852 <_fwalk_reent+0x3a>
 800b842:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b846:	3301      	adds	r3, #1
 800b848:	d003      	beq.n	800b852 <_fwalk_reent+0x3a>
 800b84a:	4629      	mov	r1, r5
 800b84c:	4630      	mov	r0, r6
 800b84e:	47c0      	blx	r8
 800b850:	4307      	orrs	r7, r0
 800b852:	3568      	adds	r5, #104	; 0x68
 800b854:	e7e9      	b.n	800b82a <_fwalk_reent+0x12>

0800b856 <__retarget_lock_init_recursive>:
 800b856:	4770      	bx	lr

0800b858 <__retarget_lock_acquire_recursive>:
 800b858:	4770      	bx	lr

0800b85a <__retarget_lock_release_recursive>:
 800b85a:	4770      	bx	lr

0800b85c <__swhatbuf_r>:
 800b85c:	b570      	push	{r4, r5, r6, lr}
 800b85e:	460e      	mov	r6, r1
 800b860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b864:	2900      	cmp	r1, #0
 800b866:	b096      	sub	sp, #88	; 0x58
 800b868:	4614      	mov	r4, r2
 800b86a:	461d      	mov	r5, r3
 800b86c:	da07      	bge.n	800b87e <__swhatbuf_r+0x22>
 800b86e:	2300      	movs	r3, #0
 800b870:	602b      	str	r3, [r5, #0]
 800b872:	89b3      	ldrh	r3, [r6, #12]
 800b874:	061a      	lsls	r2, r3, #24
 800b876:	d410      	bmi.n	800b89a <__swhatbuf_r+0x3e>
 800b878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b87c:	e00e      	b.n	800b89c <__swhatbuf_r+0x40>
 800b87e:	466a      	mov	r2, sp
 800b880:	f000 f902 	bl	800ba88 <_fstat_r>
 800b884:	2800      	cmp	r0, #0
 800b886:	dbf2      	blt.n	800b86e <__swhatbuf_r+0x12>
 800b888:	9a01      	ldr	r2, [sp, #4]
 800b88a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b88e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b892:	425a      	negs	r2, r3
 800b894:	415a      	adcs	r2, r3
 800b896:	602a      	str	r2, [r5, #0]
 800b898:	e7ee      	b.n	800b878 <__swhatbuf_r+0x1c>
 800b89a:	2340      	movs	r3, #64	; 0x40
 800b89c:	2000      	movs	r0, #0
 800b89e:	6023      	str	r3, [r4, #0]
 800b8a0:	b016      	add	sp, #88	; 0x58
 800b8a2:	bd70      	pop	{r4, r5, r6, pc}

0800b8a4 <__smakebuf_r>:
 800b8a4:	898b      	ldrh	r3, [r1, #12]
 800b8a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8a8:	079d      	lsls	r5, r3, #30
 800b8aa:	4606      	mov	r6, r0
 800b8ac:	460c      	mov	r4, r1
 800b8ae:	d507      	bpl.n	800b8c0 <__smakebuf_r+0x1c>
 800b8b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8b4:	6023      	str	r3, [r4, #0]
 800b8b6:	6123      	str	r3, [r4, #16]
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	6163      	str	r3, [r4, #20]
 800b8bc:	b002      	add	sp, #8
 800b8be:	bd70      	pop	{r4, r5, r6, pc}
 800b8c0:	ab01      	add	r3, sp, #4
 800b8c2:	466a      	mov	r2, sp
 800b8c4:	f7ff ffca 	bl	800b85c <__swhatbuf_r>
 800b8c8:	9900      	ldr	r1, [sp, #0]
 800b8ca:	4605      	mov	r5, r0
 800b8cc:	4630      	mov	r0, r6
 800b8ce:	f7ff f981 	bl	800abd4 <_malloc_r>
 800b8d2:	b948      	cbnz	r0, 800b8e8 <__smakebuf_r+0x44>
 800b8d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8d8:	059a      	lsls	r2, r3, #22
 800b8da:	d4ef      	bmi.n	800b8bc <__smakebuf_r+0x18>
 800b8dc:	f023 0303 	bic.w	r3, r3, #3
 800b8e0:	f043 0302 	orr.w	r3, r3, #2
 800b8e4:	81a3      	strh	r3, [r4, #12]
 800b8e6:	e7e3      	b.n	800b8b0 <__smakebuf_r+0xc>
 800b8e8:	4b0d      	ldr	r3, [pc, #52]	; (800b920 <__smakebuf_r+0x7c>)
 800b8ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800b8ec:	89a3      	ldrh	r3, [r4, #12]
 800b8ee:	6020      	str	r0, [r4, #0]
 800b8f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8f4:	81a3      	strh	r3, [r4, #12]
 800b8f6:	9b00      	ldr	r3, [sp, #0]
 800b8f8:	6163      	str	r3, [r4, #20]
 800b8fa:	9b01      	ldr	r3, [sp, #4]
 800b8fc:	6120      	str	r0, [r4, #16]
 800b8fe:	b15b      	cbz	r3, 800b918 <__smakebuf_r+0x74>
 800b900:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b904:	4630      	mov	r0, r6
 800b906:	f000 f8d1 	bl	800baac <_isatty_r>
 800b90a:	b128      	cbz	r0, 800b918 <__smakebuf_r+0x74>
 800b90c:	89a3      	ldrh	r3, [r4, #12]
 800b90e:	f023 0303 	bic.w	r3, r3, #3
 800b912:	f043 0301 	orr.w	r3, r3, #1
 800b916:	81a3      	strh	r3, [r4, #12]
 800b918:	89a0      	ldrh	r0, [r4, #12]
 800b91a:	4305      	orrs	r5, r0
 800b91c:	81a5      	strh	r5, [r4, #12]
 800b91e:	e7cd      	b.n	800b8bc <__smakebuf_r+0x18>
 800b920:	0800b6b5 	.word	0x0800b6b5

0800b924 <_malloc_usable_size_r>:
 800b924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b928:	1f18      	subs	r0, r3, #4
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	bfbc      	itt	lt
 800b92e:	580b      	ldrlt	r3, [r1, r0]
 800b930:	18c0      	addlt	r0, r0, r3
 800b932:	4770      	bx	lr

0800b934 <_raise_r>:
 800b934:	291f      	cmp	r1, #31
 800b936:	b538      	push	{r3, r4, r5, lr}
 800b938:	4604      	mov	r4, r0
 800b93a:	460d      	mov	r5, r1
 800b93c:	d904      	bls.n	800b948 <_raise_r+0x14>
 800b93e:	2316      	movs	r3, #22
 800b940:	6003      	str	r3, [r0, #0]
 800b942:	f04f 30ff 	mov.w	r0, #4294967295
 800b946:	bd38      	pop	{r3, r4, r5, pc}
 800b948:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b94a:	b112      	cbz	r2, 800b952 <_raise_r+0x1e>
 800b94c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b950:	b94b      	cbnz	r3, 800b966 <_raise_r+0x32>
 800b952:	4620      	mov	r0, r4
 800b954:	f000 f830 	bl	800b9b8 <_getpid_r>
 800b958:	462a      	mov	r2, r5
 800b95a:	4601      	mov	r1, r0
 800b95c:	4620      	mov	r0, r4
 800b95e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b962:	f000 b817 	b.w	800b994 <_kill_r>
 800b966:	2b01      	cmp	r3, #1
 800b968:	d00a      	beq.n	800b980 <_raise_r+0x4c>
 800b96a:	1c59      	adds	r1, r3, #1
 800b96c:	d103      	bne.n	800b976 <_raise_r+0x42>
 800b96e:	2316      	movs	r3, #22
 800b970:	6003      	str	r3, [r0, #0]
 800b972:	2001      	movs	r0, #1
 800b974:	e7e7      	b.n	800b946 <_raise_r+0x12>
 800b976:	2400      	movs	r4, #0
 800b978:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b97c:	4628      	mov	r0, r5
 800b97e:	4798      	blx	r3
 800b980:	2000      	movs	r0, #0
 800b982:	e7e0      	b.n	800b946 <_raise_r+0x12>

0800b984 <raise>:
 800b984:	4b02      	ldr	r3, [pc, #8]	; (800b990 <raise+0xc>)
 800b986:	4601      	mov	r1, r0
 800b988:	6818      	ldr	r0, [r3, #0]
 800b98a:	f7ff bfd3 	b.w	800b934 <_raise_r>
 800b98e:	bf00      	nop
 800b990:	200000bc 	.word	0x200000bc

0800b994 <_kill_r>:
 800b994:	b538      	push	{r3, r4, r5, lr}
 800b996:	4d07      	ldr	r5, [pc, #28]	; (800b9b4 <_kill_r+0x20>)
 800b998:	2300      	movs	r3, #0
 800b99a:	4604      	mov	r4, r0
 800b99c:	4608      	mov	r0, r1
 800b99e:	4611      	mov	r1, r2
 800b9a0:	602b      	str	r3, [r5, #0]
 800b9a2:	f7f7 fc5b 	bl	800325c <_kill>
 800b9a6:	1c43      	adds	r3, r0, #1
 800b9a8:	d102      	bne.n	800b9b0 <_kill_r+0x1c>
 800b9aa:	682b      	ldr	r3, [r5, #0]
 800b9ac:	b103      	cbz	r3, 800b9b0 <_kill_r+0x1c>
 800b9ae:	6023      	str	r3, [r4, #0]
 800b9b0:	bd38      	pop	{r3, r4, r5, pc}
 800b9b2:	bf00      	nop
 800b9b4:	200004e4 	.word	0x200004e4

0800b9b8 <_getpid_r>:
 800b9b8:	f7f7 bc48 	b.w	800324c <_getpid>

0800b9bc <__sread>:
 800b9bc:	b510      	push	{r4, lr}
 800b9be:	460c      	mov	r4, r1
 800b9c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9c4:	f000 f894 	bl	800baf0 <_read_r>
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	bfab      	itete	ge
 800b9cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b9ce:	89a3      	ldrhlt	r3, [r4, #12]
 800b9d0:	181b      	addge	r3, r3, r0
 800b9d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9d6:	bfac      	ite	ge
 800b9d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9da:	81a3      	strhlt	r3, [r4, #12]
 800b9dc:	bd10      	pop	{r4, pc}

0800b9de <__swrite>:
 800b9de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e2:	461f      	mov	r7, r3
 800b9e4:	898b      	ldrh	r3, [r1, #12]
 800b9e6:	05db      	lsls	r3, r3, #23
 800b9e8:	4605      	mov	r5, r0
 800b9ea:	460c      	mov	r4, r1
 800b9ec:	4616      	mov	r6, r2
 800b9ee:	d505      	bpl.n	800b9fc <__swrite+0x1e>
 800b9f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9f4:	2302      	movs	r3, #2
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f000 f868 	bl	800bacc <_lseek_r>
 800b9fc:	89a3      	ldrh	r3, [r4, #12]
 800b9fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba06:	81a3      	strh	r3, [r4, #12]
 800ba08:	4632      	mov	r2, r6
 800ba0a:	463b      	mov	r3, r7
 800ba0c:	4628      	mov	r0, r5
 800ba0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba12:	f000 b817 	b.w	800ba44 <_write_r>

0800ba16 <__sseek>:
 800ba16:	b510      	push	{r4, lr}
 800ba18:	460c      	mov	r4, r1
 800ba1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba1e:	f000 f855 	bl	800bacc <_lseek_r>
 800ba22:	1c43      	adds	r3, r0, #1
 800ba24:	89a3      	ldrh	r3, [r4, #12]
 800ba26:	bf15      	itete	ne
 800ba28:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba32:	81a3      	strheq	r3, [r4, #12]
 800ba34:	bf18      	it	ne
 800ba36:	81a3      	strhne	r3, [r4, #12]
 800ba38:	bd10      	pop	{r4, pc}

0800ba3a <__sclose>:
 800ba3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba3e:	f000 b813 	b.w	800ba68 <_close_r>
	...

0800ba44 <_write_r>:
 800ba44:	b538      	push	{r3, r4, r5, lr}
 800ba46:	4d07      	ldr	r5, [pc, #28]	; (800ba64 <_write_r+0x20>)
 800ba48:	4604      	mov	r4, r0
 800ba4a:	4608      	mov	r0, r1
 800ba4c:	4611      	mov	r1, r2
 800ba4e:	2200      	movs	r2, #0
 800ba50:	602a      	str	r2, [r5, #0]
 800ba52:	461a      	mov	r2, r3
 800ba54:	f7f7 fc39 	bl	80032ca <_write>
 800ba58:	1c43      	adds	r3, r0, #1
 800ba5a:	d102      	bne.n	800ba62 <_write_r+0x1e>
 800ba5c:	682b      	ldr	r3, [r5, #0]
 800ba5e:	b103      	cbz	r3, 800ba62 <_write_r+0x1e>
 800ba60:	6023      	str	r3, [r4, #0]
 800ba62:	bd38      	pop	{r3, r4, r5, pc}
 800ba64:	200004e4 	.word	0x200004e4

0800ba68 <_close_r>:
 800ba68:	b538      	push	{r3, r4, r5, lr}
 800ba6a:	4d06      	ldr	r5, [pc, #24]	; (800ba84 <_close_r+0x1c>)
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	4604      	mov	r4, r0
 800ba70:	4608      	mov	r0, r1
 800ba72:	602b      	str	r3, [r5, #0]
 800ba74:	f7f7 fc45 	bl	8003302 <_close>
 800ba78:	1c43      	adds	r3, r0, #1
 800ba7a:	d102      	bne.n	800ba82 <_close_r+0x1a>
 800ba7c:	682b      	ldr	r3, [r5, #0]
 800ba7e:	b103      	cbz	r3, 800ba82 <_close_r+0x1a>
 800ba80:	6023      	str	r3, [r4, #0]
 800ba82:	bd38      	pop	{r3, r4, r5, pc}
 800ba84:	200004e4 	.word	0x200004e4

0800ba88 <_fstat_r>:
 800ba88:	b538      	push	{r3, r4, r5, lr}
 800ba8a:	4d07      	ldr	r5, [pc, #28]	; (800baa8 <_fstat_r+0x20>)
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	4604      	mov	r4, r0
 800ba90:	4608      	mov	r0, r1
 800ba92:	4611      	mov	r1, r2
 800ba94:	602b      	str	r3, [r5, #0]
 800ba96:	f7f7 fc40 	bl	800331a <_fstat>
 800ba9a:	1c43      	adds	r3, r0, #1
 800ba9c:	d102      	bne.n	800baa4 <_fstat_r+0x1c>
 800ba9e:	682b      	ldr	r3, [r5, #0]
 800baa0:	b103      	cbz	r3, 800baa4 <_fstat_r+0x1c>
 800baa2:	6023      	str	r3, [r4, #0]
 800baa4:	bd38      	pop	{r3, r4, r5, pc}
 800baa6:	bf00      	nop
 800baa8:	200004e4 	.word	0x200004e4

0800baac <_isatty_r>:
 800baac:	b538      	push	{r3, r4, r5, lr}
 800baae:	4d06      	ldr	r5, [pc, #24]	; (800bac8 <_isatty_r+0x1c>)
 800bab0:	2300      	movs	r3, #0
 800bab2:	4604      	mov	r4, r0
 800bab4:	4608      	mov	r0, r1
 800bab6:	602b      	str	r3, [r5, #0]
 800bab8:	f7f7 fc3f 	bl	800333a <_isatty>
 800babc:	1c43      	adds	r3, r0, #1
 800babe:	d102      	bne.n	800bac6 <_isatty_r+0x1a>
 800bac0:	682b      	ldr	r3, [r5, #0]
 800bac2:	b103      	cbz	r3, 800bac6 <_isatty_r+0x1a>
 800bac4:	6023      	str	r3, [r4, #0]
 800bac6:	bd38      	pop	{r3, r4, r5, pc}
 800bac8:	200004e4 	.word	0x200004e4

0800bacc <_lseek_r>:
 800bacc:	b538      	push	{r3, r4, r5, lr}
 800bace:	4d07      	ldr	r5, [pc, #28]	; (800baec <_lseek_r+0x20>)
 800bad0:	4604      	mov	r4, r0
 800bad2:	4608      	mov	r0, r1
 800bad4:	4611      	mov	r1, r2
 800bad6:	2200      	movs	r2, #0
 800bad8:	602a      	str	r2, [r5, #0]
 800bada:	461a      	mov	r2, r3
 800badc:	f7f7 fc38 	bl	8003350 <_lseek>
 800bae0:	1c43      	adds	r3, r0, #1
 800bae2:	d102      	bne.n	800baea <_lseek_r+0x1e>
 800bae4:	682b      	ldr	r3, [r5, #0]
 800bae6:	b103      	cbz	r3, 800baea <_lseek_r+0x1e>
 800bae8:	6023      	str	r3, [r4, #0]
 800baea:	bd38      	pop	{r3, r4, r5, pc}
 800baec:	200004e4 	.word	0x200004e4

0800baf0 <_read_r>:
 800baf0:	b538      	push	{r3, r4, r5, lr}
 800baf2:	4d07      	ldr	r5, [pc, #28]	; (800bb10 <_read_r+0x20>)
 800baf4:	4604      	mov	r4, r0
 800baf6:	4608      	mov	r0, r1
 800baf8:	4611      	mov	r1, r2
 800bafa:	2200      	movs	r2, #0
 800bafc:	602a      	str	r2, [r5, #0]
 800bafe:	461a      	mov	r2, r3
 800bb00:	f7f7 fbc6 	bl	8003290 <_read>
 800bb04:	1c43      	adds	r3, r0, #1
 800bb06:	d102      	bne.n	800bb0e <_read_r+0x1e>
 800bb08:	682b      	ldr	r3, [r5, #0]
 800bb0a:	b103      	cbz	r3, 800bb0e <_read_r+0x1e>
 800bb0c:	6023      	str	r3, [r4, #0]
 800bb0e:	bd38      	pop	{r3, r4, r5, pc}
 800bb10:	200004e4 	.word	0x200004e4

0800bb14 <log>:
 800bb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb16:	4604      	mov	r4, r0
 800bb18:	460d      	mov	r5, r1
 800bb1a:	f000 f835 	bl	800bb88 <__ieee754_log>
 800bb1e:	4b17      	ldr	r3, [pc, #92]	; (800bb7c <log+0x68>)
 800bb20:	f993 3000 	ldrsb.w	r3, [r3]
 800bb24:	3301      	adds	r3, #1
 800bb26:	4606      	mov	r6, r0
 800bb28:	460f      	mov	r7, r1
 800bb2a:	d01a      	beq.n	800bb62 <log+0x4e>
 800bb2c:	4622      	mov	r2, r4
 800bb2e:	462b      	mov	r3, r5
 800bb30:	4620      	mov	r0, r4
 800bb32:	4629      	mov	r1, r5
 800bb34:	f7f4 fffa 	bl	8000b2c <__aeabi_dcmpun>
 800bb38:	b998      	cbnz	r0, 800bb62 <log+0x4e>
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	4620      	mov	r0, r4
 800bb40:	4629      	mov	r1, r5
 800bb42:	f7f4 ffe9 	bl	8000b18 <__aeabi_dcmpgt>
 800bb46:	b960      	cbnz	r0, 800bb62 <log+0x4e>
 800bb48:	2200      	movs	r2, #0
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	4629      	mov	r1, r5
 800bb50:	f7f4 ffba 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb54:	b140      	cbz	r0, 800bb68 <log+0x54>
 800bb56:	f7fb fb8d 	bl	8007274 <__errno>
 800bb5a:	4f09      	ldr	r7, [pc, #36]	; (800bb80 <log+0x6c>)
 800bb5c:	2322      	movs	r3, #34	; 0x22
 800bb5e:	6003      	str	r3, [r0, #0]
 800bb60:	2600      	movs	r6, #0
 800bb62:	4630      	mov	r0, r6
 800bb64:	4639      	mov	r1, r7
 800bb66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb68:	f7fb fb84 	bl	8007274 <__errno>
 800bb6c:	2321      	movs	r3, #33	; 0x21
 800bb6e:	6003      	str	r3, [r0, #0]
 800bb70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bb74:	4803      	ldr	r0, [pc, #12]	; (800bb84 <log+0x70>)
 800bb76:	f7ff b9e3 	b.w	800af40 <nan>
 800bb7a:	bf00      	nop
 800bb7c:	20000290 	.word	0x20000290
 800bb80:	fff00000 	.word	0xfff00000
 800bb84:	0800dfa0 	.word	0x0800dfa0

0800bb88 <__ieee754_log>:
 800bb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb8c:	ed2d 8b04 	vpush	{d8-d9}
 800bb90:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800bb94:	b083      	sub	sp, #12
 800bb96:	4602      	mov	r2, r0
 800bb98:	460b      	mov	r3, r1
 800bb9a:	460d      	mov	r5, r1
 800bb9c:	da26      	bge.n	800bbec <__ieee754_log+0x64>
 800bb9e:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800bba2:	4304      	orrs	r4, r0
 800bba4:	d10a      	bne.n	800bbbc <__ieee754_log+0x34>
 800bba6:	49ce      	ldr	r1, [pc, #824]	; (800bee0 <__ieee754_log+0x358>)
 800bba8:	2200      	movs	r2, #0
 800bbaa:	2300      	movs	r3, #0
 800bbac:	2000      	movs	r0, #0
 800bbae:	f7f4 fe4d 	bl	800084c <__aeabi_ddiv>
 800bbb2:	b003      	add	sp, #12
 800bbb4:	ecbd 8b04 	vpop	{d8-d9}
 800bbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbbc:	2900      	cmp	r1, #0
 800bbbe:	da04      	bge.n	800bbca <__ieee754_log+0x42>
 800bbc0:	f7f4 fb62 	bl	8000288 <__aeabi_dsub>
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	e7f1      	b.n	800bbae <__ieee754_log+0x26>
 800bbca:	4bc6      	ldr	r3, [pc, #792]	; (800bee4 <__ieee754_log+0x35c>)
 800bbcc:	2200      	movs	r2, #0
 800bbce:	f7f4 fd13 	bl	80005f8 <__aeabi_dmul>
 800bbd2:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	460b      	mov	r3, r1
 800bbda:	460d      	mov	r5, r1
 800bbdc:	49c2      	ldr	r1, [pc, #776]	; (800bee8 <__ieee754_log+0x360>)
 800bbde:	428d      	cmp	r5, r1
 800bbe0:	dd06      	ble.n	800bbf0 <__ieee754_log+0x68>
 800bbe2:	4610      	mov	r0, r2
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	f7f4 fb51 	bl	800028c <__adddf3>
 800bbea:	e7e2      	b.n	800bbb2 <__ieee754_log+0x2a>
 800bbec:	2600      	movs	r6, #0
 800bbee:	e7f5      	b.n	800bbdc <__ieee754_log+0x54>
 800bbf0:	152c      	asrs	r4, r5, #20
 800bbf2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800bbf6:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800bbfa:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800bbfe:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800bc02:	4426      	add	r6, r4
 800bc04:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800bc08:	f084 537f 	eor.w	r3, r4, #1069547520	; 0x3fc00000
 800bc0c:	f483 1340 	eor.w	r3, r3, #3145728	; 0x300000
 800bc10:	4610      	mov	r0, r2
 800bc12:	ea43 0105 	orr.w	r1, r3, r5
 800bc16:	2200      	movs	r2, #0
 800bc18:	4bb4      	ldr	r3, [pc, #720]	; (800beec <__ieee754_log+0x364>)
 800bc1a:	f7f4 fb35 	bl	8000288 <__aeabi_dsub>
 800bc1e:	1cab      	adds	r3, r5, #2
 800bc20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc24:	2b02      	cmp	r3, #2
 800bc26:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800bc2a:	4682      	mov	sl, r0
 800bc2c:	468b      	mov	fp, r1
 800bc2e:	f04f 0200 	mov.w	r2, #0
 800bc32:	dc53      	bgt.n	800bcdc <__ieee754_log+0x154>
 800bc34:	2300      	movs	r3, #0
 800bc36:	f7f4 ff47 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc3a:	b1d0      	cbz	r0, 800bc72 <__ieee754_log+0xea>
 800bc3c:	2c00      	cmp	r4, #0
 800bc3e:	f000 8122 	beq.w	800be86 <__ieee754_log+0x2fe>
 800bc42:	4620      	mov	r0, r4
 800bc44:	f7f4 fc6e 	bl	8000524 <__aeabi_i2d>
 800bc48:	a391      	add	r3, pc, #580	; (adr r3, 800be90 <__ieee754_log+0x308>)
 800bc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4e:	4606      	mov	r6, r0
 800bc50:	460f      	mov	r7, r1
 800bc52:	f7f4 fcd1 	bl	80005f8 <__aeabi_dmul>
 800bc56:	a390      	add	r3, pc, #576	; (adr r3, 800be98 <__ieee754_log+0x310>)
 800bc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5c:	4604      	mov	r4, r0
 800bc5e:	460d      	mov	r5, r1
 800bc60:	4630      	mov	r0, r6
 800bc62:	4639      	mov	r1, r7
 800bc64:	f7f4 fcc8 	bl	80005f8 <__aeabi_dmul>
 800bc68:	4602      	mov	r2, r0
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	4620      	mov	r0, r4
 800bc6e:	4629      	mov	r1, r5
 800bc70:	e7b9      	b.n	800bbe6 <__ieee754_log+0x5e>
 800bc72:	a38b      	add	r3, pc, #556	; (adr r3, 800bea0 <__ieee754_log+0x318>)
 800bc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc78:	4650      	mov	r0, sl
 800bc7a:	4659      	mov	r1, fp
 800bc7c:	f7f4 fcbc 	bl	80005f8 <__aeabi_dmul>
 800bc80:	4602      	mov	r2, r0
 800bc82:	460b      	mov	r3, r1
 800bc84:	2000      	movs	r0, #0
 800bc86:	499a      	ldr	r1, [pc, #616]	; (800bef0 <__ieee754_log+0x368>)
 800bc88:	f7f4 fafe 	bl	8000288 <__aeabi_dsub>
 800bc8c:	4652      	mov	r2, sl
 800bc8e:	4606      	mov	r6, r0
 800bc90:	460f      	mov	r7, r1
 800bc92:	465b      	mov	r3, fp
 800bc94:	4650      	mov	r0, sl
 800bc96:	4659      	mov	r1, fp
 800bc98:	f7f4 fcae 	bl	80005f8 <__aeabi_dmul>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	460b      	mov	r3, r1
 800bca0:	4630      	mov	r0, r6
 800bca2:	4639      	mov	r1, r7
 800bca4:	f7f4 fca8 	bl	80005f8 <__aeabi_dmul>
 800bca8:	4606      	mov	r6, r0
 800bcaa:	460f      	mov	r7, r1
 800bcac:	b914      	cbnz	r4, 800bcb4 <__ieee754_log+0x12c>
 800bcae:	4632      	mov	r2, r6
 800bcb0:	463b      	mov	r3, r7
 800bcb2:	e0a2      	b.n	800bdfa <__ieee754_log+0x272>
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	f7f4 fc35 	bl	8000524 <__aeabi_i2d>
 800bcba:	a375      	add	r3, pc, #468	; (adr r3, 800be90 <__ieee754_log+0x308>)
 800bcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc0:	4680      	mov	r8, r0
 800bcc2:	4689      	mov	r9, r1
 800bcc4:	f7f4 fc98 	bl	80005f8 <__aeabi_dmul>
 800bcc8:	a373      	add	r3, pc, #460	; (adr r3, 800be98 <__ieee754_log+0x310>)
 800bcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcce:	4604      	mov	r4, r0
 800bcd0:	460d      	mov	r5, r1
 800bcd2:	4640      	mov	r0, r8
 800bcd4:	4649      	mov	r1, r9
 800bcd6:	f7f4 fc8f 	bl	80005f8 <__aeabi_dmul>
 800bcda:	e0a7      	b.n	800be2c <__ieee754_log+0x2a4>
 800bcdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bce0:	f7f4 fad4 	bl	800028c <__adddf3>
 800bce4:	4602      	mov	r2, r0
 800bce6:	460b      	mov	r3, r1
 800bce8:	4650      	mov	r0, sl
 800bcea:	4659      	mov	r1, fp
 800bcec:	f7f4 fdae 	bl	800084c <__aeabi_ddiv>
 800bcf0:	ec41 0b18 	vmov	d8, r0, r1
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	f7f4 fc15 	bl	8000524 <__aeabi_i2d>
 800bcfa:	ec53 2b18 	vmov	r2, r3, d8
 800bcfe:	ec41 0b19 	vmov	d9, r0, r1
 800bd02:	ec51 0b18 	vmov	r0, r1, d8
 800bd06:	f7f4 fc77 	bl	80005f8 <__aeabi_dmul>
 800bd0a:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800bd0e:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800bd12:	9301      	str	r3, [sp, #4]
 800bd14:	4602      	mov	r2, r0
 800bd16:	460b      	mov	r3, r1
 800bd18:	4680      	mov	r8, r0
 800bd1a:	4689      	mov	r9, r1
 800bd1c:	f7f4 fc6c 	bl	80005f8 <__aeabi_dmul>
 800bd20:	a361      	add	r3, pc, #388	; (adr r3, 800bea8 <__ieee754_log+0x320>)
 800bd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd26:	4606      	mov	r6, r0
 800bd28:	460f      	mov	r7, r1
 800bd2a:	f7f4 fc65 	bl	80005f8 <__aeabi_dmul>
 800bd2e:	a360      	add	r3, pc, #384	; (adr r3, 800beb0 <__ieee754_log+0x328>)
 800bd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd34:	f7f4 faaa 	bl	800028c <__adddf3>
 800bd38:	4632      	mov	r2, r6
 800bd3a:	463b      	mov	r3, r7
 800bd3c:	f7f4 fc5c 	bl	80005f8 <__aeabi_dmul>
 800bd40:	a35d      	add	r3, pc, #372	; (adr r3, 800beb8 <__ieee754_log+0x330>)
 800bd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd46:	f7f4 faa1 	bl	800028c <__adddf3>
 800bd4a:	4632      	mov	r2, r6
 800bd4c:	463b      	mov	r3, r7
 800bd4e:	f7f4 fc53 	bl	80005f8 <__aeabi_dmul>
 800bd52:	a35b      	add	r3, pc, #364	; (adr r3, 800bec0 <__ieee754_log+0x338>)
 800bd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd58:	f7f4 fa98 	bl	800028c <__adddf3>
 800bd5c:	4642      	mov	r2, r8
 800bd5e:	464b      	mov	r3, r9
 800bd60:	f7f4 fc4a 	bl	80005f8 <__aeabi_dmul>
 800bd64:	a358      	add	r3, pc, #352	; (adr r3, 800bec8 <__ieee754_log+0x340>)
 800bd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6a:	4680      	mov	r8, r0
 800bd6c:	4689      	mov	r9, r1
 800bd6e:	4630      	mov	r0, r6
 800bd70:	4639      	mov	r1, r7
 800bd72:	f7f4 fc41 	bl	80005f8 <__aeabi_dmul>
 800bd76:	a356      	add	r3, pc, #344	; (adr r3, 800bed0 <__ieee754_log+0x348>)
 800bd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7c:	f7f4 fa86 	bl	800028c <__adddf3>
 800bd80:	4632      	mov	r2, r6
 800bd82:	463b      	mov	r3, r7
 800bd84:	f7f4 fc38 	bl	80005f8 <__aeabi_dmul>
 800bd88:	a353      	add	r3, pc, #332	; (adr r3, 800bed8 <__ieee754_log+0x350>)
 800bd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8e:	f7f4 fa7d 	bl	800028c <__adddf3>
 800bd92:	4632      	mov	r2, r6
 800bd94:	463b      	mov	r3, r7
 800bd96:	f7f4 fc2f 	bl	80005f8 <__aeabi_dmul>
 800bd9a:	460b      	mov	r3, r1
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	4649      	mov	r1, r9
 800bda0:	4640      	mov	r0, r8
 800bda2:	f7f4 fa73 	bl	800028c <__adddf3>
 800bda6:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800bdaa:	9b01      	ldr	r3, [sp, #4]
 800bdac:	3551      	adds	r5, #81	; 0x51
 800bdae:	431d      	orrs	r5, r3
 800bdb0:	2d00      	cmp	r5, #0
 800bdb2:	4680      	mov	r8, r0
 800bdb4:	4689      	mov	r9, r1
 800bdb6:	dd48      	ble.n	800be4a <__ieee754_log+0x2c2>
 800bdb8:	4b4d      	ldr	r3, [pc, #308]	; (800bef0 <__ieee754_log+0x368>)
 800bdba:	2200      	movs	r2, #0
 800bdbc:	4650      	mov	r0, sl
 800bdbe:	4659      	mov	r1, fp
 800bdc0:	f7f4 fc1a 	bl	80005f8 <__aeabi_dmul>
 800bdc4:	4652      	mov	r2, sl
 800bdc6:	465b      	mov	r3, fp
 800bdc8:	f7f4 fc16 	bl	80005f8 <__aeabi_dmul>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	460b      	mov	r3, r1
 800bdd0:	4606      	mov	r6, r0
 800bdd2:	460f      	mov	r7, r1
 800bdd4:	4640      	mov	r0, r8
 800bdd6:	4649      	mov	r1, r9
 800bdd8:	f7f4 fa58 	bl	800028c <__adddf3>
 800bddc:	ec53 2b18 	vmov	r2, r3, d8
 800bde0:	f7f4 fc0a 	bl	80005f8 <__aeabi_dmul>
 800bde4:	4680      	mov	r8, r0
 800bde6:	4689      	mov	r9, r1
 800bde8:	b964      	cbnz	r4, 800be04 <__ieee754_log+0x27c>
 800bdea:	4602      	mov	r2, r0
 800bdec:	460b      	mov	r3, r1
 800bdee:	4630      	mov	r0, r6
 800bdf0:	4639      	mov	r1, r7
 800bdf2:	f7f4 fa49 	bl	8000288 <__aeabi_dsub>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	4650      	mov	r0, sl
 800bdfc:	4659      	mov	r1, fp
 800bdfe:	f7f4 fa43 	bl	8000288 <__aeabi_dsub>
 800be02:	e6d6      	b.n	800bbb2 <__ieee754_log+0x2a>
 800be04:	a322      	add	r3, pc, #136	; (adr r3, 800be90 <__ieee754_log+0x308>)
 800be06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0a:	ec51 0b19 	vmov	r0, r1, d9
 800be0e:	f7f4 fbf3 	bl	80005f8 <__aeabi_dmul>
 800be12:	a321      	add	r3, pc, #132	; (adr r3, 800be98 <__ieee754_log+0x310>)
 800be14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be18:	4604      	mov	r4, r0
 800be1a:	460d      	mov	r5, r1
 800be1c:	ec51 0b19 	vmov	r0, r1, d9
 800be20:	f7f4 fbea 	bl	80005f8 <__aeabi_dmul>
 800be24:	4642      	mov	r2, r8
 800be26:	464b      	mov	r3, r9
 800be28:	f7f4 fa30 	bl	800028c <__adddf3>
 800be2c:	4602      	mov	r2, r0
 800be2e:	460b      	mov	r3, r1
 800be30:	4630      	mov	r0, r6
 800be32:	4639      	mov	r1, r7
 800be34:	f7f4 fa28 	bl	8000288 <__aeabi_dsub>
 800be38:	4652      	mov	r2, sl
 800be3a:	465b      	mov	r3, fp
 800be3c:	f7f4 fa24 	bl	8000288 <__aeabi_dsub>
 800be40:	4602      	mov	r2, r0
 800be42:	460b      	mov	r3, r1
 800be44:	4620      	mov	r0, r4
 800be46:	4629      	mov	r1, r5
 800be48:	e7d9      	b.n	800bdfe <__ieee754_log+0x276>
 800be4a:	4602      	mov	r2, r0
 800be4c:	460b      	mov	r3, r1
 800be4e:	4650      	mov	r0, sl
 800be50:	4659      	mov	r1, fp
 800be52:	f7f4 fa19 	bl	8000288 <__aeabi_dsub>
 800be56:	ec53 2b18 	vmov	r2, r3, d8
 800be5a:	f7f4 fbcd 	bl	80005f8 <__aeabi_dmul>
 800be5e:	4606      	mov	r6, r0
 800be60:	460f      	mov	r7, r1
 800be62:	2c00      	cmp	r4, #0
 800be64:	f43f af23 	beq.w	800bcae <__ieee754_log+0x126>
 800be68:	a309      	add	r3, pc, #36	; (adr r3, 800be90 <__ieee754_log+0x308>)
 800be6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6e:	ec51 0b19 	vmov	r0, r1, d9
 800be72:	f7f4 fbc1 	bl	80005f8 <__aeabi_dmul>
 800be76:	a308      	add	r3, pc, #32	; (adr r3, 800be98 <__ieee754_log+0x310>)
 800be78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7c:	4604      	mov	r4, r0
 800be7e:	460d      	mov	r5, r1
 800be80:	ec51 0b19 	vmov	r0, r1, d9
 800be84:	e727      	b.n	800bcd6 <__ieee754_log+0x14e>
 800be86:	2000      	movs	r0, #0
 800be88:	2100      	movs	r1, #0
 800be8a:	e692      	b.n	800bbb2 <__ieee754_log+0x2a>
 800be8c:	f3af 8000 	nop.w
 800be90:	fee00000 	.word	0xfee00000
 800be94:	3fe62e42 	.word	0x3fe62e42
 800be98:	35793c76 	.word	0x35793c76
 800be9c:	3dea39ef 	.word	0x3dea39ef
 800bea0:	55555555 	.word	0x55555555
 800bea4:	3fd55555 	.word	0x3fd55555
 800bea8:	df3e5244 	.word	0xdf3e5244
 800beac:	3fc2f112 	.word	0x3fc2f112
 800beb0:	96cb03de 	.word	0x96cb03de
 800beb4:	3fc74664 	.word	0x3fc74664
 800beb8:	94229359 	.word	0x94229359
 800bebc:	3fd24924 	.word	0x3fd24924
 800bec0:	55555593 	.word	0x55555593
 800bec4:	3fe55555 	.word	0x3fe55555
 800bec8:	d078c69f 	.word	0xd078c69f
 800becc:	3fc39a09 	.word	0x3fc39a09
 800bed0:	1d8e78af 	.word	0x1d8e78af
 800bed4:	3fcc71c5 	.word	0x3fcc71c5
 800bed8:	9997fa04 	.word	0x9997fa04
 800bedc:	3fd99999 	.word	0x3fd99999
 800bee0:	c3500000 	.word	0xc3500000
 800bee4:	43500000 	.word	0x43500000
 800bee8:	7fefffff 	.word	0x7fefffff
 800beec:	3ff00000 	.word	0x3ff00000
 800bef0:	3fe00000 	.word	0x3fe00000

0800bef4 <_init>:
 800bef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bef6:	bf00      	nop
 800bef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800befa:	bc08      	pop	{r3}
 800befc:	469e      	mov	lr, r3
 800befe:	4770      	bx	lr

0800bf00 <_fini>:
 800bf00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf02:	bf00      	nop
 800bf04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf06:	bc08      	pop	{r3}
 800bf08:	469e      	mov	lr, r3
 800bf0a:	4770      	bx	lr
